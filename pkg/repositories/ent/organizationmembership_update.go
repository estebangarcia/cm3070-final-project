// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationmembership"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

// OrganizationMembershipUpdate is the builder for updating OrganizationMembership entities.
type OrganizationMembershipUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMembershipMutation
}

// Where appends a list predicates to the OrganizationMembershipUpdate builder.
func (omu *OrganizationMembershipUpdate) Where(ps ...predicate.OrganizationMembership) *OrganizationMembershipUpdate {
	omu.mutation.Where(ps...)
	return omu
}

// SetUserID sets the "user_id" field.
func (omu *OrganizationMembershipUpdate) SetUserID(i int) *OrganizationMembershipUpdate {
	omu.mutation.SetUserID(i)
	return omu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (omu *OrganizationMembershipUpdate) SetNillableUserID(i *int) *OrganizationMembershipUpdate {
	if i != nil {
		omu.SetUserID(*i)
	}
	return omu
}

// SetOrganizationID sets the "organization_id" field.
func (omu *OrganizationMembershipUpdate) SetOrganizationID(i int) *OrganizationMembershipUpdate {
	omu.mutation.SetOrganizationID(i)
	return omu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (omu *OrganizationMembershipUpdate) SetNillableOrganizationID(i *int) *OrganizationMembershipUpdate {
	if i != nil {
		omu.SetOrganizationID(*i)
	}
	return omu
}

// SetRole sets the "role" field.
func (omu *OrganizationMembershipUpdate) SetRole(i int) *OrganizationMembershipUpdate {
	omu.mutation.ResetRole()
	omu.mutation.SetRole(i)
	return omu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (omu *OrganizationMembershipUpdate) SetNillableRole(i *int) *OrganizationMembershipUpdate {
	if i != nil {
		omu.SetRole(*i)
	}
	return omu
}

// AddRole adds i to the "role" field.
func (omu *OrganizationMembershipUpdate) AddRole(i int) *OrganizationMembershipUpdate {
	omu.mutation.AddRole(i)
	return omu
}

// SetUser sets the "user" edge to the User entity.
func (omu *OrganizationMembershipUpdate) SetUser(u *User) *OrganizationMembershipUpdate {
	return omu.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (omu *OrganizationMembershipUpdate) SetOrganization(o *Organization) *OrganizationMembershipUpdate {
	return omu.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationMembershipMutation object of the builder.
func (omu *OrganizationMembershipUpdate) Mutation() *OrganizationMembershipMutation {
	return omu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (omu *OrganizationMembershipUpdate) ClearUser() *OrganizationMembershipUpdate {
	omu.mutation.ClearUser()
	return omu
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (omu *OrganizationMembershipUpdate) ClearOrganization() *OrganizationMembershipUpdate {
	omu.mutation.ClearOrganization()
	return omu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (omu *OrganizationMembershipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, omu.sqlSave, omu.mutation, omu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omu *OrganizationMembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := omu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (omu *OrganizationMembershipUpdate) Exec(ctx context.Context) error {
	_, err := omu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omu *OrganizationMembershipUpdate) ExecX(ctx context.Context) {
	if err := omu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omu *OrganizationMembershipUpdate) check() error {
	if omu.mutation.UserCleared() && len(omu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationMembership.user"`)
	}
	if omu.mutation.OrganizationCleared() && len(omu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationMembership.organization"`)
	}
	return nil
}

func (omu *OrganizationMembershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := omu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationmembership.Table, organizationmembership.Columns, sqlgraph.NewFieldSpec(organizationmembership.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(organizationmembership.FieldOrganizationID, field.TypeInt))
	if ps := omu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omu.mutation.Role(); ok {
		_spec.SetField(organizationmembership.FieldRole, field.TypeInt, value)
	}
	if value, ok := omu.mutation.AddedRole(); ok {
		_spec.AddField(organizationmembership.FieldRole, field.TypeInt, value)
	}
	if omu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.UserTable,
			Columns: []string{organizationmembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.UserTable,
			Columns: []string{organizationmembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.OrganizationTable,
			Columns: []string{organizationmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.OrganizationTable,
			Columns: []string{organizationmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, omu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	omu.mutation.done = true
	return n, nil
}

// OrganizationMembershipUpdateOne is the builder for updating a single OrganizationMembership entity.
type OrganizationMembershipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMembershipMutation
}

// SetUserID sets the "user_id" field.
func (omuo *OrganizationMembershipUpdateOne) SetUserID(i int) *OrganizationMembershipUpdateOne {
	omuo.mutation.SetUserID(i)
	return omuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (omuo *OrganizationMembershipUpdateOne) SetNillableUserID(i *int) *OrganizationMembershipUpdateOne {
	if i != nil {
		omuo.SetUserID(*i)
	}
	return omuo
}

// SetOrganizationID sets the "organization_id" field.
func (omuo *OrganizationMembershipUpdateOne) SetOrganizationID(i int) *OrganizationMembershipUpdateOne {
	omuo.mutation.SetOrganizationID(i)
	return omuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (omuo *OrganizationMembershipUpdateOne) SetNillableOrganizationID(i *int) *OrganizationMembershipUpdateOne {
	if i != nil {
		omuo.SetOrganizationID(*i)
	}
	return omuo
}

// SetRole sets the "role" field.
func (omuo *OrganizationMembershipUpdateOne) SetRole(i int) *OrganizationMembershipUpdateOne {
	omuo.mutation.ResetRole()
	omuo.mutation.SetRole(i)
	return omuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (omuo *OrganizationMembershipUpdateOne) SetNillableRole(i *int) *OrganizationMembershipUpdateOne {
	if i != nil {
		omuo.SetRole(*i)
	}
	return omuo
}

// AddRole adds i to the "role" field.
func (omuo *OrganizationMembershipUpdateOne) AddRole(i int) *OrganizationMembershipUpdateOne {
	omuo.mutation.AddRole(i)
	return omuo
}

// SetUser sets the "user" edge to the User entity.
func (omuo *OrganizationMembershipUpdateOne) SetUser(u *User) *OrganizationMembershipUpdateOne {
	return omuo.SetUserID(u.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (omuo *OrganizationMembershipUpdateOne) SetOrganization(o *Organization) *OrganizationMembershipUpdateOne {
	return omuo.SetOrganizationID(o.ID)
}

// Mutation returns the OrganizationMembershipMutation object of the builder.
func (omuo *OrganizationMembershipUpdateOne) Mutation() *OrganizationMembershipMutation {
	return omuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (omuo *OrganizationMembershipUpdateOne) ClearUser() *OrganizationMembershipUpdateOne {
	omuo.mutation.ClearUser()
	return omuo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (omuo *OrganizationMembershipUpdateOne) ClearOrganization() *OrganizationMembershipUpdateOne {
	omuo.mutation.ClearOrganization()
	return omuo
}

// Where appends a list predicates to the OrganizationMembershipUpdate builder.
func (omuo *OrganizationMembershipUpdateOne) Where(ps ...predicate.OrganizationMembership) *OrganizationMembershipUpdateOne {
	omuo.mutation.Where(ps...)
	return omuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (omuo *OrganizationMembershipUpdateOne) Select(field string, fields ...string) *OrganizationMembershipUpdateOne {
	omuo.fields = append([]string{field}, fields...)
	return omuo
}

// Save executes the query and returns the updated OrganizationMembership entity.
func (omuo *OrganizationMembershipUpdateOne) Save(ctx context.Context) (*OrganizationMembership, error) {
	return withHooks(ctx, omuo.sqlSave, omuo.mutation, omuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omuo *OrganizationMembershipUpdateOne) SaveX(ctx context.Context) *OrganizationMembership {
	node, err := omuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (omuo *OrganizationMembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := omuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omuo *OrganizationMembershipUpdateOne) ExecX(ctx context.Context) {
	if err := omuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (omuo *OrganizationMembershipUpdateOne) check() error {
	if omuo.mutation.UserCleared() && len(omuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationMembership.user"`)
	}
	if omuo.mutation.OrganizationCleared() && len(omuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationMembership.organization"`)
	}
	return nil
}

func (omuo *OrganizationMembershipUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationMembership, err error) {
	if err := omuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationmembership.Table, organizationmembership.Columns, sqlgraph.NewFieldSpec(organizationmembership.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(organizationmembership.FieldOrganizationID, field.TypeInt))
	if id, ok := omuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "OrganizationMembership.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := omuo.mutation.OrganizationID(); !ok {
		return nil, &ValidationError{Name: "organization_id", err: errors.New(`ent: missing "OrganizationMembership.organization_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := omuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !organizationmembership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := omuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := omuo.mutation.Role(); ok {
		_spec.SetField(organizationmembership.FieldRole, field.TypeInt, value)
	}
	if value, ok := omuo.mutation.AddedRole(); ok {
		_spec.AddField(organizationmembership.FieldRole, field.TypeInt, value)
	}
	if omuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.UserTable,
			Columns: []string{organizationmembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.UserTable,
			Columns: []string{organizationmembership.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.OrganizationTable,
			Columns: []string{organizationmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organizationmembership.OrganizationTable,
			Columns: []string{organizationmembership.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationMembership{config: omuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, omuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	omuo.mutation.done = true
	return _node, nil
}
