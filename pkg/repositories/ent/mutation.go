// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlobChunk            = "BlobChunk"
	TypeManifest             = "Manifest"
	TypeManifestTagReference = "ManifestTagReference"
	TypeRepository           = "Repository"
	TypeUser                 = "User"
)

// BlobChunkMutation represents an operation that mutates the BlobChunk nodes in the graph.
type BlobChunkMutation struct {
	config
	op             Op
	typ            string
	id             *int
	upload_id      *string
	session_id     *string
	range_from     *uint64
	addrange_from  *int64
	range_to       *uint64
	addrange_to    *int64
	part_number    *uint64
	addpart_number *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*BlobChunk, error)
	predicates     []predicate.BlobChunk
}

var _ ent.Mutation = (*BlobChunkMutation)(nil)

// blobchunkOption allows management of the mutation configuration using functional options.
type blobchunkOption func(*BlobChunkMutation)

// newBlobChunkMutation creates new mutation for the BlobChunk entity.
func newBlobChunkMutation(c config, op Op, opts ...blobchunkOption) *BlobChunkMutation {
	m := &BlobChunkMutation{
		config:        c,
		op:            op,
		typ:           TypeBlobChunk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlobChunkID sets the ID field of the mutation.
func withBlobChunkID(id int) blobchunkOption {
	return func(m *BlobChunkMutation) {
		var (
			err   error
			once  sync.Once
			value *BlobChunk
		)
		m.oldValue = func(ctx context.Context) (*BlobChunk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BlobChunk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlobChunk sets the old BlobChunk of the mutation.
func withBlobChunk(node *BlobChunk) blobchunkOption {
	return func(m *BlobChunkMutation) {
		m.oldValue = func(context.Context) (*BlobChunk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlobChunkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlobChunkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlobChunkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlobChunkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BlobChunk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUploadID sets the "upload_id" field.
func (m *BlobChunkMutation) SetUploadID(s string) {
	m.upload_id = &s
}

// UploadID returns the value of the "upload_id" field in the mutation.
func (m *BlobChunkMutation) UploadID() (r string, exists bool) {
	v := m.upload_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadID returns the old "upload_id" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldUploadID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadID: %w", err)
	}
	return oldValue.UploadID, nil
}

// ResetUploadID resets all changes to the "upload_id" field.
func (m *BlobChunkMutation) ResetUploadID() {
	m.upload_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *BlobChunkMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *BlobChunkMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *BlobChunkMutation) ResetSessionID() {
	m.session_id = nil
}

// SetRangeFrom sets the "range_from" field.
func (m *BlobChunkMutation) SetRangeFrom(u uint64) {
	m.range_from = &u
	m.addrange_from = nil
}

// RangeFrom returns the value of the "range_from" field in the mutation.
func (m *BlobChunkMutation) RangeFrom() (r uint64, exists bool) {
	v := m.range_from
	if v == nil {
		return
	}
	return *v, true
}

// OldRangeFrom returns the old "range_from" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldRangeFrom(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRangeFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRangeFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRangeFrom: %w", err)
	}
	return oldValue.RangeFrom, nil
}

// AddRangeFrom adds u to the "range_from" field.
func (m *BlobChunkMutation) AddRangeFrom(u int64) {
	if m.addrange_from != nil {
		*m.addrange_from += u
	} else {
		m.addrange_from = &u
	}
}

// AddedRangeFrom returns the value that was added to the "range_from" field in this mutation.
func (m *BlobChunkMutation) AddedRangeFrom() (r int64, exists bool) {
	v := m.addrange_from
	if v == nil {
		return
	}
	return *v, true
}

// ResetRangeFrom resets all changes to the "range_from" field.
func (m *BlobChunkMutation) ResetRangeFrom() {
	m.range_from = nil
	m.addrange_from = nil
}

// SetRangeTo sets the "range_to" field.
func (m *BlobChunkMutation) SetRangeTo(u uint64) {
	m.range_to = &u
	m.addrange_to = nil
}

// RangeTo returns the value of the "range_to" field in the mutation.
func (m *BlobChunkMutation) RangeTo() (r uint64, exists bool) {
	v := m.range_to
	if v == nil {
		return
	}
	return *v, true
}

// OldRangeTo returns the old "range_to" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldRangeTo(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRangeTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRangeTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRangeTo: %w", err)
	}
	return oldValue.RangeTo, nil
}

// AddRangeTo adds u to the "range_to" field.
func (m *BlobChunkMutation) AddRangeTo(u int64) {
	if m.addrange_to != nil {
		*m.addrange_to += u
	} else {
		m.addrange_to = &u
	}
}

// AddedRangeTo returns the value that was added to the "range_to" field in this mutation.
func (m *BlobChunkMutation) AddedRangeTo() (r int64, exists bool) {
	v := m.addrange_to
	if v == nil {
		return
	}
	return *v, true
}

// ResetRangeTo resets all changes to the "range_to" field.
func (m *BlobChunkMutation) ResetRangeTo() {
	m.range_to = nil
	m.addrange_to = nil
}

// SetPartNumber sets the "part_number" field.
func (m *BlobChunkMutation) SetPartNumber(u uint64) {
	m.part_number = &u
	m.addpart_number = nil
}

// PartNumber returns the value of the "part_number" field in the mutation.
func (m *BlobChunkMutation) PartNumber() (r uint64, exists bool) {
	v := m.part_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPartNumber returns the old "part_number" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldPartNumber(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartNumber: %w", err)
	}
	return oldValue.PartNumber, nil
}

// AddPartNumber adds u to the "part_number" field.
func (m *BlobChunkMutation) AddPartNumber(u int64) {
	if m.addpart_number != nil {
		*m.addpart_number += u
	} else {
		m.addpart_number = &u
	}
}

// AddedPartNumber returns the value that was added to the "part_number" field in this mutation.
func (m *BlobChunkMutation) AddedPartNumber() (r int64, exists bool) {
	v := m.addpart_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetPartNumber resets all changes to the "part_number" field.
func (m *BlobChunkMutation) ResetPartNumber() {
	m.part_number = nil
	m.addpart_number = nil
}

// Where appends a list predicates to the BlobChunkMutation builder.
func (m *BlobChunkMutation) Where(ps ...predicate.BlobChunk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlobChunkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlobChunkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BlobChunk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlobChunkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlobChunkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BlobChunk).
func (m *BlobChunkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlobChunkMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.upload_id != nil {
		fields = append(fields, blobchunk.FieldUploadID)
	}
	if m.session_id != nil {
		fields = append(fields, blobchunk.FieldSessionID)
	}
	if m.range_from != nil {
		fields = append(fields, blobchunk.FieldRangeFrom)
	}
	if m.range_to != nil {
		fields = append(fields, blobchunk.FieldRangeTo)
	}
	if m.part_number != nil {
		fields = append(fields, blobchunk.FieldPartNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlobChunkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blobchunk.FieldUploadID:
		return m.UploadID()
	case blobchunk.FieldSessionID:
		return m.SessionID()
	case blobchunk.FieldRangeFrom:
		return m.RangeFrom()
	case blobchunk.FieldRangeTo:
		return m.RangeTo()
	case blobchunk.FieldPartNumber:
		return m.PartNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlobChunkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blobchunk.FieldUploadID:
		return m.OldUploadID(ctx)
	case blobchunk.FieldSessionID:
		return m.OldSessionID(ctx)
	case blobchunk.FieldRangeFrom:
		return m.OldRangeFrom(ctx)
	case blobchunk.FieldRangeTo:
		return m.OldRangeTo(ctx)
	case blobchunk.FieldPartNumber:
		return m.OldPartNumber(ctx)
	}
	return nil, fmt.Errorf("unknown BlobChunk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobChunkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blobchunk.FieldUploadID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadID(v)
		return nil
	case blobchunk.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case blobchunk.FieldRangeFrom:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRangeFrom(v)
		return nil
	case blobchunk.FieldRangeTo:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRangeTo(v)
		return nil
	case blobchunk.FieldPartNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartNumber(v)
		return nil
	}
	return fmt.Errorf("unknown BlobChunk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlobChunkMutation) AddedFields() []string {
	var fields []string
	if m.addrange_from != nil {
		fields = append(fields, blobchunk.FieldRangeFrom)
	}
	if m.addrange_to != nil {
		fields = append(fields, blobchunk.FieldRangeTo)
	}
	if m.addpart_number != nil {
		fields = append(fields, blobchunk.FieldPartNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlobChunkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case blobchunk.FieldRangeFrom:
		return m.AddedRangeFrom()
	case blobchunk.FieldRangeTo:
		return m.AddedRangeTo()
	case blobchunk.FieldPartNumber:
		return m.AddedPartNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobChunkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case blobchunk.FieldRangeFrom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRangeFrom(v)
		return nil
	case blobchunk.FieldRangeTo:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRangeTo(v)
		return nil
	case blobchunk.FieldPartNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartNumber(v)
		return nil
	}
	return fmt.Errorf("unknown BlobChunk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlobChunkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlobChunkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlobChunkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BlobChunk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlobChunkMutation) ResetField(name string) error {
	switch name {
	case blobchunk.FieldUploadID:
		m.ResetUploadID()
		return nil
	case blobchunk.FieldSessionID:
		m.ResetSessionID()
		return nil
	case blobchunk.FieldRangeFrom:
		m.ResetRangeFrom()
		return nil
	case blobchunk.FieldRangeTo:
		m.ResetRangeTo()
		return nil
	case blobchunk.FieldPartNumber:
		m.ResetPartNumber()
		return nil
	}
	return fmt.Errorf("unknown BlobChunk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlobChunkMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlobChunkMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlobChunkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlobChunkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlobChunkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlobChunkMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlobChunkMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BlobChunk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlobChunkMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BlobChunk edge %s", name)
}

// ManifestMutation represents an operation that mutates the Manifest nodes in the graph.
type ManifestMutation struct {
	config
	op                Op
	typ               string
	id                *int
	media_type        *string
	s3_path           *string
	digest            *string
	clearedFields     map[string]struct{}
	tags              map[int]struct{}
	removedtags       map[int]struct{}
	clearedtags       bool
	repository        *int
	clearedrepository bool
	done              bool
	oldValue          func(context.Context) (*Manifest, error)
	predicates        []predicate.Manifest
}

var _ ent.Mutation = (*ManifestMutation)(nil)

// manifestOption allows management of the mutation configuration using functional options.
type manifestOption func(*ManifestMutation)

// newManifestMutation creates new mutation for the Manifest entity.
func newManifestMutation(c config, op Op, opts ...manifestOption) *ManifestMutation {
	m := &ManifestMutation{
		config:        c,
		op:            op,
		typ:           TypeManifest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManifestID sets the ID field of the mutation.
func withManifestID(id int) manifestOption {
	return func(m *ManifestMutation) {
		var (
			err   error
			once  sync.Once
			value *Manifest
		)
		m.oldValue = func(ctx context.Context) (*Manifest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Manifest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManifest sets the old Manifest of the mutation.
func withManifest(node *Manifest) manifestOption {
	return func(m *ManifestMutation) {
		m.oldValue = func(context.Context) (*Manifest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManifestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManifestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManifestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ManifestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Manifest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMediaType sets the "media_type" field.
func (m *ManifestMutation) SetMediaType(s string) {
	m.media_type = &s
}

// MediaType returns the value of the "media_type" field in the mutation.
func (m *ManifestMutation) MediaType() (r string, exists bool) {
	v := m.media_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaType returns the old "media_type" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldMediaType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaType: %w", err)
	}
	return oldValue.MediaType, nil
}

// ResetMediaType resets all changes to the "media_type" field.
func (m *ManifestMutation) ResetMediaType() {
	m.media_type = nil
}

// SetS3Path sets the "s3_path" field.
func (m *ManifestMutation) SetS3Path(s string) {
	m.s3_path = &s
}

// S3Path returns the value of the "s3_path" field in the mutation.
func (m *ManifestMutation) S3Path() (r string, exists bool) {
	v := m.s3_path
	if v == nil {
		return
	}
	return *v, true
}

// OldS3Path returns the old "s3_path" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldS3Path(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldS3Path is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldS3Path requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldS3Path: %w", err)
	}
	return oldValue.S3Path, nil
}

// ResetS3Path resets all changes to the "s3_path" field.
func (m *ManifestMutation) ResetS3Path() {
	m.s3_path = nil
}

// SetDigest sets the "digest" field.
func (m *ManifestMutation) SetDigest(s string) {
	m.digest = &s
}

// Digest returns the value of the "digest" field in the mutation.
func (m *ManifestMutation) Digest() (r string, exists bool) {
	v := m.digest
	if v == nil {
		return
	}
	return *v, true
}

// OldDigest returns the old "digest" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDigest: %w", err)
	}
	return oldValue.Digest, nil
}

// ResetDigest resets all changes to the "digest" field.
func (m *ManifestMutation) ResetDigest() {
	m.digest = nil
}

// AddTagIDs adds the "tags" edge to the ManifestTagReference entity by ids.
func (m *ManifestMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the ManifestTagReference entity.
func (m *ManifestMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the ManifestTagReference entity was cleared.
func (m *ManifestMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the ManifestTagReference entity by IDs.
func (m *ManifestMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the ManifestTagReference entity.
func (m *ManifestMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ManifestMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ManifestMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// SetRepositoryID sets the "repository" edge to the Repository entity by id.
func (m *ManifestMutation) SetRepositoryID(id int) {
	m.repository = &id
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (m *ManifestMutation) ClearRepository() {
	m.clearedrepository = true
}

// RepositoryCleared reports if the "repository" edge to the Repository entity was cleared.
func (m *ManifestMutation) RepositoryCleared() bool {
	return m.clearedrepository
}

// RepositoryID returns the "repository" edge ID in the mutation.
func (m *ManifestMutation) RepositoryID() (id int, exists bool) {
	if m.repository != nil {
		return *m.repository, true
	}
	return
}

// RepositoryIDs returns the "repository" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepositoryID instead. It exists only for internal usage by the builders.
func (m *ManifestMutation) RepositoryIDs() (ids []int) {
	if id := m.repository; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepository resets all changes to the "repository" edge.
func (m *ManifestMutation) ResetRepository() {
	m.repository = nil
	m.clearedrepository = false
}

// Where appends a list predicates to the ManifestMutation builder.
func (m *ManifestMutation) Where(ps ...predicate.Manifest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ManifestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ManifestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Manifest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ManifestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ManifestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Manifest).
func (m *ManifestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManifestMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.media_type != nil {
		fields = append(fields, manifest.FieldMediaType)
	}
	if m.s3_path != nil {
		fields = append(fields, manifest.FieldS3Path)
	}
	if m.digest != nil {
		fields = append(fields, manifest.FieldDigest)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManifestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manifest.FieldMediaType:
		return m.MediaType()
	case manifest.FieldS3Path:
		return m.S3Path()
	case manifest.FieldDigest:
		return m.Digest()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManifestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manifest.FieldMediaType:
		return m.OldMediaType(ctx)
	case manifest.FieldS3Path:
		return m.OldS3Path(ctx)
	case manifest.FieldDigest:
		return m.OldDigest(ctx)
	}
	return nil, fmt.Errorf("unknown Manifest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manifest.FieldMediaType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaType(v)
		return nil
	case manifest.FieldS3Path:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetS3Path(v)
		return nil
	case manifest.FieldDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDigest(v)
		return nil
	}
	return fmt.Errorf("unknown Manifest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManifestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManifestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Manifest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManifestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManifestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManifestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Manifest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManifestMutation) ResetField(name string) error {
	switch name {
	case manifest.FieldMediaType:
		m.ResetMediaType()
		return nil
	case manifest.FieldS3Path:
		m.ResetS3Path()
		return nil
	case manifest.FieldDigest:
		m.ResetDigest()
		return nil
	}
	return fmt.Errorf("unknown Manifest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManifestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tags != nil {
		edges = append(edges, manifest.EdgeTags)
	}
	if m.repository != nil {
		edges = append(edges, manifest.EdgeRepository)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManifestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manifest.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeRepository:
		if id := m.repository; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManifestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtags != nil {
		edges = append(edges, manifest.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManifestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case manifest.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManifestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtags {
		edges = append(edges, manifest.EdgeTags)
	}
	if m.clearedrepository {
		edges = append(edges, manifest.EdgeRepository)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManifestMutation) EdgeCleared(name string) bool {
	switch name {
	case manifest.EdgeTags:
		return m.clearedtags
	case manifest.EdgeRepository:
		return m.clearedrepository
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManifestMutation) ClearEdge(name string) error {
	switch name {
	case manifest.EdgeRepository:
		m.ClearRepository()
		return nil
	}
	return fmt.Errorf("unknown Manifest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManifestMutation) ResetEdge(name string) error {
	switch name {
	case manifest.EdgeTags:
		m.ResetTags()
		return nil
	case manifest.EdgeRepository:
		m.ResetRepository()
		return nil
	}
	return fmt.Errorf("unknown Manifest edge %s", name)
}

// ManifestTagReferenceMutation represents an operation that mutates the ManifestTagReference nodes in the graph.
type ManifestTagReferenceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	tag              *string
	clearedFields    map[string]struct{}
	manifests        *int
	clearedmanifests bool
	done             bool
	oldValue         func(context.Context) (*ManifestTagReference, error)
	predicates       []predicate.ManifestTagReference
}

var _ ent.Mutation = (*ManifestTagReferenceMutation)(nil)

// manifesttagreferenceOption allows management of the mutation configuration using functional options.
type manifesttagreferenceOption func(*ManifestTagReferenceMutation)

// newManifestTagReferenceMutation creates new mutation for the ManifestTagReference entity.
func newManifestTagReferenceMutation(c config, op Op, opts ...manifesttagreferenceOption) *ManifestTagReferenceMutation {
	m := &ManifestTagReferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeManifestTagReference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManifestTagReferenceID sets the ID field of the mutation.
func withManifestTagReferenceID(id int) manifesttagreferenceOption {
	return func(m *ManifestTagReferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *ManifestTagReference
		)
		m.oldValue = func(ctx context.Context) (*ManifestTagReference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ManifestTagReference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManifestTagReference sets the old ManifestTagReference of the mutation.
func withManifestTagReference(node *ManifestTagReference) manifesttagreferenceOption {
	return func(m *ManifestTagReferenceMutation) {
		m.oldValue = func(context.Context) (*ManifestTagReference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManifestTagReferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManifestTagReferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManifestTagReferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ManifestTagReferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ManifestTagReference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTag sets the "tag" field.
func (m *ManifestTagReferenceMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ManifestTagReferenceMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ManifestTagReference entity.
// If the ManifestTagReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestTagReferenceMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ManifestTagReferenceMutation) ResetTag() {
	m.tag = nil
}

// SetManifestsID sets the "manifests" edge to the Manifest entity by id.
func (m *ManifestTagReferenceMutation) SetManifestsID(id int) {
	m.manifests = &id
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (m *ManifestTagReferenceMutation) ClearManifests() {
	m.clearedmanifests = true
}

// ManifestsCleared reports if the "manifests" edge to the Manifest entity was cleared.
func (m *ManifestTagReferenceMutation) ManifestsCleared() bool {
	return m.clearedmanifests
}

// ManifestsID returns the "manifests" edge ID in the mutation.
func (m *ManifestTagReferenceMutation) ManifestsID() (id int, exists bool) {
	if m.manifests != nil {
		return *m.manifests, true
	}
	return
}

// ManifestsIDs returns the "manifests" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManifestsID instead. It exists only for internal usage by the builders.
func (m *ManifestTagReferenceMutation) ManifestsIDs() (ids []int) {
	if id := m.manifests; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManifests resets all changes to the "manifests" edge.
func (m *ManifestTagReferenceMutation) ResetManifests() {
	m.manifests = nil
	m.clearedmanifests = false
}

// Where appends a list predicates to the ManifestTagReferenceMutation builder.
func (m *ManifestTagReferenceMutation) Where(ps ...predicate.ManifestTagReference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ManifestTagReferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ManifestTagReferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ManifestTagReference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ManifestTagReferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ManifestTagReferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ManifestTagReference).
func (m *ManifestTagReferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManifestTagReferenceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.tag != nil {
		fields = append(fields, manifesttagreference.FieldTag)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManifestTagReferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manifesttagreference.FieldTag:
		return m.Tag()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManifestTagReferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manifesttagreference.FieldTag:
		return m.OldTag(ctx)
	}
	return nil, fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestTagReferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manifesttagreference.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManifestTagReferenceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManifestTagReferenceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestTagReferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ManifestTagReference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManifestTagReferenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManifestTagReferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManifestTagReferenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ManifestTagReference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManifestTagReferenceMutation) ResetField(name string) error {
	switch name {
	case manifesttagreference.FieldTag:
		m.ResetTag()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManifestTagReferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.manifests != nil {
		edges = append(edges, manifesttagreference.EdgeManifests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManifestTagReferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manifesttagreference.EdgeManifests:
		if id := m.manifests; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManifestTagReferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManifestTagReferenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManifestTagReferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmanifests {
		edges = append(edges, manifesttagreference.EdgeManifests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManifestTagReferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case manifesttagreference.EdgeManifests:
		return m.clearedmanifests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManifestTagReferenceMutation) ClearEdge(name string) error {
	switch name {
	case manifesttagreference.EdgeManifests:
		m.ClearManifests()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManifestTagReferenceMutation) ResetEdge(name string) error {
	switch name {
	case manifesttagreference.EdgeManifests:
		m.ResetManifests()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference edge %s", name)
}

// RepositoryMutation represents an operation that mutates the Repository nodes in the graph.
type RepositoryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	manifests        map[int]struct{}
	removedmanifests map[int]struct{}
	clearedmanifests bool
	done             bool
	oldValue         func(context.Context) (*Repository, error)
	predicates       []predicate.Repository
}

var _ ent.Mutation = (*RepositoryMutation)(nil)

// repositoryOption allows management of the mutation configuration using functional options.
type repositoryOption func(*RepositoryMutation)

// newRepositoryMutation creates new mutation for the Repository entity.
func newRepositoryMutation(c config, op Op, opts ...repositoryOption) *RepositoryMutation {
	m := &RepositoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRepository,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepositoryID sets the ID field of the mutation.
func withRepositoryID(id int) repositoryOption {
	return func(m *RepositoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Repository
		)
		m.oldValue = func(ctx context.Context) (*Repository, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repository.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepository sets the old Repository of the mutation.
func withRepository(node *Repository) repositoryOption {
	return func(m *RepositoryMutation) {
		m.oldValue = func(context.Context) (*Repository, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepositoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepositoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepositoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepositoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Repository.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RepositoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepositoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepositoryMutation) ResetName() {
	m.name = nil
}

// AddManifestIDs adds the "manifests" edge to the Manifest entity by ids.
func (m *RepositoryMutation) AddManifestIDs(ids ...int) {
	if m.manifests == nil {
		m.manifests = make(map[int]struct{})
	}
	for i := range ids {
		m.manifests[ids[i]] = struct{}{}
	}
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (m *RepositoryMutation) ClearManifests() {
	m.clearedmanifests = true
}

// ManifestsCleared reports if the "manifests" edge to the Manifest entity was cleared.
func (m *RepositoryMutation) ManifestsCleared() bool {
	return m.clearedmanifests
}

// RemoveManifestIDs removes the "manifests" edge to the Manifest entity by IDs.
func (m *RepositoryMutation) RemoveManifestIDs(ids ...int) {
	if m.removedmanifests == nil {
		m.removedmanifests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.manifests, ids[i])
		m.removedmanifests[ids[i]] = struct{}{}
	}
}

// RemovedManifests returns the removed IDs of the "manifests" edge to the Manifest entity.
func (m *RepositoryMutation) RemovedManifestsIDs() (ids []int) {
	for id := range m.removedmanifests {
		ids = append(ids, id)
	}
	return
}

// ManifestsIDs returns the "manifests" edge IDs in the mutation.
func (m *RepositoryMutation) ManifestsIDs() (ids []int) {
	for id := range m.manifests {
		ids = append(ids, id)
	}
	return
}

// ResetManifests resets all changes to the "manifests" edge.
func (m *RepositoryMutation) ResetManifests() {
	m.manifests = nil
	m.clearedmanifests = false
	m.removedmanifests = nil
}

// Where appends a list predicates to the RepositoryMutation builder.
func (m *RepositoryMutation) Where(ps ...predicate.Repository) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RepositoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RepositoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Repository, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RepositoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RepositoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Repository).
func (m *RepositoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepositoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, repository.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepositoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repository.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepositoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repository.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Repository field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repository.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepositoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepositoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepositoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepositoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepositoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Repository nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepositoryMutation) ResetField(name string) error {
	switch name {
	case repository.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepositoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.manifests != nil {
		edges = append(edges, repository.EdgeManifests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepositoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeManifests:
		ids := make([]ent.Value, 0, len(m.manifests))
		for id := range m.manifests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepositoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmanifests != nil {
		edges = append(edges, repository.EdgeManifests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepositoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeManifests:
		ids := make([]ent.Value, 0, len(m.removedmanifests))
		for id := range m.removedmanifests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepositoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmanifests {
		edges = append(edges, repository.EdgeManifests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepositoryMutation) EdgeCleared(name string) bool {
	switch name {
	case repository.EdgeManifests:
		return m.clearedmanifests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepositoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepositoryMutation) ResetEdge(name string) error {
	switch name {
	case repository.EdgeManifests:
		m.ResetManifests()
		return nil
	}
	return fmt.Errorf("unknown Repository edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	given_name    *string
	family_name   *string
	email         *string
	sub           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGivenName sets the "given_name" field.
func (m *UserMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *UserMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *UserMutation) ResetGivenName() {
	m.given_name = nil
}

// SetFamilyName sets the "family_name" field.
func (m *UserMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *UserMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *UserMutation) ResetFamilyName() {
	m.family_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetSub sets the "sub" field.
func (m *UserMutation) SetSub(s string) {
	m.sub = &s
}

// Sub returns the value of the "sub" field in the mutation.
func (m *UserMutation) Sub() (r string, exists bool) {
	v := m.sub
	if v == nil {
		return
	}
	return *v, true
}

// OldSub returns the old "sub" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSub: %w", err)
	}
	return oldValue.Sub, nil
}

// ResetSub resets all changes to the "sub" field.
func (m *UserMutation) ResetSub() {
	m.sub = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.given_name != nil {
		fields = append(fields, user.FieldGivenName)
	}
	if m.family_name != nil {
		fields = append(fields, user.FieldFamilyName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.sub != nil {
		fields = append(fields, user.FieldSub)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGivenName:
		return m.GivenName()
	case user.FieldFamilyName:
		return m.FamilyName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldSub:
		return m.Sub()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldGivenName:
		return m.OldGivenName(ctx)
	case user.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldSub:
		return m.OldSub(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case user.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSub(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldGivenName:
		m.ResetGivenName()
		return nil
	case user.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldSub:
		m.ResetSub()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
