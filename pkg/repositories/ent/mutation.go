// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationmembership"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/registry"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlobChunk              = "BlobChunk"
	TypeManifest               = "Manifest"
	TypeManifestLayer          = "ManifestLayer"
	TypeManifestTagReference   = "ManifestTagReference"
	TypeOrganization           = "Organization"
	TypeOrganizationMembership = "OrganizationMembership"
	TypeRegistry               = "Registry"
	TypeRepository             = "Repository"
	TypeUser                   = "User"
)

// BlobChunkMutation represents an operation that mutates the BlobChunk nodes in the graph.
type BlobChunkMutation struct {
	config
	op             Op
	typ            string
	id             *int
	upload_id      *string
	session_id     *string
	range_from     *uint64
	addrange_from  *int64
	range_to       *uint64
	addrange_to    *int64
	part_number    *uint64
	addpart_number *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*BlobChunk, error)
	predicates     []predicate.BlobChunk
}

var _ ent.Mutation = (*BlobChunkMutation)(nil)

// blobchunkOption allows management of the mutation configuration using functional options.
type blobchunkOption func(*BlobChunkMutation)

// newBlobChunkMutation creates new mutation for the BlobChunk entity.
func newBlobChunkMutation(c config, op Op, opts ...blobchunkOption) *BlobChunkMutation {
	m := &BlobChunkMutation{
		config:        c,
		op:            op,
		typ:           TypeBlobChunk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlobChunkID sets the ID field of the mutation.
func withBlobChunkID(id int) blobchunkOption {
	return func(m *BlobChunkMutation) {
		var (
			err   error
			once  sync.Once
			value *BlobChunk
		)
		m.oldValue = func(ctx context.Context) (*BlobChunk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BlobChunk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlobChunk sets the old BlobChunk of the mutation.
func withBlobChunk(node *BlobChunk) blobchunkOption {
	return func(m *BlobChunkMutation) {
		m.oldValue = func(context.Context) (*BlobChunk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlobChunkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlobChunkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlobChunkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlobChunkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BlobChunk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUploadID sets the "upload_id" field.
func (m *BlobChunkMutation) SetUploadID(s string) {
	m.upload_id = &s
}

// UploadID returns the value of the "upload_id" field in the mutation.
func (m *BlobChunkMutation) UploadID() (r string, exists bool) {
	v := m.upload_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadID returns the old "upload_id" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldUploadID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadID: %w", err)
	}
	return oldValue.UploadID, nil
}

// ResetUploadID resets all changes to the "upload_id" field.
func (m *BlobChunkMutation) ResetUploadID() {
	m.upload_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *BlobChunkMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *BlobChunkMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *BlobChunkMutation) ResetSessionID() {
	m.session_id = nil
}

// SetRangeFrom sets the "range_from" field.
func (m *BlobChunkMutation) SetRangeFrom(u uint64) {
	m.range_from = &u
	m.addrange_from = nil
}

// RangeFrom returns the value of the "range_from" field in the mutation.
func (m *BlobChunkMutation) RangeFrom() (r uint64, exists bool) {
	v := m.range_from
	if v == nil {
		return
	}
	return *v, true
}

// OldRangeFrom returns the old "range_from" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldRangeFrom(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRangeFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRangeFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRangeFrom: %w", err)
	}
	return oldValue.RangeFrom, nil
}

// AddRangeFrom adds u to the "range_from" field.
func (m *BlobChunkMutation) AddRangeFrom(u int64) {
	if m.addrange_from != nil {
		*m.addrange_from += u
	} else {
		m.addrange_from = &u
	}
}

// AddedRangeFrom returns the value that was added to the "range_from" field in this mutation.
func (m *BlobChunkMutation) AddedRangeFrom() (r int64, exists bool) {
	v := m.addrange_from
	if v == nil {
		return
	}
	return *v, true
}

// ResetRangeFrom resets all changes to the "range_from" field.
func (m *BlobChunkMutation) ResetRangeFrom() {
	m.range_from = nil
	m.addrange_from = nil
}

// SetRangeTo sets the "range_to" field.
func (m *BlobChunkMutation) SetRangeTo(u uint64) {
	m.range_to = &u
	m.addrange_to = nil
}

// RangeTo returns the value of the "range_to" field in the mutation.
func (m *BlobChunkMutation) RangeTo() (r uint64, exists bool) {
	v := m.range_to
	if v == nil {
		return
	}
	return *v, true
}

// OldRangeTo returns the old "range_to" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldRangeTo(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRangeTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRangeTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRangeTo: %w", err)
	}
	return oldValue.RangeTo, nil
}

// AddRangeTo adds u to the "range_to" field.
func (m *BlobChunkMutation) AddRangeTo(u int64) {
	if m.addrange_to != nil {
		*m.addrange_to += u
	} else {
		m.addrange_to = &u
	}
}

// AddedRangeTo returns the value that was added to the "range_to" field in this mutation.
func (m *BlobChunkMutation) AddedRangeTo() (r int64, exists bool) {
	v := m.addrange_to
	if v == nil {
		return
	}
	return *v, true
}

// ResetRangeTo resets all changes to the "range_to" field.
func (m *BlobChunkMutation) ResetRangeTo() {
	m.range_to = nil
	m.addrange_to = nil
}

// SetPartNumber sets the "part_number" field.
func (m *BlobChunkMutation) SetPartNumber(u uint64) {
	m.part_number = &u
	m.addpart_number = nil
}

// PartNumber returns the value of the "part_number" field in the mutation.
func (m *BlobChunkMutation) PartNumber() (r uint64, exists bool) {
	v := m.part_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPartNumber returns the old "part_number" field's value of the BlobChunk entity.
// If the BlobChunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlobChunkMutation) OldPartNumber(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartNumber: %w", err)
	}
	return oldValue.PartNumber, nil
}

// AddPartNumber adds u to the "part_number" field.
func (m *BlobChunkMutation) AddPartNumber(u int64) {
	if m.addpart_number != nil {
		*m.addpart_number += u
	} else {
		m.addpart_number = &u
	}
}

// AddedPartNumber returns the value that was added to the "part_number" field in this mutation.
func (m *BlobChunkMutation) AddedPartNumber() (r int64, exists bool) {
	v := m.addpart_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetPartNumber resets all changes to the "part_number" field.
func (m *BlobChunkMutation) ResetPartNumber() {
	m.part_number = nil
	m.addpart_number = nil
}

// Where appends a list predicates to the BlobChunkMutation builder.
func (m *BlobChunkMutation) Where(ps ...predicate.BlobChunk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlobChunkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlobChunkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BlobChunk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlobChunkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlobChunkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BlobChunk).
func (m *BlobChunkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlobChunkMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.upload_id != nil {
		fields = append(fields, blobchunk.FieldUploadID)
	}
	if m.session_id != nil {
		fields = append(fields, blobchunk.FieldSessionID)
	}
	if m.range_from != nil {
		fields = append(fields, blobchunk.FieldRangeFrom)
	}
	if m.range_to != nil {
		fields = append(fields, blobchunk.FieldRangeTo)
	}
	if m.part_number != nil {
		fields = append(fields, blobchunk.FieldPartNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlobChunkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blobchunk.FieldUploadID:
		return m.UploadID()
	case blobchunk.FieldSessionID:
		return m.SessionID()
	case blobchunk.FieldRangeFrom:
		return m.RangeFrom()
	case blobchunk.FieldRangeTo:
		return m.RangeTo()
	case blobchunk.FieldPartNumber:
		return m.PartNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlobChunkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blobchunk.FieldUploadID:
		return m.OldUploadID(ctx)
	case blobchunk.FieldSessionID:
		return m.OldSessionID(ctx)
	case blobchunk.FieldRangeFrom:
		return m.OldRangeFrom(ctx)
	case blobchunk.FieldRangeTo:
		return m.OldRangeTo(ctx)
	case blobchunk.FieldPartNumber:
		return m.OldPartNumber(ctx)
	}
	return nil, fmt.Errorf("unknown BlobChunk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobChunkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blobchunk.FieldUploadID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadID(v)
		return nil
	case blobchunk.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case blobchunk.FieldRangeFrom:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRangeFrom(v)
		return nil
	case blobchunk.FieldRangeTo:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRangeTo(v)
		return nil
	case blobchunk.FieldPartNumber:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartNumber(v)
		return nil
	}
	return fmt.Errorf("unknown BlobChunk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlobChunkMutation) AddedFields() []string {
	var fields []string
	if m.addrange_from != nil {
		fields = append(fields, blobchunk.FieldRangeFrom)
	}
	if m.addrange_to != nil {
		fields = append(fields, blobchunk.FieldRangeTo)
	}
	if m.addpart_number != nil {
		fields = append(fields, blobchunk.FieldPartNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlobChunkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case blobchunk.FieldRangeFrom:
		return m.AddedRangeFrom()
	case blobchunk.FieldRangeTo:
		return m.AddedRangeTo()
	case blobchunk.FieldPartNumber:
		return m.AddedPartNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlobChunkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case blobchunk.FieldRangeFrom:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRangeFrom(v)
		return nil
	case blobchunk.FieldRangeTo:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRangeTo(v)
		return nil
	case blobchunk.FieldPartNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartNumber(v)
		return nil
	}
	return fmt.Errorf("unknown BlobChunk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlobChunkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlobChunkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlobChunkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BlobChunk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlobChunkMutation) ResetField(name string) error {
	switch name {
	case blobchunk.FieldUploadID:
		m.ResetUploadID()
		return nil
	case blobchunk.FieldSessionID:
		m.ResetSessionID()
		return nil
	case blobchunk.FieldRangeFrom:
		m.ResetRangeFrom()
		return nil
	case blobchunk.FieldRangeTo:
		m.ResetRangeTo()
		return nil
	case blobchunk.FieldPartNumber:
		m.ResetPartNumber()
		return nil
	}
	return fmt.Errorf("unknown BlobChunk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlobChunkMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlobChunkMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlobChunkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlobChunkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlobChunkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlobChunkMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlobChunkMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BlobChunk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlobChunkMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BlobChunk edge %s", name)
}

// ManifestMutation represents an operation that mutates the Manifest nodes in the graph.
type ManifestMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	media_type             *string
	artifact_type          *string
	s3_path                *string
	digest                 *string
	clearedFields          map[string]struct{}
	tags                   map[int]struct{}
	removedtags            map[int]struct{}
	clearedtags            bool
	repository             *int
	clearedrepository      bool
	subject                map[int]struct{}
	removedsubject         map[int]struct{}
	clearedsubject         bool
	referer                map[int]struct{}
	removedreferer         map[int]struct{}
	clearedreferer         bool
	manifest_layers        map[int]struct{}
	removedmanifest_layers map[int]struct{}
	clearedmanifest_layers bool
	done                   bool
	oldValue               func(context.Context) (*Manifest, error)
	predicates             []predicate.Manifest
}

var _ ent.Mutation = (*ManifestMutation)(nil)

// manifestOption allows management of the mutation configuration using functional options.
type manifestOption func(*ManifestMutation)

// newManifestMutation creates new mutation for the Manifest entity.
func newManifestMutation(c config, op Op, opts ...manifestOption) *ManifestMutation {
	m := &ManifestMutation{
		config:        c,
		op:            op,
		typ:           TypeManifest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManifestID sets the ID field of the mutation.
func withManifestID(id int) manifestOption {
	return func(m *ManifestMutation) {
		var (
			err   error
			once  sync.Once
			value *Manifest
		)
		m.oldValue = func(ctx context.Context) (*Manifest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Manifest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManifest sets the old Manifest of the mutation.
func withManifest(node *Manifest) manifestOption {
	return func(m *ManifestMutation) {
		m.oldValue = func(context.Context) (*Manifest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManifestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManifestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManifestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ManifestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Manifest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMediaType sets the "media_type" field.
func (m *ManifestMutation) SetMediaType(s string) {
	m.media_type = &s
}

// MediaType returns the value of the "media_type" field in the mutation.
func (m *ManifestMutation) MediaType() (r string, exists bool) {
	v := m.media_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaType returns the old "media_type" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldMediaType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaType: %w", err)
	}
	return oldValue.MediaType, nil
}

// ResetMediaType resets all changes to the "media_type" field.
func (m *ManifestMutation) ResetMediaType() {
	m.media_type = nil
}

// SetArtifactType sets the "artifact_type" field.
func (m *ManifestMutation) SetArtifactType(s string) {
	m.artifact_type = &s
}

// ArtifactType returns the value of the "artifact_type" field in the mutation.
func (m *ManifestMutation) ArtifactType() (r string, exists bool) {
	v := m.artifact_type
	if v == nil {
		return
	}
	return *v, true
}

// OldArtifactType returns the old "artifact_type" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldArtifactType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArtifactType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArtifactType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArtifactType: %w", err)
	}
	return oldValue.ArtifactType, nil
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (m *ManifestMutation) ClearArtifactType() {
	m.artifact_type = nil
	m.clearedFields[manifest.FieldArtifactType] = struct{}{}
}

// ArtifactTypeCleared returns if the "artifact_type" field was cleared in this mutation.
func (m *ManifestMutation) ArtifactTypeCleared() bool {
	_, ok := m.clearedFields[manifest.FieldArtifactType]
	return ok
}

// ResetArtifactType resets all changes to the "artifact_type" field.
func (m *ManifestMutation) ResetArtifactType() {
	m.artifact_type = nil
	delete(m.clearedFields, manifest.FieldArtifactType)
}

// SetS3Path sets the "s3_path" field.
func (m *ManifestMutation) SetS3Path(s string) {
	m.s3_path = &s
}

// S3Path returns the value of the "s3_path" field in the mutation.
func (m *ManifestMutation) S3Path() (r string, exists bool) {
	v := m.s3_path
	if v == nil {
		return
	}
	return *v, true
}

// OldS3Path returns the old "s3_path" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldS3Path(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldS3Path is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldS3Path requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldS3Path: %w", err)
	}
	return oldValue.S3Path, nil
}

// ResetS3Path resets all changes to the "s3_path" field.
func (m *ManifestMutation) ResetS3Path() {
	m.s3_path = nil
}

// SetDigest sets the "digest" field.
func (m *ManifestMutation) SetDigest(s string) {
	m.digest = &s
}

// Digest returns the value of the "digest" field in the mutation.
func (m *ManifestMutation) Digest() (r string, exists bool) {
	v := m.digest
	if v == nil {
		return
	}
	return *v, true
}

// OldDigest returns the old "digest" field's value of the Manifest entity.
// If the Manifest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestMutation) OldDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDigest: %w", err)
	}
	return oldValue.Digest, nil
}

// ResetDigest resets all changes to the "digest" field.
func (m *ManifestMutation) ResetDigest() {
	m.digest = nil
}

// AddTagIDs adds the "tags" edge to the ManifestTagReference entity by ids.
func (m *ManifestMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the ManifestTagReference entity.
func (m *ManifestMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the ManifestTagReference entity was cleared.
func (m *ManifestMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the ManifestTagReference entity by IDs.
func (m *ManifestMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the ManifestTagReference entity.
func (m *ManifestMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ManifestMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ManifestMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// SetRepositoryID sets the "repository" edge to the Repository entity by id.
func (m *ManifestMutation) SetRepositoryID(id int) {
	m.repository = &id
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (m *ManifestMutation) ClearRepository() {
	m.clearedrepository = true
}

// RepositoryCleared reports if the "repository" edge to the Repository entity was cleared.
func (m *ManifestMutation) RepositoryCleared() bool {
	return m.clearedrepository
}

// RepositoryID returns the "repository" edge ID in the mutation.
func (m *ManifestMutation) RepositoryID() (id int, exists bool) {
	if m.repository != nil {
		return *m.repository, true
	}
	return
}

// RepositoryIDs returns the "repository" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RepositoryID instead. It exists only for internal usage by the builders.
func (m *ManifestMutation) RepositoryIDs() (ids []int) {
	if id := m.repository; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRepository resets all changes to the "repository" edge.
func (m *ManifestMutation) ResetRepository() {
	m.repository = nil
	m.clearedrepository = false
}

// AddSubjectIDs adds the "subject" edge to the Manifest entity by ids.
func (m *ManifestMutation) AddSubjectIDs(ids ...int) {
	if m.subject == nil {
		m.subject = make(map[int]struct{})
	}
	for i := range ids {
		m.subject[ids[i]] = struct{}{}
	}
}

// ClearSubject clears the "subject" edge to the Manifest entity.
func (m *ManifestMutation) ClearSubject() {
	m.clearedsubject = true
}

// SubjectCleared reports if the "subject" edge to the Manifest entity was cleared.
func (m *ManifestMutation) SubjectCleared() bool {
	return m.clearedsubject
}

// RemoveSubjectIDs removes the "subject" edge to the Manifest entity by IDs.
func (m *ManifestMutation) RemoveSubjectIDs(ids ...int) {
	if m.removedsubject == nil {
		m.removedsubject = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subject, ids[i])
		m.removedsubject[ids[i]] = struct{}{}
	}
}

// RemovedSubject returns the removed IDs of the "subject" edge to the Manifest entity.
func (m *ManifestMutation) RemovedSubjectIDs() (ids []int) {
	for id := range m.removedsubject {
		ids = append(ids, id)
	}
	return
}

// SubjectIDs returns the "subject" edge IDs in the mutation.
func (m *ManifestMutation) SubjectIDs() (ids []int) {
	for id := range m.subject {
		ids = append(ids, id)
	}
	return
}

// ResetSubject resets all changes to the "subject" edge.
func (m *ManifestMutation) ResetSubject() {
	m.subject = nil
	m.clearedsubject = false
	m.removedsubject = nil
}

// AddRefererIDs adds the "referer" edge to the Manifest entity by ids.
func (m *ManifestMutation) AddRefererIDs(ids ...int) {
	if m.referer == nil {
		m.referer = make(map[int]struct{})
	}
	for i := range ids {
		m.referer[ids[i]] = struct{}{}
	}
}

// ClearReferer clears the "referer" edge to the Manifest entity.
func (m *ManifestMutation) ClearReferer() {
	m.clearedreferer = true
}

// RefererCleared reports if the "referer" edge to the Manifest entity was cleared.
func (m *ManifestMutation) RefererCleared() bool {
	return m.clearedreferer
}

// RemoveRefererIDs removes the "referer" edge to the Manifest entity by IDs.
func (m *ManifestMutation) RemoveRefererIDs(ids ...int) {
	if m.removedreferer == nil {
		m.removedreferer = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.referer, ids[i])
		m.removedreferer[ids[i]] = struct{}{}
	}
}

// RemovedReferer returns the removed IDs of the "referer" edge to the Manifest entity.
func (m *ManifestMutation) RemovedRefererIDs() (ids []int) {
	for id := range m.removedreferer {
		ids = append(ids, id)
	}
	return
}

// RefererIDs returns the "referer" edge IDs in the mutation.
func (m *ManifestMutation) RefererIDs() (ids []int) {
	for id := range m.referer {
		ids = append(ids, id)
	}
	return
}

// ResetReferer resets all changes to the "referer" edge.
func (m *ManifestMutation) ResetReferer() {
	m.referer = nil
	m.clearedreferer = false
	m.removedreferer = nil
}

// AddManifestLayerIDs adds the "manifest_layers" edge to the ManifestLayer entity by ids.
func (m *ManifestMutation) AddManifestLayerIDs(ids ...int) {
	if m.manifest_layers == nil {
		m.manifest_layers = make(map[int]struct{})
	}
	for i := range ids {
		m.manifest_layers[ids[i]] = struct{}{}
	}
}

// ClearManifestLayers clears the "manifest_layers" edge to the ManifestLayer entity.
func (m *ManifestMutation) ClearManifestLayers() {
	m.clearedmanifest_layers = true
}

// ManifestLayersCleared reports if the "manifest_layers" edge to the ManifestLayer entity was cleared.
func (m *ManifestMutation) ManifestLayersCleared() bool {
	return m.clearedmanifest_layers
}

// RemoveManifestLayerIDs removes the "manifest_layers" edge to the ManifestLayer entity by IDs.
func (m *ManifestMutation) RemoveManifestLayerIDs(ids ...int) {
	if m.removedmanifest_layers == nil {
		m.removedmanifest_layers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.manifest_layers, ids[i])
		m.removedmanifest_layers[ids[i]] = struct{}{}
	}
}

// RemovedManifestLayers returns the removed IDs of the "manifest_layers" edge to the ManifestLayer entity.
func (m *ManifestMutation) RemovedManifestLayersIDs() (ids []int) {
	for id := range m.removedmanifest_layers {
		ids = append(ids, id)
	}
	return
}

// ManifestLayersIDs returns the "manifest_layers" edge IDs in the mutation.
func (m *ManifestMutation) ManifestLayersIDs() (ids []int) {
	for id := range m.manifest_layers {
		ids = append(ids, id)
	}
	return
}

// ResetManifestLayers resets all changes to the "manifest_layers" edge.
func (m *ManifestMutation) ResetManifestLayers() {
	m.manifest_layers = nil
	m.clearedmanifest_layers = false
	m.removedmanifest_layers = nil
}

// Where appends a list predicates to the ManifestMutation builder.
func (m *ManifestMutation) Where(ps ...predicate.Manifest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ManifestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ManifestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Manifest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ManifestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ManifestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Manifest).
func (m *ManifestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManifestMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.media_type != nil {
		fields = append(fields, manifest.FieldMediaType)
	}
	if m.artifact_type != nil {
		fields = append(fields, manifest.FieldArtifactType)
	}
	if m.s3_path != nil {
		fields = append(fields, manifest.FieldS3Path)
	}
	if m.digest != nil {
		fields = append(fields, manifest.FieldDigest)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManifestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manifest.FieldMediaType:
		return m.MediaType()
	case manifest.FieldArtifactType:
		return m.ArtifactType()
	case manifest.FieldS3Path:
		return m.S3Path()
	case manifest.FieldDigest:
		return m.Digest()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManifestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manifest.FieldMediaType:
		return m.OldMediaType(ctx)
	case manifest.FieldArtifactType:
		return m.OldArtifactType(ctx)
	case manifest.FieldS3Path:
		return m.OldS3Path(ctx)
	case manifest.FieldDigest:
		return m.OldDigest(ctx)
	}
	return nil, fmt.Errorf("unknown Manifest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manifest.FieldMediaType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaType(v)
		return nil
	case manifest.FieldArtifactType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArtifactType(v)
		return nil
	case manifest.FieldS3Path:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetS3Path(v)
		return nil
	case manifest.FieldDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDigest(v)
		return nil
	}
	return fmt.Errorf("unknown Manifest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManifestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManifestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Manifest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManifestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(manifest.FieldArtifactType) {
		fields = append(fields, manifest.FieldArtifactType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManifestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManifestMutation) ClearField(name string) error {
	switch name {
	case manifest.FieldArtifactType:
		m.ClearArtifactType()
		return nil
	}
	return fmt.Errorf("unknown Manifest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManifestMutation) ResetField(name string) error {
	switch name {
	case manifest.FieldMediaType:
		m.ResetMediaType()
		return nil
	case manifest.FieldArtifactType:
		m.ResetArtifactType()
		return nil
	case manifest.FieldS3Path:
		m.ResetS3Path()
		return nil
	case manifest.FieldDigest:
		m.ResetDigest()
		return nil
	}
	return fmt.Errorf("unknown Manifest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManifestMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.tags != nil {
		edges = append(edges, manifest.EdgeTags)
	}
	if m.repository != nil {
		edges = append(edges, manifest.EdgeRepository)
	}
	if m.subject != nil {
		edges = append(edges, manifest.EdgeSubject)
	}
	if m.referer != nil {
		edges = append(edges, manifest.EdgeReferer)
	}
	if m.manifest_layers != nil {
		edges = append(edges, manifest.EdgeManifestLayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManifestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manifest.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeRepository:
		if id := m.repository; id != nil {
			return []ent.Value{*id}
		}
	case manifest.EdgeSubject:
		ids := make([]ent.Value, 0, len(m.subject))
		for id := range m.subject {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeReferer:
		ids := make([]ent.Value, 0, len(m.referer))
		for id := range m.referer {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeManifestLayers:
		ids := make([]ent.Value, 0, len(m.manifest_layers))
		for id := range m.manifest_layers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManifestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedtags != nil {
		edges = append(edges, manifest.EdgeTags)
	}
	if m.removedsubject != nil {
		edges = append(edges, manifest.EdgeSubject)
	}
	if m.removedreferer != nil {
		edges = append(edges, manifest.EdgeReferer)
	}
	if m.removedmanifest_layers != nil {
		edges = append(edges, manifest.EdgeManifestLayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManifestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case manifest.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeSubject:
		ids := make([]ent.Value, 0, len(m.removedsubject))
		for id := range m.removedsubject {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeReferer:
		ids := make([]ent.Value, 0, len(m.removedreferer))
		for id := range m.removedreferer {
			ids = append(ids, id)
		}
		return ids
	case manifest.EdgeManifestLayers:
		ids := make([]ent.Value, 0, len(m.removedmanifest_layers))
		for id := range m.removedmanifest_layers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManifestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedtags {
		edges = append(edges, manifest.EdgeTags)
	}
	if m.clearedrepository {
		edges = append(edges, manifest.EdgeRepository)
	}
	if m.clearedsubject {
		edges = append(edges, manifest.EdgeSubject)
	}
	if m.clearedreferer {
		edges = append(edges, manifest.EdgeReferer)
	}
	if m.clearedmanifest_layers {
		edges = append(edges, manifest.EdgeManifestLayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManifestMutation) EdgeCleared(name string) bool {
	switch name {
	case manifest.EdgeTags:
		return m.clearedtags
	case manifest.EdgeRepository:
		return m.clearedrepository
	case manifest.EdgeSubject:
		return m.clearedsubject
	case manifest.EdgeReferer:
		return m.clearedreferer
	case manifest.EdgeManifestLayers:
		return m.clearedmanifest_layers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManifestMutation) ClearEdge(name string) error {
	switch name {
	case manifest.EdgeRepository:
		m.ClearRepository()
		return nil
	}
	return fmt.Errorf("unknown Manifest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManifestMutation) ResetEdge(name string) error {
	switch name {
	case manifest.EdgeTags:
		m.ResetTags()
		return nil
	case manifest.EdgeRepository:
		m.ResetRepository()
		return nil
	case manifest.EdgeSubject:
		m.ResetSubject()
		return nil
	case manifest.EdgeReferer:
		m.ResetReferer()
		return nil
	case manifest.EdgeManifestLayers:
		m.ResetManifestLayers()
		return nil
	}
	return fmt.Errorf("unknown Manifest edge %s", name)
}

// ManifestLayerMutation represents an operation that mutates the ManifestLayer nodes in the graph.
type ManifestLayerMutation struct {
	config
	op              Op
	typ             string
	id              *int
	media_type      *string
	digest          *string
	size            *int32
	addsize         *int32
	annotations     *map[string]string
	clearedFields   map[string]struct{}
	manifest        *int
	clearedmanifest bool
	done            bool
	oldValue        func(context.Context) (*ManifestLayer, error)
	predicates      []predicate.ManifestLayer
}

var _ ent.Mutation = (*ManifestLayerMutation)(nil)

// manifestlayerOption allows management of the mutation configuration using functional options.
type manifestlayerOption func(*ManifestLayerMutation)

// newManifestLayerMutation creates new mutation for the ManifestLayer entity.
func newManifestLayerMutation(c config, op Op, opts ...manifestlayerOption) *ManifestLayerMutation {
	m := &ManifestLayerMutation{
		config:        c,
		op:            op,
		typ:           TypeManifestLayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManifestLayerID sets the ID field of the mutation.
func withManifestLayerID(id int) manifestlayerOption {
	return func(m *ManifestLayerMutation) {
		var (
			err   error
			once  sync.Once
			value *ManifestLayer
		)
		m.oldValue = func(ctx context.Context) (*ManifestLayer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ManifestLayer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManifestLayer sets the old ManifestLayer of the mutation.
func withManifestLayer(node *ManifestLayer) manifestlayerOption {
	return func(m *ManifestLayerMutation) {
		m.oldValue = func(context.Context) (*ManifestLayer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManifestLayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManifestLayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManifestLayerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ManifestLayerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ManifestLayer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMediaType sets the "media_type" field.
func (m *ManifestLayerMutation) SetMediaType(s string) {
	m.media_type = &s
}

// MediaType returns the value of the "media_type" field in the mutation.
func (m *ManifestLayerMutation) MediaType() (r string, exists bool) {
	v := m.media_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaType returns the old "media_type" field's value of the ManifestLayer entity.
// If the ManifestLayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestLayerMutation) OldMediaType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaType: %w", err)
	}
	return oldValue.MediaType, nil
}

// ResetMediaType resets all changes to the "media_type" field.
func (m *ManifestLayerMutation) ResetMediaType() {
	m.media_type = nil
}

// SetDigest sets the "digest" field.
func (m *ManifestLayerMutation) SetDigest(s string) {
	m.digest = &s
}

// Digest returns the value of the "digest" field in the mutation.
func (m *ManifestLayerMutation) Digest() (r string, exists bool) {
	v := m.digest
	if v == nil {
		return
	}
	return *v, true
}

// OldDigest returns the old "digest" field's value of the ManifestLayer entity.
// If the ManifestLayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestLayerMutation) OldDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDigest: %w", err)
	}
	return oldValue.Digest, nil
}

// ResetDigest resets all changes to the "digest" field.
func (m *ManifestLayerMutation) ResetDigest() {
	m.digest = nil
}

// SetSize sets the "size" field.
func (m *ManifestLayerMutation) SetSize(i int32) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ManifestLayerMutation) Size() (r int32, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the ManifestLayer entity.
// If the ManifestLayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestLayerMutation) OldSize(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ManifestLayerMutation) AddSize(i int32) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ManifestLayerMutation) AddedSize() (r int32, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ManifestLayerMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetAnnotations sets the "annotations" field.
func (m *ManifestLayerMutation) SetAnnotations(value map[string]string) {
	m.annotations = &value
}

// Annotations returns the value of the "annotations" field in the mutation.
func (m *ManifestLayerMutation) Annotations() (r map[string]string, exists bool) {
	v := m.annotations
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnotations returns the old "annotations" field's value of the ManifestLayer entity.
// If the ManifestLayer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestLayerMutation) OldAnnotations(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnotations is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnotations requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnotations: %w", err)
	}
	return oldValue.Annotations, nil
}

// ResetAnnotations resets all changes to the "annotations" field.
func (m *ManifestLayerMutation) ResetAnnotations() {
	m.annotations = nil
}

// SetManifestID sets the "manifest" edge to the Manifest entity by id.
func (m *ManifestLayerMutation) SetManifestID(id int) {
	m.manifest = &id
}

// ClearManifest clears the "manifest" edge to the Manifest entity.
func (m *ManifestLayerMutation) ClearManifest() {
	m.clearedmanifest = true
}

// ManifestCleared reports if the "manifest" edge to the Manifest entity was cleared.
func (m *ManifestLayerMutation) ManifestCleared() bool {
	return m.clearedmanifest
}

// ManifestID returns the "manifest" edge ID in the mutation.
func (m *ManifestLayerMutation) ManifestID() (id int, exists bool) {
	if m.manifest != nil {
		return *m.manifest, true
	}
	return
}

// ManifestIDs returns the "manifest" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManifestID instead. It exists only for internal usage by the builders.
func (m *ManifestLayerMutation) ManifestIDs() (ids []int) {
	if id := m.manifest; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManifest resets all changes to the "manifest" edge.
func (m *ManifestLayerMutation) ResetManifest() {
	m.manifest = nil
	m.clearedmanifest = false
}

// Where appends a list predicates to the ManifestLayerMutation builder.
func (m *ManifestLayerMutation) Where(ps ...predicate.ManifestLayer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ManifestLayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ManifestLayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ManifestLayer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ManifestLayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ManifestLayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ManifestLayer).
func (m *ManifestLayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManifestLayerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.media_type != nil {
		fields = append(fields, manifestlayer.FieldMediaType)
	}
	if m.digest != nil {
		fields = append(fields, manifestlayer.FieldDigest)
	}
	if m.size != nil {
		fields = append(fields, manifestlayer.FieldSize)
	}
	if m.annotations != nil {
		fields = append(fields, manifestlayer.FieldAnnotations)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManifestLayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manifestlayer.FieldMediaType:
		return m.MediaType()
	case manifestlayer.FieldDigest:
		return m.Digest()
	case manifestlayer.FieldSize:
		return m.Size()
	case manifestlayer.FieldAnnotations:
		return m.Annotations()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManifestLayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manifestlayer.FieldMediaType:
		return m.OldMediaType(ctx)
	case manifestlayer.FieldDigest:
		return m.OldDigest(ctx)
	case manifestlayer.FieldSize:
		return m.OldSize(ctx)
	case manifestlayer.FieldAnnotations:
		return m.OldAnnotations(ctx)
	}
	return nil, fmt.Errorf("unknown ManifestLayer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestLayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manifestlayer.FieldMediaType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaType(v)
		return nil
	case manifestlayer.FieldDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDigest(v)
		return nil
	case manifestlayer.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case manifestlayer.FieldAnnotations:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnotations(v)
		return nil
	}
	return fmt.Errorf("unknown ManifestLayer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManifestLayerMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, manifestlayer.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManifestLayerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case manifestlayer.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestLayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case manifestlayer.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown ManifestLayer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManifestLayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManifestLayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManifestLayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ManifestLayer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManifestLayerMutation) ResetField(name string) error {
	switch name {
	case manifestlayer.FieldMediaType:
		m.ResetMediaType()
		return nil
	case manifestlayer.FieldDigest:
		m.ResetDigest()
		return nil
	case manifestlayer.FieldSize:
		m.ResetSize()
		return nil
	case manifestlayer.FieldAnnotations:
		m.ResetAnnotations()
		return nil
	}
	return fmt.Errorf("unknown ManifestLayer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManifestLayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.manifest != nil {
		edges = append(edges, manifestlayer.EdgeManifest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManifestLayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manifestlayer.EdgeManifest:
		if id := m.manifest; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManifestLayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManifestLayerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManifestLayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmanifest {
		edges = append(edges, manifestlayer.EdgeManifest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManifestLayerMutation) EdgeCleared(name string) bool {
	switch name {
	case manifestlayer.EdgeManifest:
		return m.clearedmanifest
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManifestLayerMutation) ClearEdge(name string) error {
	switch name {
	case manifestlayer.EdgeManifest:
		m.ClearManifest()
		return nil
	}
	return fmt.Errorf("unknown ManifestLayer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManifestLayerMutation) ResetEdge(name string) error {
	switch name {
	case manifestlayer.EdgeManifest:
		m.ResetManifest()
		return nil
	}
	return fmt.Errorf("unknown ManifestLayer edge %s", name)
}

// ManifestTagReferenceMutation represents an operation that mutates the ManifestTagReference nodes in the graph.
type ManifestTagReferenceMutation struct {
	config
	op               Op
	typ              string
	id               *int
	tag              *string
	clearedFields    map[string]struct{}
	manifests        *int
	clearedmanifests bool
	done             bool
	oldValue         func(context.Context) (*ManifestTagReference, error)
	predicates       []predicate.ManifestTagReference
}

var _ ent.Mutation = (*ManifestTagReferenceMutation)(nil)

// manifesttagreferenceOption allows management of the mutation configuration using functional options.
type manifesttagreferenceOption func(*ManifestTagReferenceMutation)

// newManifestTagReferenceMutation creates new mutation for the ManifestTagReference entity.
func newManifestTagReferenceMutation(c config, op Op, opts ...manifesttagreferenceOption) *ManifestTagReferenceMutation {
	m := &ManifestTagReferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeManifestTagReference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManifestTagReferenceID sets the ID field of the mutation.
func withManifestTagReferenceID(id int) manifesttagreferenceOption {
	return func(m *ManifestTagReferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *ManifestTagReference
		)
		m.oldValue = func(ctx context.Context) (*ManifestTagReference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ManifestTagReference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManifestTagReference sets the old ManifestTagReference of the mutation.
func withManifestTagReference(node *ManifestTagReference) manifesttagreferenceOption {
	return func(m *ManifestTagReferenceMutation) {
		m.oldValue = func(context.Context) (*ManifestTagReference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManifestTagReferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManifestTagReferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManifestTagReferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ManifestTagReferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ManifestTagReference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTag sets the "tag" field.
func (m *ManifestTagReferenceMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ManifestTagReferenceMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ManifestTagReference entity.
// If the ManifestTagReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManifestTagReferenceMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ManifestTagReferenceMutation) ResetTag() {
	m.tag = nil
}

// SetManifestsID sets the "manifests" edge to the Manifest entity by id.
func (m *ManifestTagReferenceMutation) SetManifestsID(id int) {
	m.manifests = &id
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (m *ManifestTagReferenceMutation) ClearManifests() {
	m.clearedmanifests = true
}

// ManifestsCleared reports if the "manifests" edge to the Manifest entity was cleared.
func (m *ManifestTagReferenceMutation) ManifestsCleared() bool {
	return m.clearedmanifests
}

// ManifestsID returns the "manifests" edge ID in the mutation.
func (m *ManifestTagReferenceMutation) ManifestsID() (id int, exists bool) {
	if m.manifests != nil {
		return *m.manifests, true
	}
	return
}

// ManifestsIDs returns the "manifests" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManifestsID instead. It exists only for internal usage by the builders.
func (m *ManifestTagReferenceMutation) ManifestsIDs() (ids []int) {
	if id := m.manifests; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManifests resets all changes to the "manifests" edge.
func (m *ManifestTagReferenceMutation) ResetManifests() {
	m.manifests = nil
	m.clearedmanifests = false
}

// Where appends a list predicates to the ManifestTagReferenceMutation builder.
func (m *ManifestTagReferenceMutation) Where(ps ...predicate.ManifestTagReference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ManifestTagReferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ManifestTagReferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ManifestTagReference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ManifestTagReferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ManifestTagReferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ManifestTagReference).
func (m *ManifestTagReferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManifestTagReferenceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.tag != nil {
		fields = append(fields, manifesttagreference.FieldTag)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManifestTagReferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manifesttagreference.FieldTag:
		return m.Tag()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManifestTagReferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manifesttagreference.FieldTag:
		return m.OldTag(ctx)
	}
	return nil, fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestTagReferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manifesttagreference.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManifestTagReferenceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManifestTagReferenceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManifestTagReferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ManifestTagReference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManifestTagReferenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManifestTagReferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManifestTagReferenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ManifestTagReference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManifestTagReferenceMutation) ResetField(name string) error {
	switch name {
	case manifesttagreference.FieldTag:
		m.ResetTag()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManifestTagReferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.manifests != nil {
		edges = append(edges, manifesttagreference.EdgeManifests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManifestTagReferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manifesttagreference.EdgeManifests:
		if id := m.manifests; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManifestTagReferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManifestTagReferenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManifestTagReferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmanifests {
		edges = append(edges, manifesttagreference.EdgeManifests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManifestTagReferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case manifesttagreference.EdgeManifests:
		return m.clearedmanifests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManifestTagReferenceMutation) ClearEdge(name string) error {
	switch name {
	case manifesttagreference.EdgeManifests:
		m.ClearManifests()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManifestTagReferenceMutation) ResetEdge(name string) error {
	switch name {
	case manifesttagreference.EdgeManifests:
		m.ResetManifests()
		return nil
	}
	return fmt.Errorf("unknown ManifestTagReference edge %s", name)
}

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	slug              *string
	is_personal       *bool
	clearedFields     map[string]struct{}
	registries        map[int]struct{}
	removedregistries map[int]struct{}
	clearedregistries bool
	members           map[int]struct{}
	removedmembers    map[int]struct{}
	clearedmembers    bool
	done              bool
	oldValue          func(context.Context) (*Organization, error)
	predicates        []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id int) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrganizationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *OrganizationMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *OrganizationMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *OrganizationMutation) ResetSlug() {
	m.slug = nil
}

// SetIsPersonal sets the "is_personal" field.
func (m *OrganizationMutation) SetIsPersonal(b bool) {
	m.is_personal = &b
}

// IsPersonal returns the value of the "is_personal" field in the mutation.
func (m *OrganizationMutation) IsPersonal() (r bool, exists bool) {
	v := m.is_personal
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPersonal returns the old "is_personal" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldIsPersonal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPersonal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPersonal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPersonal: %w", err)
	}
	return oldValue.IsPersonal, nil
}

// ResetIsPersonal resets all changes to the "is_personal" field.
func (m *OrganizationMutation) ResetIsPersonal() {
	m.is_personal = nil
}

// AddRegistryIDs adds the "registries" edge to the Registry entity by ids.
func (m *OrganizationMutation) AddRegistryIDs(ids ...int) {
	if m.registries == nil {
		m.registries = make(map[int]struct{})
	}
	for i := range ids {
		m.registries[ids[i]] = struct{}{}
	}
}

// ClearRegistries clears the "registries" edge to the Registry entity.
func (m *OrganizationMutation) ClearRegistries() {
	m.clearedregistries = true
}

// RegistriesCleared reports if the "registries" edge to the Registry entity was cleared.
func (m *OrganizationMutation) RegistriesCleared() bool {
	return m.clearedregistries
}

// RemoveRegistryIDs removes the "registries" edge to the Registry entity by IDs.
func (m *OrganizationMutation) RemoveRegistryIDs(ids ...int) {
	if m.removedregistries == nil {
		m.removedregistries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.registries, ids[i])
		m.removedregistries[ids[i]] = struct{}{}
	}
}

// RemovedRegistries returns the removed IDs of the "registries" edge to the Registry entity.
func (m *OrganizationMutation) RemovedRegistriesIDs() (ids []int) {
	for id := range m.removedregistries {
		ids = append(ids, id)
	}
	return
}

// RegistriesIDs returns the "registries" edge IDs in the mutation.
func (m *OrganizationMutation) RegistriesIDs() (ids []int) {
	for id := range m.registries {
		ids = append(ids, id)
	}
	return
}

// ResetRegistries resets all changes to the "registries" edge.
func (m *OrganizationMutation) ResetRegistries() {
	m.registries = nil
	m.clearedregistries = false
	m.removedregistries = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *OrganizationMutation) AddMemberIDs(ids ...int) {
	if m.members == nil {
		m.members = make(map[int]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *OrganizationMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *OrganizationMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *OrganizationMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *OrganizationMutation) RemovedMembersIDs() (ids []int) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *OrganizationMutation) MembersIDs() (ids []int) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *OrganizationMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, organization.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, organization.FieldSlug)
	}
	if m.is_personal != nil {
		fields = append(fields, organization.FieldIsPersonal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldName:
		return m.Name()
	case organization.FieldSlug:
		return m.Slug()
	case organization.FieldIsPersonal:
		return m.IsPersonal()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldName:
		return m.OldName(ctx)
	case organization.FieldSlug:
		return m.OldSlug(ctx)
	case organization.FieldIsPersonal:
		return m.OldIsPersonal(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organization.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case organization.FieldIsPersonal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPersonal(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldName:
		m.ResetName()
		return nil
	case organization.FieldSlug:
		m.ResetSlug()
		return nil
	case organization.FieldIsPersonal:
		m.ResetIsPersonal()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.registries != nil {
		edges = append(edges, organization.EdgeRegistries)
	}
	if m.members != nil {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeRegistries:
		ids := make([]ent.Value, 0, len(m.registries))
		for id := range m.registries {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedregistries != nil {
		edges = append(edges, organization.EdgeRegistries)
	}
	if m.removedmembers != nil {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeRegistries:
		ids := make([]ent.Value, 0, len(m.removedregistries))
		for id := range m.removedregistries {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedregistries {
		edges = append(edges, organization.EdgeRegistries)
	}
	if m.clearedmembers {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgeRegistries:
		return m.clearedregistries
	case organization.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgeRegistries:
		m.ResetRegistries()
		return nil
	case organization.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}

// OrganizationMembershipMutation represents an operation that mutates the OrganizationMembership nodes in the graph.
type OrganizationMembershipMutation struct {
	config
	op                  Op
	typ                 string
	role                *int
	addrole             *int
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	organization        *int
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*OrganizationMembership, error)
	predicates          []predicate.OrganizationMembership
}

var _ ent.Mutation = (*OrganizationMembershipMutation)(nil)

// organizationmembershipOption allows management of the mutation configuration using functional options.
type organizationmembershipOption func(*OrganizationMembershipMutation)

// newOrganizationMembershipMutation creates new mutation for the OrganizationMembership entity.
func newOrganizationMembershipMutation(c config, op Op, opts ...organizationmembershipOption) *OrganizationMembershipMutation {
	m := &OrganizationMembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *OrganizationMembershipMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrganizationMembershipMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrganizationMembershipMutation) ResetUserID() {
	m.user = nil
}

// SetOrganizationID sets the "organization_id" field.
func (m *OrganizationMembershipMutation) SetOrganizationID(i int) {
	m.organization = &i
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *OrganizationMembershipMutation) OrganizationID() (r int, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *OrganizationMembershipMutation) ResetOrganizationID() {
	m.organization = nil
}

// SetRole sets the "role" field.
func (m *OrganizationMembershipMutation) SetRole(i int) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *OrganizationMembershipMutation) Role() (r int, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// AddRole adds i to the "role" field.
func (m *OrganizationMembershipMutation) AddRole(i int) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *OrganizationMembershipMutation) AddedRole() (r int, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *OrganizationMembershipMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *OrganizationMembershipMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[organizationmembership.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *OrganizationMembershipMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *OrganizationMembershipMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *OrganizationMembershipMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *OrganizationMembershipMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[organizationmembership.FieldOrganizationID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *OrganizationMembershipMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *OrganizationMembershipMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *OrganizationMembershipMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the OrganizationMembershipMutation builder.
func (m *OrganizationMembershipMutation) Where(ps ...predicate.OrganizationMembership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMembershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMembershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrganizationMembership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMembershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMembershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrganizationMembership).
func (m *OrganizationMembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMembershipMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, organizationmembership.FieldUserID)
	}
	if m.organization != nil {
		fields = append(fields, organizationmembership.FieldOrganizationID)
	}
	if m.role != nil {
		fields = append(fields, organizationmembership.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationmembership.FieldUserID:
		return m.UserID()
	case organizationmembership.FieldOrganizationID:
		return m.OrganizationID()
	case organizationmembership.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema OrganizationMembership does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationmembership.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case organizationmembership.FieldOrganizationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case organizationmembership.FieldRole:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationMembership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMembershipMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, organizationmembership.FieldRole)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMembershipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case organizationmembership.FieldRole:
		return m.AddedRole()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case organizationmembership.FieldRole:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationMembership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMembershipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMembershipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OrganizationMembership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMembershipMutation) ResetField(name string) error {
	switch name {
	case organizationmembership.FieldUserID:
		m.ResetUserID()
		return nil
	case organizationmembership.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case organizationmembership.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown OrganizationMembership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, organizationmembership.EdgeUser)
	}
	if m.organization != nil {
		edges = append(edges, organizationmembership.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationmembership.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case organizationmembership.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMembershipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, organizationmembership.EdgeUser)
	}
	if m.clearedorganization {
		edges = append(edges, organizationmembership.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationmembership.EdgeUser:
		return m.cleareduser
	case organizationmembership.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMembershipMutation) ClearEdge(name string) error {
	switch name {
	case organizationmembership.EdgeUser:
		m.ClearUser()
		return nil
	case organizationmembership.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown OrganizationMembership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMembershipMutation) ResetEdge(name string) error {
	switch name {
	case organizationmembership.EdgeUser:
		m.ResetUser()
		return nil
	case organizationmembership.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown OrganizationMembership edge %s", name)
}

// RegistryMutation represents an operation that mutates the Registry nodes in the graph.
type RegistryMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	slug                *string
	clearedFields       map[string]struct{}
	repositories        map[int]struct{}
	removedrepositories map[int]struct{}
	clearedrepositories bool
	organization        *int
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*Registry, error)
	predicates          []predicate.Registry
}

var _ ent.Mutation = (*RegistryMutation)(nil)

// registryOption allows management of the mutation configuration using functional options.
type registryOption func(*RegistryMutation)

// newRegistryMutation creates new mutation for the Registry entity.
func newRegistryMutation(c config, op Op, opts ...registryOption) *RegistryMutation {
	m := &RegistryMutation{
		config:        c,
		op:            op,
		typ:           TypeRegistry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegistryID sets the ID field of the mutation.
func withRegistryID(id int) registryOption {
	return func(m *RegistryMutation) {
		var (
			err   error
			once  sync.Once
			value *Registry
		)
		m.oldValue = func(ctx context.Context) (*Registry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Registry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegistry sets the old Registry of the mutation.
func withRegistry(node *Registry) registryOption {
	return func(m *RegistryMutation) {
		m.oldValue = func(context.Context) (*Registry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegistryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegistryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RegistryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RegistryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Registry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RegistryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RegistryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Registry entity.
// If the Registry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RegistryMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *RegistryMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *RegistryMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Registry entity.
// If the Registry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RegistryMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *RegistryMutation) ResetSlug() {
	m.slug = nil
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by ids.
func (m *RegistryMutation) AddRepositoryIDs(ids ...int) {
	if m.repositories == nil {
		m.repositories = make(map[int]struct{})
	}
	for i := range ids {
		m.repositories[ids[i]] = struct{}{}
	}
}

// ClearRepositories clears the "repositories" edge to the Repository entity.
func (m *RegistryMutation) ClearRepositories() {
	m.clearedrepositories = true
}

// RepositoriesCleared reports if the "repositories" edge to the Repository entity was cleared.
func (m *RegistryMutation) RepositoriesCleared() bool {
	return m.clearedrepositories
}

// RemoveRepositoryIDs removes the "repositories" edge to the Repository entity by IDs.
func (m *RegistryMutation) RemoveRepositoryIDs(ids ...int) {
	if m.removedrepositories == nil {
		m.removedrepositories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.repositories, ids[i])
		m.removedrepositories[ids[i]] = struct{}{}
	}
}

// RemovedRepositories returns the removed IDs of the "repositories" edge to the Repository entity.
func (m *RegistryMutation) RemovedRepositoriesIDs() (ids []int) {
	for id := range m.removedrepositories {
		ids = append(ids, id)
	}
	return
}

// RepositoriesIDs returns the "repositories" edge IDs in the mutation.
func (m *RegistryMutation) RepositoriesIDs() (ids []int) {
	for id := range m.repositories {
		ids = append(ids, id)
	}
	return
}

// ResetRepositories resets all changes to the "repositories" edge.
func (m *RegistryMutation) ResetRepositories() {
	m.repositories = nil
	m.clearedrepositories = false
	m.removedrepositories = nil
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *RegistryMutation) SetOrganizationID(id int) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *RegistryMutation) ClearOrganization() {
	m.clearedorganization = true
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *RegistryMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *RegistryMutation) OrganizationID() (id int, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *RegistryMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *RegistryMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the RegistryMutation builder.
func (m *RegistryMutation) Where(ps ...predicate.Registry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RegistryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RegistryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Registry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RegistryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RegistryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Registry).
func (m *RegistryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RegistryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, registry.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, registry.FieldSlug)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RegistryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registry.FieldName:
		return m.Name()
	case registry.FieldSlug:
		return m.Slug()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RegistryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registry.FieldName:
		return m.OldName(ctx)
	case registry.FieldSlug:
		return m.OldSlug(ctx)
	}
	return nil, fmt.Errorf("unknown Registry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registry.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case registry.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	}
	return fmt.Errorf("unknown Registry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RegistryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RegistryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RegistryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Registry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RegistryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RegistryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegistryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Registry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RegistryMutation) ResetField(name string) error {
	switch name {
	case registry.FieldName:
		m.ResetName()
		return nil
	case registry.FieldSlug:
		m.ResetSlug()
		return nil
	}
	return fmt.Errorf("unknown Registry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RegistryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.repositories != nil {
		edges = append(edges, registry.EdgeRepositories)
	}
	if m.organization != nil {
		edges = append(edges, registry.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RegistryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registry.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.repositories))
		for id := range m.repositories {
			ids = append(ids, id)
		}
		return ids
	case registry.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RegistryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrepositories != nil {
		edges = append(edges, registry.EdgeRepositories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RegistryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case registry.EdgeRepositories:
		ids := make([]ent.Value, 0, len(m.removedrepositories))
		for id := range m.removedrepositories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RegistryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrepositories {
		edges = append(edges, registry.EdgeRepositories)
	}
	if m.clearedorganization {
		edges = append(edges, registry.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RegistryMutation) EdgeCleared(name string) bool {
	switch name {
	case registry.EdgeRepositories:
		return m.clearedrepositories
	case registry.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RegistryMutation) ClearEdge(name string) error {
	switch name {
	case registry.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown Registry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RegistryMutation) ResetEdge(name string) error {
	switch name {
	case registry.EdgeRepositories:
		m.ResetRepositories()
		return nil
	case registry.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown Registry edge %s", name)
}

// RepositoryMutation represents an operation that mutates the Repository nodes in the graph.
type RepositoryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	manifests        map[int]struct{}
	removedmanifests map[int]struct{}
	clearedmanifests bool
	registry         *int
	clearedregistry  bool
	done             bool
	oldValue         func(context.Context) (*Repository, error)
	predicates       []predicate.Repository
}

var _ ent.Mutation = (*RepositoryMutation)(nil)

// repositoryOption allows management of the mutation configuration using functional options.
type repositoryOption func(*RepositoryMutation)

// newRepositoryMutation creates new mutation for the Repository entity.
func newRepositoryMutation(c config, op Op, opts ...repositoryOption) *RepositoryMutation {
	m := &RepositoryMutation{
		config:        c,
		op:            op,
		typ:           TypeRepository,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepositoryID sets the ID field of the mutation.
func withRepositoryID(id int) repositoryOption {
	return func(m *RepositoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Repository
		)
		m.oldValue = func(ctx context.Context) (*Repository, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Repository.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepository sets the old Repository of the mutation.
func withRepository(node *Repository) repositoryOption {
	return func(m *RepositoryMutation) {
		m.oldValue = func(context.Context) (*Repository, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepositoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepositoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RepositoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RepositoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Repository.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RepositoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepositoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Repository entity.
// If the Repository object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepositoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepositoryMutation) ResetName() {
	m.name = nil
}

// AddManifestIDs adds the "manifests" edge to the Manifest entity by ids.
func (m *RepositoryMutation) AddManifestIDs(ids ...int) {
	if m.manifests == nil {
		m.manifests = make(map[int]struct{})
	}
	for i := range ids {
		m.manifests[ids[i]] = struct{}{}
	}
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (m *RepositoryMutation) ClearManifests() {
	m.clearedmanifests = true
}

// ManifestsCleared reports if the "manifests" edge to the Manifest entity was cleared.
func (m *RepositoryMutation) ManifestsCleared() bool {
	return m.clearedmanifests
}

// RemoveManifestIDs removes the "manifests" edge to the Manifest entity by IDs.
func (m *RepositoryMutation) RemoveManifestIDs(ids ...int) {
	if m.removedmanifests == nil {
		m.removedmanifests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.manifests, ids[i])
		m.removedmanifests[ids[i]] = struct{}{}
	}
}

// RemovedManifests returns the removed IDs of the "manifests" edge to the Manifest entity.
func (m *RepositoryMutation) RemovedManifestsIDs() (ids []int) {
	for id := range m.removedmanifests {
		ids = append(ids, id)
	}
	return
}

// ManifestsIDs returns the "manifests" edge IDs in the mutation.
func (m *RepositoryMutation) ManifestsIDs() (ids []int) {
	for id := range m.manifests {
		ids = append(ids, id)
	}
	return
}

// ResetManifests resets all changes to the "manifests" edge.
func (m *RepositoryMutation) ResetManifests() {
	m.manifests = nil
	m.clearedmanifests = false
	m.removedmanifests = nil
}

// SetRegistryID sets the "registry" edge to the Registry entity by id.
func (m *RepositoryMutation) SetRegistryID(id int) {
	m.registry = &id
}

// ClearRegistry clears the "registry" edge to the Registry entity.
func (m *RepositoryMutation) ClearRegistry() {
	m.clearedregistry = true
}

// RegistryCleared reports if the "registry" edge to the Registry entity was cleared.
func (m *RepositoryMutation) RegistryCleared() bool {
	return m.clearedregistry
}

// RegistryID returns the "registry" edge ID in the mutation.
func (m *RepositoryMutation) RegistryID() (id int, exists bool) {
	if m.registry != nil {
		return *m.registry, true
	}
	return
}

// RegistryIDs returns the "registry" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RegistryID instead. It exists only for internal usage by the builders.
func (m *RepositoryMutation) RegistryIDs() (ids []int) {
	if id := m.registry; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRegistry resets all changes to the "registry" edge.
func (m *RepositoryMutation) ResetRegistry() {
	m.registry = nil
	m.clearedregistry = false
}

// Where appends a list predicates to the RepositoryMutation builder.
func (m *RepositoryMutation) Where(ps ...predicate.Repository) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RepositoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RepositoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Repository, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RepositoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RepositoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Repository).
func (m *RepositoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepositoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, repository.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepositoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case repository.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepositoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case repository.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Repository field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case repository.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepositoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepositoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepositoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Repository numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepositoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepositoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepositoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Repository nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepositoryMutation) ResetField(name string) error {
	switch name {
	case repository.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Repository field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepositoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.manifests != nil {
		edges = append(edges, repository.EdgeManifests)
	}
	if m.registry != nil {
		edges = append(edges, repository.EdgeRegistry)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepositoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeManifests:
		ids := make([]ent.Value, 0, len(m.manifests))
		for id := range m.manifests {
			ids = append(ids, id)
		}
		return ids
	case repository.EdgeRegistry:
		if id := m.registry; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepositoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmanifests != nil {
		edges = append(edges, repository.EdgeManifests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepositoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case repository.EdgeManifests:
		ids := make([]ent.Value, 0, len(m.removedmanifests))
		for id := range m.removedmanifests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepositoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmanifests {
		edges = append(edges, repository.EdgeManifests)
	}
	if m.clearedregistry {
		edges = append(edges, repository.EdgeRegistry)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepositoryMutation) EdgeCleared(name string) bool {
	switch name {
	case repository.EdgeManifests:
		return m.clearedmanifests
	case repository.EdgeRegistry:
		return m.clearedregistry
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepositoryMutation) ClearEdge(name string) error {
	switch name {
	case repository.EdgeRegistry:
		m.ClearRegistry()
		return nil
	}
	return fmt.Errorf("unknown Repository unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepositoryMutation) ResetEdge(name string) error {
	switch name {
	case repository.EdgeManifests:
		m.ResetManifests()
		return nil
	case repository.EdgeRegistry:
		m.ResetRegistry()
		return nil
	}
	return fmt.Errorf("unknown Repository edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	given_name           *string
	family_name          *string
	email                *string
	sub                  *string
	clearedFields        map[string]struct{}
	organizations        map[int]struct{}
	removedorganizations map[int]struct{}
	clearedorganizations bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGivenName sets the "given_name" field.
func (m *UserMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *UserMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *UserMutation) ResetGivenName() {
	m.given_name = nil
}

// SetFamilyName sets the "family_name" field.
func (m *UserMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *UserMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *UserMutation) ResetFamilyName() {
	m.family_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetSub sets the "sub" field.
func (m *UserMutation) SetSub(s string) {
	m.sub = &s
}

// Sub returns the value of the "sub" field in the mutation.
func (m *UserMutation) Sub() (r string, exists bool) {
	v := m.sub
	if v == nil {
		return
	}
	return *v, true
}

// OldSub returns the old "sub" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSub: %w", err)
	}
	return oldValue.Sub, nil
}

// ResetSub resets all changes to the "sub" field.
func (m *UserMutation) ResetSub() {
	m.sub = nil
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by ids.
func (m *UserMutation) AddOrganizationIDs(ids ...int) {
	if m.organizations == nil {
		m.organizations = make(map[int]struct{})
	}
	for i := range ids {
		m.organizations[ids[i]] = struct{}{}
	}
}

// ClearOrganizations clears the "organizations" edge to the Organization entity.
func (m *UserMutation) ClearOrganizations() {
	m.clearedorganizations = true
}

// OrganizationsCleared reports if the "organizations" edge to the Organization entity was cleared.
func (m *UserMutation) OrganizationsCleared() bool {
	return m.clearedorganizations
}

// RemoveOrganizationIDs removes the "organizations" edge to the Organization entity by IDs.
func (m *UserMutation) RemoveOrganizationIDs(ids ...int) {
	if m.removedorganizations == nil {
		m.removedorganizations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.organizations, ids[i])
		m.removedorganizations[ids[i]] = struct{}{}
	}
}

// RemovedOrganizations returns the removed IDs of the "organizations" edge to the Organization entity.
func (m *UserMutation) RemovedOrganizationsIDs() (ids []int) {
	for id := range m.removedorganizations {
		ids = append(ids, id)
	}
	return
}

// OrganizationsIDs returns the "organizations" edge IDs in the mutation.
func (m *UserMutation) OrganizationsIDs() (ids []int) {
	for id := range m.organizations {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizations resets all changes to the "organizations" edge.
func (m *UserMutation) ResetOrganizations() {
	m.organizations = nil
	m.clearedorganizations = false
	m.removedorganizations = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.given_name != nil {
		fields = append(fields, user.FieldGivenName)
	}
	if m.family_name != nil {
		fields = append(fields, user.FieldFamilyName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.sub != nil {
		fields = append(fields, user.FieldSub)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGivenName:
		return m.GivenName()
	case user.FieldFamilyName:
		return m.FamilyName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldSub:
		return m.Sub()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldGivenName:
		return m.OldGivenName(ctx)
	case user.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldSub:
		return m.OldSub(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case user.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSub(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldGivenName:
		m.ResetGivenName()
		return nil
	case user.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldSub:
		m.ResetSub()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.organizations != nil {
		edges = append(edges, user.EdgeOrganizations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.organizations))
		for id := range m.organizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedorganizations != nil {
		edges = append(edges, user.EdgeOrganizations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.removedorganizations))
		for id := range m.removedorganizations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorganizations {
		edges = append(edges, user.EdgeOrganizations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeOrganizations:
		return m.clearedorganizations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeOrganizations:
		m.ResetOrganizations()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
