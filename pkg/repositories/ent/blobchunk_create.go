// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
)

// BlobChunkCreate is the builder for creating a BlobChunk entity.
type BlobChunkCreate struct {
	config
	mutation *BlobChunkMutation
	hooks    []Hook
}

// SetUploadID sets the "upload_id" field.
func (bcc *BlobChunkCreate) SetUploadID(s string) *BlobChunkCreate {
	bcc.mutation.SetUploadID(s)
	return bcc
}

// SetSessionID sets the "session_id" field.
func (bcc *BlobChunkCreate) SetSessionID(s string) *BlobChunkCreate {
	bcc.mutation.SetSessionID(s)
	return bcc
}

// SetRangeFrom sets the "range_from" field.
func (bcc *BlobChunkCreate) SetRangeFrom(u uint64) *BlobChunkCreate {
	bcc.mutation.SetRangeFrom(u)
	return bcc
}

// SetRangeTo sets the "range_to" field.
func (bcc *BlobChunkCreate) SetRangeTo(u uint64) *BlobChunkCreate {
	bcc.mutation.SetRangeTo(u)
	return bcc
}

// SetPartNumber sets the "part_number" field.
func (bcc *BlobChunkCreate) SetPartNumber(u uint64) *BlobChunkCreate {
	bcc.mutation.SetPartNumber(u)
	return bcc
}

// Mutation returns the BlobChunkMutation object of the builder.
func (bcc *BlobChunkCreate) Mutation() *BlobChunkMutation {
	return bcc.mutation
}

// Save creates the BlobChunk in the database.
func (bcc *BlobChunkCreate) Save(ctx context.Context) (*BlobChunk, error) {
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BlobChunkCreate) SaveX(ctx context.Context) *BlobChunk {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BlobChunkCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BlobChunkCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BlobChunkCreate) check() error {
	if _, ok := bcc.mutation.UploadID(); !ok {
		return &ValidationError{Name: "upload_id", err: errors.New(`ent: missing required field "BlobChunk.upload_id"`)}
	}
	if _, ok := bcc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session_id", err: errors.New(`ent: missing required field "BlobChunk.session_id"`)}
	}
	if _, ok := bcc.mutation.RangeFrom(); !ok {
		return &ValidationError{Name: "range_from", err: errors.New(`ent: missing required field "BlobChunk.range_from"`)}
	}
	if _, ok := bcc.mutation.RangeTo(); !ok {
		return &ValidationError{Name: "range_to", err: errors.New(`ent: missing required field "BlobChunk.range_to"`)}
	}
	if _, ok := bcc.mutation.PartNumber(); !ok {
		return &ValidationError{Name: "part_number", err: errors.New(`ent: missing required field "BlobChunk.part_number"`)}
	}
	return nil
}

func (bcc *BlobChunkCreate) sqlSave(ctx context.Context) (*BlobChunk, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BlobChunkCreate) createSpec() (*BlobChunk, *sqlgraph.CreateSpec) {
	var (
		_node = &BlobChunk{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(blobchunk.Table, sqlgraph.NewFieldSpec(blobchunk.FieldID, field.TypeInt))
	)
	if value, ok := bcc.mutation.UploadID(); ok {
		_spec.SetField(blobchunk.FieldUploadID, field.TypeString, value)
		_node.UploadID = value
	}
	if value, ok := bcc.mutation.SessionID(); ok {
		_spec.SetField(blobchunk.FieldSessionID, field.TypeString, value)
		_node.SessionID = value
	}
	if value, ok := bcc.mutation.RangeFrom(); ok {
		_spec.SetField(blobchunk.FieldRangeFrom, field.TypeUint64, value)
		_node.RangeFrom = value
	}
	if value, ok := bcc.mutation.RangeTo(); ok {
		_spec.SetField(blobchunk.FieldRangeTo, field.TypeUint64, value)
		_node.RangeTo = value
	}
	if value, ok := bcc.mutation.PartNumber(); ok {
		_spec.SetField(blobchunk.FieldPartNumber, field.TypeUint64, value)
		_node.PartNumber = value
	}
	return _node, _spec
}

// BlobChunkCreateBulk is the builder for creating many BlobChunk entities in bulk.
type BlobChunkCreateBulk struct {
	config
	err      error
	builders []*BlobChunkCreate
}

// Save creates the BlobChunk entities in the database.
func (bccb *BlobChunkCreateBulk) Save(ctx context.Context) ([]*BlobChunk, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BlobChunk, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlobChunkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BlobChunkCreateBulk) SaveX(ctx context.Context) []*BlobChunk {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BlobChunkCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BlobChunkCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}
