// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestmisconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ManifestMisconfigurationUpdate is the builder for updating ManifestMisconfiguration entities.
type ManifestMisconfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *ManifestMisconfigurationMutation
}

// Where appends a list predicates to the ManifestMisconfigurationUpdate builder.
func (mmu *ManifestMisconfigurationUpdate) Where(ps ...predicate.ManifestMisconfiguration) *ManifestMisconfigurationUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetTargetFile sets the "target_file" field.
func (mmu *ManifestMisconfigurationUpdate) SetTargetFile(s string) *ManifestMisconfigurationUpdate {
	mmu.mutation.SetTargetFile(s)
	return mmu
}

// SetNillableTargetFile sets the "target_file" field if the given value is not nil.
func (mmu *ManifestMisconfigurationUpdate) SetNillableTargetFile(s *string) *ManifestMisconfigurationUpdate {
	if s != nil {
		mmu.SetTargetFile(*s)
	}
	return mmu
}

// SetMessage sets the "message" field.
func (mmu *ManifestMisconfigurationUpdate) SetMessage(s string) *ManifestMisconfigurationUpdate {
	mmu.mutation.SetMessage(s)
	return mmu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (mmu *ManifestMisconfigurationUpdate) SetNillableMessage(s *string) *ManifestMisconfigurationUpdate {
	if s != nil {
		mmu.SetMessage(*s)
	}
	return mmu
}

// SetResolution sets the "resolution" field.
func (mmu *ManifestMisconfigurationUpdate) SetResolution(s string) *ManifestMisconfigurationUpdate {
	mmu.mutation.SetResolution(s)
	return mmu
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (mmu *ManifestMisconfigurationUpdate) SetNillableResolution(s *string) *ManifestMisconfigurationUpdate {
	if s != nil {
		mmu.SetResolution(*s)
	}
	return mmu
}

// SetManifestID sets the "manifest_id" field.
func (mmu *ManifestMisconfigurationUpdate) SetManifestID(i int) *ManifestMisconfigurationUpdate {
	mmu.mutation.ResetManifestID()
	mmu.mutation.SetManifestID(i)
	return mmu
}

// SetNillableManifestID sets the "manifest_id" field if the given value is not nil.
func (mmu *ManifestMisconfigurationUpdate) SetNillableManifestID(i *int) *ManifestMisconfigurationUpdate {
	if i != nil {
		mmu.SetManifestID(*i)
	}
	return mmu
}

// AddManifestID adds i to the "manifest_id" field.
func (mmu *ManifestMisconfigurationUpdate) AddManifestID(i int) *ManifestMisconfigurationUpdate {
	mmu.mutation.AddManifestID(i)
	return mmu
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (mmu *ManifestMisconfigurationUpdate) SetMisconfigurationID(i int) *ManifestMisconfigurationUpdate {
	mmu.mutation.SetMisconfigurationID(i)
	return mmu
}

// SetNillableMisconfigurationID sets the "misconfiguration_id" field if the given value is not nil.
func (mmu *ManifestMisconfigurationUpdate) SetNillableMisconfigurationID(i *int) *ManifestMisconfigurationUpdate {
	if i != nil {
		mmu.SetMisconfigurationID(*i)
	}
	return mmu
}

// ClearMisconfigurationID clears the value of the "misconfiguration_id" field.
func (mmu *ManifestMisconfigurationUpdate) ClearMisconfigurationID() *ManifestMisconfigurationUpdate {
	mmu.mutation.ClearMisconfigurationID()
	return mmu
}

// SetMisconfiguration sets the "misconfiguration" edge to the Misconfiguration entity.
func (mmu *ManifestMisconfigurationUpdate) SetMisconfiguration(m *Misconfiguration) *ManifestMisconfigurationUpdate {
	return mmu.SetMisconfigurationID(m.ID)
}

// Mutation returns the ManifestMisconfigurationMutation object of the builder.
func (mmu *ManifestMisconfigurationUpdate) Mutation() *ManifestMisconfigurationMutation {
	return mmu.mutation
}

// ClearMisconfiguration clears the "misconfiguration" edge to the Misconfiguration entity.
func (mmu *ManifestMisconfigurationUpdate) ClearMisconfiguration() *ManifestMisconfigurationUpdate {
	mmu.mutation.ClearMisconfiguration()
	return mmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *ManifestMisconfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mmu.sqlSave, mmu.mutation, mmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *ManifestMisconfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *ManifestMisconfigurationUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *ManifestMisconfigurationUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmu *ManifestMisconfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifestmisconfiguration.Table, manifestmisconfiguration.Columns, sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt))
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmu.mutation.TargetFile(); ok {
		_spec.SetField(manifestmisconfiguration.FieldTargetFile, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Message(); ok {
		_spec.SetField(manifestmisconfiguration.FieldMessage, field.TypeString, value)
	}
	if value, ok := mmu.mutation.Resolution(); ok {
		_spec.SetField(manifestmisconfiguration.FieldResolution, field.TypeString, value)
	}
	if value, ok := mmu.mutation.ManifestID(); ok {
		_spec.SetField(manifestmisconfiguration.FieldManifestID, field.TypeInt, value)
	}
	if value, ok := mmu.mutation.AddedManifestID(); ok {
		_spec.AddField(manifestmisconfiguration.FieldManifestID, field.TypeInt, value)
	}
	if mmu.mutation.MisconfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestmisconfiguration.MisconfigurationTable,
			Columns: []string{manifestmisconfiguration.MisconfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmu.mutation.MisconfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestmisconfiguration.MisconfigurationTable,
			Columns: []string{manifestmisconfiguration.MisconfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifestmisconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mmu.mutation.done = true
	return n, nil
}

// ManifestMisconfigurationUpdateOne is the builder for updating a single ManifestMisconfiguration entity.
type ManifestMisconfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManifestMisconfigurationMutation
}

// SetTargetFile sets the "target_file" field.
func (mmuo *ManifestMisconfigurationUpdateOne) SetTargetFile(s string) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.SetTargetFile(s)
	return mmuo
}

// SetNillableTargetFile sets the "target_file" field if the given value is not nil.
func (mmuo *ManifestMisconfigurationUpdateOne) SetNillableTargetFile(s *string) *ManifestMisconfigurationUpdateOne {
	if s != nil {
		mmuo.SetTargetFile(*s)
	}
	return mmuo
}

// SetMessage sets the "message" field.
func (mmuo *ManifestMisconfigurationUpdateOne) SetMessage(s string) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.SetMessage(s)
	return mmuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (mmuo *ManifestMisconfigurationUpdateOne) SetNillableMessage(s *string) *ManifestMisconfigurationUpdateOne {
	if s != nil {
		mmuo.SetMessage(*s)
	}
	return mmuo
}

// SetResolution sets the "resolution" field.
func (mmuo *ManifestMisconfigurationUpdateOne) SetResolution(s string) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.SetResolution(s)
	return mmuo
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (mmuo *ManifestMisconfigurationUpdateOne) SetNillableResolution(s *string) *ManifestMisconfigurationUpdateOne {
	if s != nil {
		mmuo.SetResolution(*s)
	}
	return mmuo
}

// SetManifestID sets the "manifest_id" field.
func (mmuo *ManifestMisconfigurationUpdateOne) SetManifestID(i int) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.ResetManifestID()
	mmuo.mutation.SetManifestID(i)
	return mmuo
}

// SetNillableManifestID sets the "manifest_id" field if the given value is not nil.
func (mmuo *ManifestMisconfigurationUpdateOne) SetNillableManifestID(i *int) *ManifestMisconfigurationUpdateOne {
	if i != nil {
		mmuo.SetManifestID(*i)
	}
	return mmuo
}

// AddManifestID adds i to the "manifest_id" field.
func (mmuo *ManifestMisconfigurationUpdateOne) AddManifestID(i int) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.AddManifestID(i)
	return mmuo
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (mmuo *ManifestMisconfigurationUpdateOne) SetMisconfigurationID(i int) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.SetMisconfigurationID(i)
	return mmuo
}

// SetNillableMisconfigurationID sets the "misconfiguration_id" field if the given value is not nil.
func (mmuo *ManifestMisconfigurationUpdateOne) SetNillableMisconfigurationID(i *int) *ManifestMisconfigurationUpdateOne {
	if i != nil {
		mmuo.SetMisconfigurationID(*i)
	}
	return mmuo
}

// ClearMisconfigurationID clears the value of the "misconfiguration_id" field.
func (mmuo *ManifestMisconfigurationUpdateOne) ClearMisconfigurationID() *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.ClearMisconfigurationID()
	return mmuo
}

// SetMisconfiguration sets the "misconfiguration" edge to the Misconfiguration entity.
func (mmuo *ManifestMisconfigurationUpdateOne) SetMisconfiguration(m *Misconfiguration) *ManifestMisconfigurationUpdateOne {
	return mmuo.SetMisconfigurationID(m.ID)
}

// Mutation returns the ManifestMisconfigurationMutation object of the builder.
func (mmuo *ManifestMisconfigurationUpdateOne) Mutation() *ManifestMisconfigurationMutation {
	return mmuo.mutation
}

// ClearMisconfiguration clears the "misconfiguration" edge to the Misconfiguration entity.
func (mmuo *ManifestMisconfigurationUpdateOne) ClearMisconfiguration() *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.ClearMisconfiguration()
	return mmuo
}

// Where appends a list predicates to the ManifestMisconfigurationUpdate builder.
func (mmuo *ManifestMisconfigurationUpdateOne) Where(ps ...predicate.ManifestMisconfiguration) *ManifestMisconfigurationUpdateOne {
	mmuo.mutation.Where(ps...)
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *ManifestMisconfigurationUpdateOne) Select(field string, fields ...string) *ManifestMisconfigurationUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated ManifestMisconfiguration entity.
func (mmuo *ManifestMisconfigurationUpdateOne) Save(ctx context.Context) (*ManifestMisconfiguration, error) {
	return withHooks(ctx, mmuo.sqlSave, mmuo.mutation, mmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *ManifestMisconfigurationUpdateOne) SaveX(ctx context.Context) *ManifestMisconfiguration {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *ManifestMisconfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *ManifestMisconfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mmuo *ManifestMisconfigurationUpdateOne) sqlSave(ctx context.Context) (_node *ManifestMisconfiguration, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifestmisconfiguration.Table, manifestmisconfiguration.Columns, sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt))
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManifestMisconfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manifestmisconfiguration.FieldID)
		for _, f := range fields {
			if !manifestmisconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manifestmisconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mmuo.mutation.TargetFile(); ok {
		_spec.SetField(manifestmisconfiguration.FieldTargetFile, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Message(); ok {
		_spec.SetField(manifestmisconfiguration.FieldMessage, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.Resolution(); ok {
		_spec.SetField(manifestmisconfiguration.FieldResolution, field.TypeString, value)
	}
	if value, ok := mmuo.mutation.ManifestID(); ok {
		_spec.SetField(manifestmisconfiguration.FieldManifestID, field.TypeInt, value)
	}
	if value, ok := mmuo.mutation.AddedManifestID(); ok {
		_spec.AddField(manifestmisconfiguration.FieldManifestID, field.TypeInt, value)
	}
	if mmuo.mutation.MisconfigurationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestmisconfiguration.MisconfigurationTable,
			Columns: []string{manifestmisconfiguration.MisconfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmuo.mutation.MisconfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestmisconfiguration.MisconfigurationTable,
			Columns: []string{manifestmisconfiguration.MisconfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ManifestMisconfiguration{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifestmisconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mmuo.mutation.done = true
	return _node, nil
}
