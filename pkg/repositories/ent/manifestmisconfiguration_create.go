// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestmisconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
)

// ManifestMisconfigurationCreate is the builder for creating a ManifestMisconfiguration entity.
type ManifestMisconfigurationCreate struct {
	config
	mutation *ManifestMisconfigurationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTargetFile sets the "target_file" field.
func (mmc *ManifestMisconfigurationCreate) SetTargetFile(s string) *ManifestMisconfigurationCreate {
	mmc.mutation.SetTargetFile(s)
	return mmc
}

// SetMessage sets the "message" field.
func (mmc *ManifestMisconfigurationCreate) SetMessage(s string) *ManifestMisconfigurationCreate {
	mmc.mutation.SetMessage(s)
	return mmc
}

// SetResolution sets the "resolution" field.
func (mmc *ManifestMisconfigurationCreate) SetResolution(s string) *ManifestMisconfigurationCreate {
	mmc.mutation.SetResolution(s)
	return mmc
}

// SetManifestID sets the "manifest_id" field.
func (mmc *ManifestMisconfigurationCreate) SetManifestID(i int) *ManifestMisconfigurationCreate {
	mmc.mutation.SetManifestID(i)
	return mmc
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (mmc *ManifestMisconfigurationCreate) SetMisconfigurationID(i int) *ManifestMisconfigurationCreate {
	mmc.mutation.SetMisconfigurationID(i)
	return mmc
}

// SetNillableMisconfigurationID sets the "misconfiguration_id" field if the given value is not nil.
func (mmc *ManifestMisconfigurationCreate) SetNillableMisconfigurationID(i *int) *ManifestMisconfigurationCreate {
	if i != nil {
		mmc.SetMisconfigurationID(*i)
	}
	return mmc
}

// SetMisconfiguration sets the "misconfiguration" edge to the Misconfiguration entity.
func (mmc *ManifestMisconfigurationCreate) SetMisconfiguration(m *Misconfiguration) *ManifestMisconfigurationCreate {
	return mmc.SetMisconfigurationID(m.ID)
}

// Mutation returns the ManifestMisconfigurationMutation object of the builder.
func (mmc *ManifestMisconfigurationCreate) Mutation() *ManifestMisconfigurationMutation {
	return mmc.mutation
}

// Save creates the ManifestMisconfiguration in the database.
func (mmc *ManifestMisconfigurationCreate) Save(ctx context.Context) (*ManifestMisconfiguration, error) {
	return withHooks(ctx, mmc.sqlSave, mmc.mutation, mmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mmc *ManifestMisconfigurationCreate) SaveX(ctx context.Context) *ManifestMisconfiguration {
	v, err := mmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmc *ManifestMisconfigurationCreate) Exec(ctx context.Context) error {
	_, err := mmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmc *ManifestMisconfigurationCreate) ExecX(ctx context.Context) {
	if err := mmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmc *ManifestMisconfigurationCreate) check() error {
	if _, ok := mmc.mutation.TargetFile(); !ok {
		return &ValidationError{Name: "target_file", err: errors.New(`ent: missing required field "ManifestMisconfiguration.target_file"`)}
	}
	if _, ok := mmc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "ManifestMisconfiguration.message"`)}
	}
	if _, ok := mmc.mutation.Resolution(); !ok {
		return &ValidationError{Name: "resolution", err: errors.New(`ent: missing required field "ManifestMisconfiguration.resolution"`)}
	}
	if _, ok := mmc.mutation.ManifestID(); !ok {
		return &ValidationError{Name: "manifest_id", err: errors.New(`ent: missing required field "ManifestMisconfiguration.manifest_id"`)}
	}
	return nil
}

func (mmc *ManifestMisconfigurationCreate) sqlSave(ctx context.Context) (*ManifestMisconfiguration, error) {
	if err := mmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mmc.mutation.id = &_node.ID
	mmc.mutation.done = true
	return _node, nil
}

func (mmc *ManifestMisconfigurationCreate) createSpec() (*ManifestMisconfiguration, *sqlgraph.CreateSpec) {
	var (
		_node = &ManifestMisconfiguration{config: mmc.config}
		_spec = sqlgraph.NewCreateSpec(manifestmisconfiguration.Table, sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mmc.conflict
	if value, ok := mmc.mutation.TargetFile(); ok {
		_spec.SetField(manifestmisconfiguration.FieldTargetFile, field.TypeString, value)
		_node.TargetFile = value
	}
	if value, ok := mmc.mutation.Message(); ok {
		_spec.SetField(manifestmisconfiguration.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := mmc.mutation.Resolution(); ok {
		_spec.SetField(manifestmisconfiguration.FieldResolution, field.TypeString, value)
		_node.Resolution = value
	}
	if value, ok := mmc.mutation.ManifestID(); ok {
		_spec.SetField(manifestmisconfiguration.FieldManifestID, field.TypeInt, value)
		_node.ManifestID = value
	}
	if nodes := mmc.mutation.MisconfigurationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestmisconfiguration.MisconfigurationTable,
			Columns: []string{manifestmisconfiguration.MisconfigurationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MisconfigurationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManifestMisconfiguration.Create().
//		SetTargetFile(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestMisconfigurationUpsert) {
//			SetTargetFile(v+v).
//		}).
//		Exec(ctx)
func (mmc *ManifestMisconfigurationCreate) OnConflict(opts ...sql.ConflictOption) *ManifestMisconfigurationUpsertOne {
	mmc.conflict = opts
	return &ManifestMisconfigurationUpsertOne{
		create: mmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmc *ManifestMisconfigurationCreate) OnConflictColumns(columns ...string) *ManifestMisconfigurationUpsertOne {
	mmc.conflict = append(mmc.conflict, sql.ConflictColumns(columns...))
	return &ManifestMisconfigurationUpsertOne{
		create: mmc,
	}
}

type (
	// ManifestMisconfigurationUpsertOne is the builder for "upsert"-ing
	//  one ManifestMisconfiguration node.
	ManifestMisconfigurationUpsertOne struct {
		create *ManifestMisconfigurationCreate
	}

	// ManifestMisconfigurationUpsert is the "OnConflict" setter.
	ManifestMisconfigurationUpsert struct {
		*sql.UpdateSet
	}
)

// SetTargetFile sets the "target_file" field.
func (u *ManifestMisconfigurationUpsert) SetTargetFile(v string) *ManifestMisconfigurationUpsert {
	u.Set(manifestmisconfiguration.FieldTargetFile, v)
	return u
}

// UpdateTargetFile sets the "target_file" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsert) UpdateTargetFile() *ManifestMisconfigurationUpsert {
	u.SetExcluded(manifestmisconfiguration.FieldTargetFile)
	return u
}

// SetMessage sets the "message" field.
func (u *ManifestMisconfigurationUpsert) SetMessage(v string) *ManifestMisconfigurationUpsert {
	u.Set(manifestmisconfiguration.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsert) UpdateMessage() *ManifestMisconfigurationUpsert {
	u.SetExcluded(manifestmisconfiguration.FieldMessage)
	return u
}

// SetResolution sets the "resolution" field.
func (u *ManifestMisconfigurationUpsert) SetResolution(v string) *ManifestMisconfigurationUpsert {
	u.Set(manifestmisconfiguration.FieldResolution, v)
	return u
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsert) UpdateResolution() *ManifestMisconfigurationUpsert {
	u.SetExcluded(manifestmisconfiguration.FieldResolution)
	return u
}

// SetManifestID sets the "manifest_id" field.
func (u *ManifestMisconfigurationUpsert) SetManifestID(v int) *ManifestMisconfigurationUpsert {
	u.Set(manifestmisconfiguration.FieldManifestID, v)
	return u
}

// UpdateManifestID sets the "manifest_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsert) UpdateManifestID() *ManifestMisconfigurationUpsert {
	u.SetExcluded(manifestmisconfiguration.FieldManifestID)
	return u
}

// AddManifestID adds v to the "manifest_id" field.
func (u *ManifestMisconfigurationUpsert) AddManifestID(v int) *ManifestMisconfigurationUpsert {
	u.Add(manifestmisconfiguration.FieldManifestID, v)
	return u
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsert) SetMisconfigurationID(v int) *ManifestMisconfigurationUpsert {
	u.Set(manifestmisconfiguration.FieldMisconfigurationID, v)
	return u
}

// UpdateMisconfigurationID sets the "misconfiguration_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsert) UpdateMisconfigurationID() *ManifestMisconfigurationUpsert {
	u.SetExcluded(manifestmisconfiguration.FieldMisconfigurationID)
	return u
}

// ClearMisconfigurationID clears the value of the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsert) ClearMisconfigurationID() *ManifestMisconfigurationUpsert {
	u.SetNull(manifestmisconfiguration.FieldMisconfigurationID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestMisconfigurationUpsertOne) UpdateNewValues() *ManifestMisconfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ManifestMisconfigurationUpsertOne) Ignore() *ManifestMisconfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestMisconfigurationUpsertOne) DoNothing() *ManifestMisconfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestMisconfigurationCreate.OnConflict
// documentation for more info.
func (u *ManifestMisconfigurationUpsertOne) Update(set func(*ManifestMisconfigurationUpsert)) *ManifestMisconfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestMisconfigurationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetFile sets the "target_file" field.
func (u *ManifestMisconfigurationUpsertOne) SetTargetFile(v string) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetTargetFile(v)
	})
}

// UpdateTargetFile sets the "target_file" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertOne) UpdateTargetFile() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateTargetFile()
	})
}

// SetMessage sets the "message" field.
func (u *ManifestMisconfigurationUpsertOne) SetMessage(v string) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertOne) UpdateMessage() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateMessage()
	})
}

// SetResolution sets the "resolution" field.
func (u *ManifestMisconfigurationUpsertOne) SetResolution(v string) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertOne) UpdateResolution() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateResolution()
	})
}

// SetManifestID sets the "manifest_id" field.
func (u *ManifestMisconfigurationUpsertOne) SetManifestID(v int) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetManifestID(v)
	})
}

// AddManifestID adds v to the "manifest_id" field.
func (u *ManifestMisconfigurationUpsertOne) AddManifestID(v int) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.AddManifestID(v)
	})
}

// UpdateManifestID sets the "manifest_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertOne) UpdateManifestID() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateManifestID()
	})
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsertOne) SetMisconfigurationID(v int) *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetMisconfigurationID(v)
	})
}

// UpdateMisconfigurationID sets the "misconfiguration_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertOne) UpdateMisconfigurationID() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateMisconfigurationID()
	})
}

// ClearMisconfigurationID clears the value of the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsertOne) ClearMisconfigurationID() *ManifestMisconfigurationUpsertOne {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.ClearMisconfigurationID()
	})
}

// Exec executes the query.
func (u *ManifestMisconfigurationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestMisconfigurationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestMisconfigurationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ManifestMisconfigurationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ManifestMisconfigurationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ManifestMisconfigurationCreateBulk is the builder for creating many ManifestMisconfiguration entities in bulk.
type ManifestMisconfigurationCreateBulk struct {
	config
	err      error
	builders []*ManifestMisconfigurationCreate
	conflict []sql.ConflictOption
}

// Save creates the ManifestMisconfiguration entities in the database.
func (mmcb *ManifestMisconfigurationCreateBulk) Save(ctx context.Context) ([]*ManifestMisconfiguration, error) {
	if mmcb.err != nil {
		return nil, mmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mmcb.builders))
	nodes := make([]*ManifestMisconfiguration, len(mmcb.builders))
	mutators := make([]Mutator, len(mmcb.builders))
	for i := range mmcb.builders {
		func(i int, root context.Context) {
			builder := mmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManifestMisconfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mmcb *ManifestMisconfigurationCreateBulk) SaveX(ctx context.Context) []*ManifestMisconfiguration {
	v, err := mmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mmcb *ManifestMisconfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := mmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmcb *ManifestMisconfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := mmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManifestMisconfiguration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestMisconfigurationUpsert) {
//			SetTargetFile(v+v).
//		}).
//		Exec(ctx)
func (mmcb *ManifestMisconfigurationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ManifestMisconfigurationUpsertBulk {
	mmcb.conflict = opts
	return &ManifestMisconfigurationUpsertBulk{
		create: mmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mmcb *ManifestMisconfigurationCreateBulk) OnConflictColumns(columns ...string) *ManifestMisconfigurationUpsertBulk {
	mmcb.conflict = append(mmcb.conflict, sql.ConflictColumns(columns...))
	return &ManifestMisconfigurationUpsertBulk{
		create: mmcb,
	}
}

// ManifestMisconfigurationUpsertBulk is the builder for "upsert"-ing
// a bulk of ManifestMisconfiguration nodes.
type ManifestMisconfigurationUpsertBulk struct {
	create *ManifestMisconfigurationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestMisconfigurationUpsertBulk) UpdateNewValues() *ManifestMisconfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManifestMisconfiguration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ManifestMisconfigurationUpsertBulk) Ignore() *ManifestMisconfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestMisconfigurationUpsertBulk) DoNothing() *ManifestMisconfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestMisconfigurationCreateBulk.OnConflict
// documentation for more info.
func (u *ManifestMisconfigurationUpsertBulk) Update(set func(*ManifestMisconfigurationUpsert)) *ManifestMisconfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestMisconfigurationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetFile sets the "target_file" field.
func (u *ManifestMisconfigurationUpsertBulk) SetTargetFile(v string) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetTargetFile(v)
	})
}

// UpdateTargetFile sets the "target_file" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertBulk) UpdateTargetFile() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateTargetFile()
	})
}

// SetMessage sets the "message" field.
func (u *ManifestMisconfigurationUpsertBulk) SetMessage(v string) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertBulk) UpdateMessage() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateMessage()
	})
}

// SetResolution sets the "resolution" field.
func (u *ManifestMisconfigurationUpsertBulk) SetResolution(v string) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertBulk) UpdateResolution() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateResolution()
	})
}

// SetManifestID sets the "manifest_id" field.
func (u *ManifestMisconfigurationUpsertBulk) SetManifestID(v int) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetManifestID(v)
	})
}

// AddManifestID adds v to the "manifest_id" field.
func (u *ManifestMisconfigurationUpsertBulk) AddManifestID(v int) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.AddManifestID(v)
	})
}

// UpdateManifestID sets the "manifest_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertBulk) UpdateManifestID() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateManifestID()
	})
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsertBulk) SetMisconfigurationID(v int) *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.SetMisconfigurationID(v)
	})
}

// UpdateMisconfigurationID sets the "misconfiguration_id" field to the value that was provided on create.
func (u *ManifestMisconfigurationUpsertBulk) UpdateMisconfigurationID() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.UpdateMisconfigurationID()
	})
}

// ClearMisconfigurationID clears the value of the "misconfiguration_id" field.
func (u *ManifestMisconfigurationUpsertBulk) ClearMisconfigurationID() *ManifestMisconfigurationUpsertBulk {
	return u.Update(func(s *ManifestMisconfigurationUpsert) {
		s.ClearMisconfigurationID()
	})
}

// Exec executes the query.
func (u *ManifestMisconfigurationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ManifestMisconfigurationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestMisconfigurationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestMisconfigurationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
