// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationinvite"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

// OrganizationInvite is the model entity for the OrganizationInvite schema.
type OrganizationInvite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InviteID holds the value of the "invite_id" field.
	InviteID string `json:"invite_id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID int `json:"organization_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *int `json:"user_id,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role organizationinvite.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationInviteQuery when eager-loading is set.
	Edges        OrganizationInviteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationInviteEdges holds the relations/edges for other nodes in the graph.
type OrganizationInviteEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Invitee holds the value of the invitee edge.
	Invitee *User `json:"invitee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationInviteEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// InviteeOrErr returns the Invitee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationInviteEdges) InviteeOrErr() (*User, error) {
	if e.Invitee != nil {
		return e.Invitee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "invitee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationInvite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationinvite.FieldID, organizationinvite.FieldOrganizationID, organizationinvite.FieldUserID:
			values[i] = new(sql.NullInt64)
		case organizationinvite.FieldInviteID, organizationinvite.FieldEmail, organizationinvite.FieldRole:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationInvite fields.
func (oi *OrganizationInvite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationinvite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oi.ID = int(value.Int64)
		case organizationinvite.FieldInviteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invite_id", values[i])
			} else if value.Valid {
				oi.InviteID = value.String
			}
		case organizationinvite.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				oi.OrganizationID = int(value.Int64)
			}
		case organizationinvite.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				oi.UserID = new(int)
				*oi.UserID = int(value.Int64)
			}
		case organizationinvite.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				oi.Email = new(string)
				*oi.Email = value.String
			}
		case organizationinvite.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				oi.Role = organizationinvite.Role(value.String)
			}
		default:
			oi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationInvite.
// This includes values selected through modifiers, order, etc.
func (oi *OrganizationInvite) Value(name string) (ent.Value, error) {
	return oi.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the OrganizationInvite entity.
func (oi *OrganizationInvite) QueryOrganization() *OrganizationQuery {
	return NewOrganizationInviteClient(oi.config).QueryOrganization(oi)
}

// QueryInvitee queries the "invitee" edge of the OrganizationInvite entity.
func (oi *OrganizationInvite) QueryInvitee() *UserQuery {
	return NewOrganizationInviteClient(oi.config).QueryInvitee(oi)
}

// Update returns a builder for updating this OrganizationInvite.
// Note that you need to call OrganizationInvite.Unwrap() before calling this method if this OrganizationInvite
// was returned from a transaction, and the transaction was committed or rolled back.
func (oi *OrganizationInvite) Update() *OrganizationInviteUpdateOne {
	return NewOrganizationInviteClient(oi.config).UpdateOne(oi)
}

// Unwrap unwraps the OrganizationInvite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oi *OrganizationInvite) Unwrap() *OrganizationInvite {
	_tx, ok := oi.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrganizationInvite is not a transactional entity")
	}
	oi.config.driver = _tx.drv
	return oi
}

// String implements the fmt.Stringer.
func (oi *OrganizationInvite) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationInvite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oi.ID))
	builder.WriteString("invite_id=")
	builder.WriteString(oi.InviteID)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", oi.OrganizationID))
	builder.WriteString(", ")
	if v := oi.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := oi.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", oi.Role))
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationInvites is a parsable slice of OrganizationInvite.
type OrganizationInvites []*OrganizationInvite
