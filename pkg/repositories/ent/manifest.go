// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
)

// Manifest is the model entity for the Manifest schema.
type Manifest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType string `json:"media_type,omitempty"`
	// S3Path holds the value of the "s3_path" field.
	S3Path string `json:"s3_path,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ManifestQuery when eager-loading is set.
	Edges                ManifestEdges `json:"edges"`
	repository_manifests *int
	selectValues         sql.SelectValues
}

// ManifestEdges holds the relations/edges for other nodes in the graph.
type ManifestEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*ManifestTagReference `json:"tags,omitempty"`
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// Subject holds the value of the subject edge.
	Subject []*Manifest `json:"subject,omitempty"`
	// Referer holds the value of the referer edge.
	Referer []*Manifest `json:"referer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ManifestEdges) TagsOrErr() ([]*ManifestTagReference, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManifestEdges) RepositoryOrErr() (*Repository, error) {
	if e.Repository != nil {
		return e.Repository, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: repository.Label}
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading.
func (e ManifestEdges) SubjectOrErr() ([]*Manifest, error) {
	if e.loadedTypes[2] {
		return e.Subject, nil
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// RefererOrErr returns the Referer value or an error if the edge
// was not loaded in eager-loading.
func (e ManifestEdges) RefererOrErr() ([]*Manifest, error) {
	if e.loadedTypes[3] {
		return e.Referer, nil
	}
	return nil, &NotLoadedError{edge: "referer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Manifest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case manifest.FieldID:
			values[i] = new(sql.NullInt64)
		case manifest.FieldMediaType, manifest.FieldS3Path, manifest.FieldDigest:
			values[i] = new(sql.NullString)
		case manifest.ForeignKeys[0]: // repository_manifests
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Manifest fields.
func (m *Manifest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case manifest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case manifest.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				m.MediaType = value.String
			}
		case manifest.FieldS3Path:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field s3_path", values[i])
			} else if value.Valid {
				m.S3Path = value.String
			}
		case manifest.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				m.Digest = value.String
			}
		case manifest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field repository_manifests", value)
			} else if value.Valid {
				m.repository_manifests = new(int)
				*m.repository_manifests = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Manifest.
// This includes values selected through modifiers, order, etc.
func (m *Manifest) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Manifest entity.
func (m *Manifest) QueryTags() *ManifestTagReferenceQuery {
	return NewManifestClient(m.config).QueryTags(m)
}

// QueryRepository queries the "repository" edge of the Manifest entity.
func (m *Manifest) QueryRepository() *RepositoryQuery {
	return NewManifestClient(m.config).QueryRepository(m)
}

// QuerySubject queries the "subject" edge of the Manifest entity.
func (m *Manifest) QuerySubject() *ManifestQuery {
	return NewManifestClient(m.config).QuerySubject(m)
}

// QueryReferer queries the "referer" edge of the Manifest entity.
func (m *Manifest) QueryReferer() *ManifestQuery {
	return NewManifestClient(m.config).QueryReferer(m)
}

// Update returns a builder for updating this Manifest.
// Note that you need to call Manifest.Unwrap() before calling this method if this Manifest
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Manifest) Update() *ManifestUpdateOne {
	return NewManifestClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Manifest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Manifest) Unwrap() *Manifest {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Manifest is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Manifest) String() string {
	var builder strings.Builder
	builder.WriteString("Manifest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("media_type=")
	builder.WriteString(m.MediaType)
	builder.WriteString(", ")
	builder.WriteString("s3_path=")
	builder.WriteString(m.S3Path)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(m.Digest)
	builder.WriteByte(')')
	return builder.String()
}

// Manifests is a parsable slice of Manifest.
type Manifests []*Manifest
