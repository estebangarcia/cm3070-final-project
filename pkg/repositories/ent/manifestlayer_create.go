// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
)

// ManifestLayerCreate is the builder for creating a ManifestLayer entity.
type ManifestLayerCreate struct {
	config
	mutation *ManifestLayerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMediaType sets the "media_type" field.
func (mlc *ManifestLayerCreate) SetMediaType(s string) *ManifestLayerCreate {
	mlc.mutation.SetMediaType(s)
	return mlc
}

// SetDigest sets the "digest" field.
func (mlc *ManifestLayerCreate) SetDigest(s string) *ManifestLayerCreate {
	mlc.mutation.SetDigest(s)
	return mlc
}

// SetSize sets the "size" field.
func (mlc *ManifestLayerCreate) SetSize(i int32) *ManifestLayerCreate {
	mlc.mutation.SetSize(i)
	return mlc
}

// SetAnnotations sets the "annotations" field.
func (mlc *ManifestLayerCreate) SetAnnotations(m map[string]string) *ManifestLayerCreate {
	mlc.mutation.SetAnnotations(m)
	return mlc
}

// SetManifestID sets the "manifest" edge to the Manifest entity by ID.
func (mlc *ManifestLayerCreate) SetManifestID(id int) *ManifestLayerCreate {
	mlc.mutation.SetManifestID(id)
	return mlc
}

// SetNillableManifestID sets the "manifest" edge to the Manifest entity by ID if the given value is not nil.
func (mlc *ManifestLayerCreate) SetNillableManifestID(id *int) *ManifestLayerCreate {
	if id != nil {
		mlc = mlc.SetManifestID(*id)
	}
	return mlc
}

// SetManifest sets the "manifest" edge to the Manifest entity.
func (mlc *ManifestLayerCreate) SetManifest(m *Manifest) *ManifestLayerCreate {
	return mlc.SetManifestID(m.ID)
}

// Mutation returns the ManifestLayerMutation object of the builder.
func (mlc *ManifestLayerCreate) Mutation() *ManifestLayerMutation {
	return mlc.mutation
}

// Save creates the ManifestLayer in the database.
func (mlc *ManifestLayerCreate) Save(ctx context.Context) (*ManifestLayer, error) {
	return withHooks(ctx, mlc.sqlSave, mlc.mutation, mlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *ManifestLayerCreate) SaveX(ctx context.Context) *ManifestLayer {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlc *ManifestLayerCreate) Exec(ctx context.Context) error {
	_, err := mlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlc *ManifestLayerCreate) ExecX(ctx context.Context) {
	if err := mlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *ManifestLayerCreate) check() error {
	if _, ok := mlc.mutation.MediaType(); !ok {
		return &ValidationError{Name: "media_type", err: errors.New(`ent: missing required field "ManifestLayer.media_type"`)}
	}
	if _, ok := mlc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "ManifestLayer.digest"`)}
	}
	if _, ok := mlc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "ManifestLayer.size"`)}
	}
	if _, ok := mlc.mutation.Annotations(); !ok {
		return &ValidationError{Name: "annotations", err: errors.New(`ent: missing required field "ManifestLayer.annotations"`)}
	}
	return nil
}

func (mlc *ManifestLayerCreate) sqlSave(ctx context.Context) (*ManifestLayer, error) {
	if err := mlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mlc.mutation.id = &_node.ID
	mlc.mutation.done = true
	return _node, nil
}

func (mlc *ManifestLayerCreate) createSpec() (*ManifestLayer, *sqlgraph.CreateSpec) {
	var (
		_node = &ManifestLayer{config: mlc.config}
		_spec = sqlgraph.NewCreateSpec(manifestlayer.Table, sqlgraph.NewFieldSpec(manifestlayer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mlc.conflict
	if value, ok := mlc.mutation.MediaType(); ok {
		_spec.SetField(manifestlayer.FieldMediaType, field.TypeString, value)
		_node.MediaType = value
	}
	if value, ok := mlc.mutation.Digest(); ok {
		_spec.SetField(manifestlayer.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := mlc.mutation.Size(); ok {
		_spec.SetField(manifestlayer.FieldSize, field.TypeInt32, value)
		_node.Size = value
	}
	if value, ok := mlc.mutation.Annotations(); ok {
		_spec.SetField(manifestlayer.FieldAnnotations, field.TypeJSON, value)
		_node.Annotations = value
	}
	if nodes := mlc.mutation.ManifestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestlayer.ManifestTable,
			Columns: []string{manifestlayer.ManifestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.manifest_manifest_layers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManifestLayer.Create().
//		SetMediaType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestLayerUpsert) {
//			SetMediaType(v+v).
//		}).
//		Exec(ctx)
func (mlc *ManifestLayerCreate) OnConflict(opts ...sql.ConflictOption) *ManifestLayerUpsertOne {
	mlc.conflict = opts
	return &ManifestLayerUpsertOne{
		create: mlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlc *ManifestLayerCreate) OnConflictColumns(columns ...string) *ManifestLayerUpsertOne {
	mlc.conflict = append(mlc.conflict, sql.ConflictColumns(columns...))
	return &ManifestLayerUpsertOne{
		create: mlc,
	}
}

type (
	// ManifestLayerUpsertOne is the builder for "upsert"-ing
	//  one ManifestLayer node.
	ManifestLayerUpsertOne struct {
		create *ManifestLayerCreate
	}

	// ManifestLayerUpsert is the "OnConflict" setter.
	ManifestLayerUpsert struct {
		*sql.UpdateSet
	}
)

// SetMediaType sets the "media_type" field.
func (u *ManifestLayerUpsert) SetMediaType(v string) *ManifestLayerUpsert {
	u.Set(manifestlayer.FieldMediaType, v)
	return u
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestLayerUpsert) UpdateMediaType() *ManifestLayerUpsert {
	u.SetExcluded(manifestlayer.FieldMediaType)
	return u
}

// SetDigest sets the "digest" field.
func (u *ManifestLayerUpsert) SetDigest(v string) *ManifestLayerUpsert {
	u.Set(manifestlayer.FieldDigest, v)
	return u
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestLayerUpsert) UpdateDigest() *ManifestLayerUpsert {
	u.SetExcluded(manifestlayer.FieldDigest)
	return u
}

// SetSize sets the "size" field.
func (u *ManifestLayerUpsert) SetSize(v int32) *ManifestLayerUpsert {
	u.Set(manifestlayer.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ManifestLayerUpsert) UpdateSize() *ManifestLayerUpsert {
	u.SetExcluded(manifestlayer.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *ManifestLayerUpsert) AddSize(v int32) *ManifestLayerUpsert {
	u.Add(manifestlayer.FieldSize, v)
	return u
}

// SetAnnotations sets the "annotations" field.
func (u *ManifestLayerUpsert) SetAnnotations(v map[string]string) *ManifestLayerUpsert {
	u.Set(manifestlayer.FieldAnnotations, v)
	return u
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ManifestLayerUpsert) UpdateAnnotations() *ManifestLayerUpsert {
	u.SetExcluded(manifestlayer.FieldAnnotations)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestLayerUpsertOne) UpdateNewValues() *ManifestLayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ManifestLayerUpsertOne) Ignore() *ManifestLayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestLayerUpsertOne) DoNothing() *ManifestLayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestLayerCreate.OnConflict
// documentation for more info.
func (u *ManifestLayerUpsertOne) Update(set func(*ManifestLayerUpsert)) *ManifestLayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestLayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMediaType sets the "media_type" field.
func (u *ManifestLayerUpsertOne) SetMediaType(v string) *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestLayerUpsertOne) UpdateMediaType() *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateMediaType()
	})
}

// SetDigest sets the "digest" field.
func (u *ManifestLayerUpsertOne) SetDigest(v string) *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestLayerUpsertOne) UpdateDigest() *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateDigest()
	})
}

// SetSize sets the "size" field.
func (u *ManifestLayerUpsertOne) SetSize(v int32) *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *ManifestLayerUpsertOne) AddSize(v int32) *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ManifestLayerUpsertOne) UpdateSize() *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateSize()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ManifestLayerUpsertOne) SetAnnotations(v map[string]string) *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ManifestLayerUpsertOne) UpdateAnnotations() *ManifestLayerUpsertOne {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateAnnotations()
	})
}

// Exec executes the query.
func (u *ManifestLayerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestLayerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestLayerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ManifestLayerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ManifestLayerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ManifestLayerCreateBulk is the builder for creating many ManifestLayer entities in bulk.
type ManifestLayerCreateBulk struct {
	config
	err      error
	builders []*ManifestLayerCreate
	conflict []sql.ConflictOption
}

// Save creates the ManifestLayer entities in the database.
func (mlcb *ManifestLayerCreateBulk) Save(ctx context.Context) ([]*ManifestLayer, error) {
	if mlcb.err != nil {
		return nil, mlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*ManifestLayer, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManifestLayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlcb *ManifestLayerCreateBulk) SaveX(ctx context.Context) []*ManifestLayer {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlcb *ManifestLayerCreateBulk) Exec(ctx context.Context) error {
	_, err := mlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlcb *ManifestLayerCreateBulk) ExecX(ctx context.Context) {
	if err := mlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ManifestLayer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestLayerUpsert) {
//			SetMediaType(v+v).
//		}).
//		Exec(ctx)
func (mlcb *ManifestLayerCreateBulk) OnConflict(opts ...sql.ConflictOption) *ManifestLayerUpsertBulk {
	mlcb.conflict = opts
	return &ManifestLayerUpsertBulk{
		create: mlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlcb *ManifestLayerCreateBulk) OnConflictColumns(columns ...string) *ManifestLayerUpsertBulk {
	mlcb.conflict = append(mlcb.conflict, sql.ConflictColumns(columns...))
	return &ManifestLayerUpsertBulk{
		create: mlcb,
	}
}

// ManifestLayerUpsertBulk is the builder for "upsert"-ing
// a bulk of ManifestLayer nodes.
type ManifestLayerUpsertBulk struct {
	create *ManifestLayerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestLayerUpsertBulk) UpdateNewValues() *ManifestLayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ManifestLayer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ManifestLayerUpsertBulk) Ignore() *ManifestLayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestLayerUpsertBulk) DoNothing() *ManifestLayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestLayerCreateBulk.OnConflict
// documentation for more info.
func (u *ManifestLayerUpsertBulk) Update(set func(*ManifestLayerUpsert)) *ManifestLayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestLayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetMediaType sets the "media_type" field.
func (u *ManifestLayerUpsertBulk) SetMediaType(v string) *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestLayerUpsertBulk) UpdateMediaType() *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateMediaType()
	})
}

// SetDigest sets the "digest" field.
func (u *ManifestLayerUpsertBulk) SetDigest(v string) *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestLayerUpsertBulk) UpdateDigest() *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateDigest()
	})
}

// SetSize sets the "size" field.
func (u *ManifestLayerUpsertBulk) SetSize(v int32) *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *ManifestLayerUpsertBulk) AddSize(v int32) *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *ManifestLayerUpsertBulk) UpdateSize() *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateSize()
	})
}

// SetAnnotations sets the "annotations" field.
func (u *ManifestLayerUpsertBulk) SetAnnotations(v map[string]string) *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.SetAnnotations(v)
	})
}

// UpdateAnnotations sets the "annotations" field to the value that was provided on create.
func (u *ManifestLayerUpsertBulk) UpdateAnnotations() *ManifestLayerUpsertBulk {
	return u.Update(func(s *ManifestLayerUpsert) {
		s.UpdateAnnotations()
	})
}

// Exec executes the query.
func (u *ManifestLayerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ManifestLayerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestLayerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestLayerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
