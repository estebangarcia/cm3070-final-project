// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationinvite"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

// OrganizationInviteCreate is the builder for creating a OrganizationInvite entity.
type OrganizationInviteCreate struct {
	config
	mutation *OrganizationInviteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInviteID sets the "invite_id" field.
func (oic *OrganizationInviteCreate) SetInviteID(s string) *OrganizationInviteCreate {
	oic.mutation.SetInviteID(s)
	return oic
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (oic *OrganizationInviteCreate) SetNillableInviteID(s *string) *OrganizationInviteCreate {
	if s != nil {
		oic.SetInviteID(*s)
	}
	return oic
}

// SetOrganizationID sets the "organization_id" field.
func (oic *OrganizationInviteCreate) SetOrganizationID(i int) *OrganizationInviteCreate {
	oic.mutation.SetOrganizationID(i)
	return oic
}

// SetUserID sets the "user_id" field.
func (oic *OrganizationInviteCreate) SetUserID(i int) *OrganizationInviteCreate {
	oic.mutation.SetUserID(i)
	return oic
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oic *OrganizationInviteCreate) SetNillableUserID(i *int) *OrganizationInviteCreate {
	if i != nil {
		oic.SetUserID(*i)
	}
	return oic
}

// SetEmail sets the "email" field.
func (oic *OrganizationInviteCreate) SetEmail(s string) *OrganizationInviteCreate {
	oic.mutation.SetEmail(s)
	return oic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oic *OrganizationInviteCreate) SetNillableEmail(s *string) *OrganizationInviteCreate {
	if s != nil {
		oic.SetEmail(*s)
	}
	return oic
}

// SetRole sets the "role" field.
func (oic *OrganizationInviteCreate) SetRole(o organizationinvite.Role) *OrganizationInviteCreate {
	oic.mutation.SetRole(o)
	return oic
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oic *OrganizationInviteCreate) SetOrganization(o *Organization) *OrganizationInviteCreate {
	return oic.SetOrganizationID(o.ID)
}

// SetInviteeID sets the "invitee" edge to the User entity by ID.
func (oic *OrganizationInviteCreate) SetInviteeID(id int) *OrganizationInviteCreate {
	oic.mutation.SetInviteeID(id)
	return oic
}

// SetNillableInviteeID sets the "invitee" edge to the User entity by ID if the given value is not nil.
func (oic *OrganizationInviteCreate) SetNillableInviteeID(id *int) *OrganizationInviteCreate {
	if id != nil {
		oic = oic.SetInviteeID(*id)
	}
	return oic
}

// SetInvitee sets the "invitee" edge to the User entity.
func (oic *OrganizationInviteCreate) SetInvitee(u *User) *OrganizationInviteCreate {
	return oic.SetInviteeID(u.ID)
}

// Mutation returns the OrganizationInviteMutation object of the builder.
func (oic *OrganizationInviteCreate) Mutation() *OrganizationInviteMutation {
	return oic.mutation
}

// Save creates the OrganizationInvite in the database.
func (oic *OrganizationInviteCreate) Save(ctx context.Context) (*OrganizationInvite, error) {
	oic.defaults()
	return withHooks(ctx, oic.sqlSave, oic.mutation, oic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oic *OrganizationInviteCreate) SaveX(ctx context.Context) *OrganizationInvite {
	v, err := oic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oic *OrganizationInviteCreate) Exec(ctx context.Context) error {
	_, err := oic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oic *OrganizationInviteCreate) ExecX(ctx context.Context) {
	if err := oic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oic *OrganizationInviteCreate) defaults() {
	if _, ok := oic.mutation.InviteID(); !ok {
		v := organizationinvite.DefaultInviteID()
		oic.mutation.SetInviteID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oic *OrganizationInviteCreate) check() error {
	if _, ok := oic.mutation.InviteID(); !ok {
		return &ValidationError{Name: "invite_id", err: errors.New(`ent: missing required field "OrganizationInvite.invite_id"`)}
	}
	if _, ok := oic.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "OrganizationInvite.organization_id"`)}
	}
	if _, ok := oic.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "OrganizationInvite.role"`)}
	}
	if v, ok := oic.mutation.Role(); ok {
		if err := organizationinvite.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrganizationInvite.role": %w`, err)}
		}
	}
	if len(oic.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OrganizationInvite.organization"`)}
	}
	return nil
}

func (oic *OrganizationInviteCreate) sqlSave(ctx context.Context) (*OrganizationInvite, error) {
	if err := oic.check(); err != nil {
		return nil, err
	}
	_node, _spec := oic.createSpec()
	if err := sqlgraph.CreateNode(ctx, oic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oic.mutation.id = &_node.ID
	oic.mutation.done = true
	return _node, nil
}

func (oic *OrganizationInviteCreate) createSpec() (*OrganizationInvite, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationInvite{config: oic.config}
		_spec = sqlgraph.NewCreateSpec(organizationinvite.Table, sqlgraph.NewFieldSpec(organizationinvite.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oic.conflict
	if value, ok := oic.mutation.InviteID(); ok {
		_spec.SetField(organizationinvite.FieldInviteID, field.TypeString, value)
		_node.InviteID = value
	}
	if value, ok := oic.mutation.Email(); ok {
		_spec.SetField(organizationinvite.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := oic.mutation.Role(); ok {
		_spec.SetField(organizationinvite.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := oic.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.OrganizationTable,
			Columns: []string{organizationinvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oic.mutation.InviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.InviteeTable,
			Columns: []string{organizationinvite.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationInvite.Create().
//		SetInviteID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationInviteUpsert) {
//			SetInviteID(v+v).
//		}).
//		Exec(ctx)
func (oic *OrganizationInviteCreate) OnConflict(opts ...sql.ConflictOption) *OrganizationInviteUpsertOne {
	oic.conflict = opts
	return &OrganizationInviteUpsertOne{
		create: oic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oic *OrganizationInviteCreate) OnConflictColumns(columns ...string) *OrganizationInviteUpsertOne {
	oic.conflict = append(oic.conflict, sql.ConflictColumns(columns...))
	return &OrganizationInviteUpsertOne{
		create: oic,
	}
}

type (
	// OrganizationInviteUpsertOne is the builder for "upsert"-ing
	//  one OrganizationInvite node.
	OrganizationInviteUpsertOne struct {
		create *OrganizationInviteCreate
	}

	// OrganizationInviteUpsert is the "OnConflict" setter.
	OrganizationInviteUpsert struct {
		*sql.UpdateSet
	}
)

// SetInviteID sets the "invite_id" field.
func (u *OrganizationInviteUpsert) SetInviteID(v string) *OrganizationInviteUpsert {
	u.Set(organizationinvite.FieldInviteID, v)
	return u
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsert) UpdateInviteID() *OrganizationInviteUpsert {
	u.SetExcluded(organizationinvite.FieldInviteID)
	return u
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationInviteUpsert) SetOrganizationID(v int) *OrganizationInviteUpsert {
	u.Set(organizationinvite.FieldOrganizationID, v)
	return u
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsert) UpdateOrganizationID() *OrganizationInviteUpsert {
	u.SetExcluded(organizationinvite.FieldOrganizationID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrganizationInviteUpsert) SetUserID(v int) *OrganizationInviteUpsert {
	u.Set(organizationinvite.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsert) UpdateUserID() *OrganizationInviteUpsert {
	u.SetExcluded(organizationinvite.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrganizationInviteUpsert) ClearUserID() *OrganizationInviteUpsert {
	u.SetNull(organizationinvite.FieldUserID)
	return u
}

// SetEmail sets the "email" field.
func (u *OrganizationInviteUpsert) SetEmail(v string) *OrganizationInviteUpsert {
	u.Set(organizationinvite.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrganizationInviteUpsert) UpdateEmail() *OrganizationInviteUpsert {
	u.SetExcluded(organizationinvite.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *OrganizationInviteUpsert) ClearEmail() *OrganizationInviteUpsert {
	u.SetNull(organizationinvite.FieldEmail)
	return u
}

// SetRole sets the "role" field.
func (u *OrganizationInviteUpsert) SetRole(v organizationinvite.Role) *OrganizationInviteUpsert {
	u.Set(organizationinvite.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *OrganizationInviteUpsert) UpdateRole() *OrganizationInviteUpsert {
	u.SetExcluded(organizationinvite.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationInviteUpsertOne) UpdateNewValues() *OrganizationInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrganizationInviteUpsertOne) Ignore() *OrganizationInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationInviteUpsertOne) DoNothing() *OrganizationInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationInviteCreate.OnConflict
// documentation for more info.
func (u *OrganizationInviteUpsertOne) Update(set func(*OrganizationInviteUpsert)) *OrganizationInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationInviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetInviteID sets the "invite_id" field.
func (u *OrganizationInviteUpsertOne) SetInviteID(v string) *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertOne) UpdateInviteID() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateInviteID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationInviteUpsertOne) SetOrganizationID(v int) *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertOne) UpdateOrganizationID() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrganizationInviteUpsertOne) SetUserID(v int) *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertOne) UpdateUserID() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrganizationInviteUpsertOne) ClearUserID() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.ClearUserID()
	})
}

// SetEmail sets the "email" field.
func (u *OrganizationInviteUpsertOne) SetEmail(v string) *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrganizationInviteUpsertOne) UpdateEmail() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *OrganizationInviteUpsertOne) ClearEmail() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.ClearEmail()
	})
}

// SetRole sets the "role" field.
func (u *OrganizationInviteUpsertOne) SetRole(v organizationinvite.Role) *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *OrganizationInviteUpsertOne) UpdateRole() *OrganizationInviteUpsertOne {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *OrganizationInviteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationInviteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationInviteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrganizationInviteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrganizationInviteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrganizationInviteCreateBulk is the builder for creating many OrganizationInvite entities in bulk.
type OrganizationInviteCreateBulk struct {
	config
	err      error
	builders []*OrganizationInviteCreate
	conflict []sql.ConflictOption
}

// Save creates the OrganizationInvite entities in the database.
func (oicb *OrganizationInviteCreateBulk) Save(ctx context.Context) ([]*OrganizationInvite, error) {
	if oicb.err != nil {
		return nil, oicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oicb.builders))
	nodes := make([]*OrganizationInvite, len(oicb.builders))
	mutators := make([]Mutator, len(oicb.builders))
	for i := range oicb.builders {
		func(i int, root context.Context) {
			builder := oicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationInviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oicb *OrganizationInviteCreateBulk) SaveX(ctx context.Context) []*OrganizationInvite {
	v, err := oicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oicb *OrganizationInviteCreateBulk) Exec(ctx context.Context) error {
	_, err := oicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oicb *OrganizationInviteCreateBulk) ExecX(ctx context.Context) {
	if err := oicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrganizationInvite.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrganizationInviteUpsert) {
//			SetInviteID(v+v).
//		}).
//		Exec(ctx)
func (oicb *OrganizationInviteCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrganizationInviteUpsertBulk {
	oicb.conflict = opts
	return &OrganizationInviteUpsertBulk{
		create: oicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oicb *OrganizationInviteCreateBulk) OnConflictColumns(columns ...string) *OrganizationInviteUpsertBulk {
	oicb.conflict = append(oicb.conflict, sql.ConflictColumns(columns...))
	return &OrganizationInviteUpsertBulk{
		create: oicb,
	}
}

// OrganizationInviteUpsertBulk is the builder for "upsert"-ing
// a bulk of OrganizationInvite nodes.
type OrganizationInviteUpsertBulk struct {
	create *OrganizationInviteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrganizationInviteUpsertBulk) UpdateNewValues() *OrganizationInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrganizationInvite.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrganizationInviteUpsertBulk) Ignore() *OrganizationInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrganizationInviteUpsertBulk) DoNothing() *OrganizationInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrganizationInviteCreateBulk.OnConflict
// documentation for more info.
func (u *OrganizationInviteUpsertBulk) Update(set func(*OrganizationInviteUpsert)) *OrganizationInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrganizationInviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetInviteID sets the "invite_id" field.
func (u *OrganizationInviteUpsertBulk) SetInviteID(v string) *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetInviteID(v)
	})
}

// UpdateInviteID sets the "invite_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertBulk) UpdateInviteID() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateInviteID()
	})
}

// SetOrganizationID sets the "organization_id" field.
func (u *OrganizationInviteUpsertBulk) SetOrganizationID(v int) *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetOrganizationID(v)
	})
}

// UpdateOrganizationID sets the "organization_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertBulk) UpdateOrganizationID() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateOrganizationID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrganizationInviteUpsertBulk) SetUserID(v int) *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrganizationInviteUpsertBulk) UpdateUserID() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrganizationInviteUpsertBulk) ClearUserID() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.ClearUserID()
	})
}

// SetEmail sets the "email" field.
func (u *OrganizationInviteUpsertBulk) SetEmail(v string) *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrganizationInviteUpsertBulk) UpdateEmail() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *OrganizationInviteUpsertBulk) ClearEmail() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.ClearEmail()
	})
}

// SetRole sets the "role" field.
func (u *OrganizationInviteUpsertBulk) SetRole(v organizationinvite.Role) *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *OrganizationInviteUpsertBulk) UpdateRole() *OrganizationInviteUpsertBulk {
	return u.Update(func(s *OrganizationInviteUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *OrganizationInviteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrganizationInviteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrganizationInviteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrganizationInviteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
