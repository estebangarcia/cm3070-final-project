// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestmisconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// MisconfigurationUpdate is the builder for updating Misconfiguration entities.
type MisconfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *MisconfigurationMutation
}

// Where appends a list predicates to the MisconfigurationUpdate builder.
func (mu *MisconfigurationUpdate) Where(ps ...predicate.Misconfiguration) *MisconfigurationUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (mu *MisconfigurationUpdate) SetMisconfigurationID(s string) *MisconfigurationUpdate {
	mu.mutation.SetMisconfigurationID(s)
	return mu
}

// SetNillableMisconfigurationID sets the "misconfiguration_id" field if the given value is not nil.
func (mu *MisconfigurationUpdate) SetNillableMisconfigurationID(s *string) *MisconfigurationUpdate {
	if s != nil {
		mu.SetMisconfigurationID(*s)
	}
	return mu
}

// SetMisconfigurationURLDetails sets the "misconfiguration_url_details" field.
func (mu *MisconfigurationUpdate) SetMisconfigurationURLDetails(s string) *MisconfigurationUpdate {
	mu.mutation.SetMisconfigurationURLDetails(s)
	return mu
}

// SetNillableMisconfigurationURLDetails sets the "misconfiguration_url_details" field if the given value is not nil.
func (mu *MisconfigurationUpdate) SetNillableMisconfigurationURLDetails(s *string) *MisconfigurationUpdate {
	if s != nil {
		mu.SetMisconfigurationURLDetails(*s)
	}
	return mu
}

// SetTitle sets the "title" field.
func (mu *MisconfigurationUpdate) SetTitle(s string) *MisconfigurationUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MisconfigurationUpdate) SetNillableTitle(s *string) *MisconfigurationUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetSeverity sets the "severity" field.
func (mu *MisconfigurationUpdate) SetSeverity(m misconfiguration.Severity) *MisconfigurationUpdate {
	mu.mutation.SetSeverity(m)
	return mu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (mu *MisconfigurationUpdate) SetNillableSeverity(m *misconfiguration.Severity) *MisconfigurationUpdate {
	if m != nil {
		mu.SetSeverity(*m)
	}
	return mu
}

// AddManifestMisconfigurationIDs adds the "manifest_misconfigurations" edge to the ManifestMisconfiguration entity by IDs.
func (mu *MisconfigurationUpdate) AddManifestMisconfigurationIDs(ids ...int) *MisconfigurationUpdate {
	mu.mutation.AddManifestMisconfigurationIDs(ids...)
	return mu
}

// AddManifestMisconfigurations adds the "manifest_misconfigurations" edges to the ManifestMisconfiguration entity.
func (mu *MisconfigurationUpdate) AddManifestMisconfigurations(m ...*ManifestMisconfiguration) *MisconfigurationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddManifestMisconfigurationIDs(ids...)
}

// Mutation returns the MisconfigurationMutation object of the builder.
func (mu *MisconfigurationUpdate) Mutation() *MisconfigurationMutation {
	return mu.mutation
}

// ClearManifestMisconfigurations clears all "manifest_misconfigurations" edges to the ManifestMisconfiguration entity.
func (mu *MisconfigurationUpdate) ClearManifestMisconfigurations() *MisconfigurationUpdate {
	mu.mutation.ClearManifestMisconfigurations()
	return mu
}

// RemoveManifestMisconfigurationIDs removes the "manifest_misconfigurations" edge to ManifestMisconfiguration entities by IDs.
func (mu *MisconfigurationUpdate) RemoveManifestMisconfigurationIDs(ids ...int) *MisconfigurationUpdate {
	mu.mutation.RemoveManifestMisconfigurationIDs(ids...)
	return mu
}

// RemoveManifestMisconfigurations removes "manifest_misconfigurations" edges to ManifestMisconfiguration entities.
func (mu *MisconfigurationUpdate) RemoveManifestMisconfigurations(m ...*ManifestMisconfiguration) *MisconfigurationUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveManifestMisconfigurationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MisconfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MisconfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MisconfigurationUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MisconfigurationUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MisconfigurationUpdate) check() error {
	if v, ok := mu.mutation.Severity(); ok {
		if err := misconfiguration.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Misconfiguration.severity": %w`, err)}
		}
	}
	return nil
}

func (mu *MisconfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(misconfiguration.Table, misconfiguration.Columns, sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MisconfigurationID(); ok {
		_spec.SetField(misconfiguration.FieldMisconfigurationID, field.TypeString, value)
	}
	if value, ok := mu.mutation.MisconfigurationURLDetails(); ok {
		_spec.SetField(misconfiguration.FieldMisconfigurationURLDetails, field.TypeString, value)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(misconfiguration.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Severity(); ok {
		_spec.SetField(misconfiguration.FieldSeverity, field.TypeEnum, value)
	}
	if mu.mutation.ManifestMisconfigurationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedManifestMisconfigurationsIDs(); len(nodes) > 0 && !mu.mutation.ManifestMisconfigurationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ManifestMisconfigurationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{misconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MisconfigurationUpdateOne is the builder for updating a single Misconfiguration entity.
type MisconfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MisconfigurationMutation
}

// SetMisconfigurationID sets the "misconfiguration_id" field.
func (muo *MisconfigurationUpdateOne) SetMisconfigurationID(s string) *MisconfigurationUpdateOne {
	muo.mutation.SetMisconfigurationID(s)
	return muo
}

// SetNillableMisconfigurationID sets the "misconfiguration_id" field if the given value is not nil.
func (muo *MisconfigurationUpdateOne) SetNillableMisconfigurationID(s *string) *MisconfigurationUpdateOne {
	if s != nil {
		muo.SetMisconfigurationID(*s)
	}
	return muo
}

// SetMisconfigurationURLDetails sets the "misconfiguration_url_details" field.
func (muo *MisconfigurationUpdateOne) SetMisconfigurationURLDetails(s string) *MisconfigurationUpdateOne {
	muo.mutation.SetMisconfigurationURLDetails(s)
	return muo
}

// SetNillableMisconfigurationURLDetails sets the "misconfiguration_url_details" field if the given value is not nil.
func (muo *MisconfigurationUpdateOne) SetNillableMisconfigurationURLDetails(s *string) *MisconfigurationUpdateOne {
	if s != nil {
		muo.SetMisconfigurationURLDetails(*s)
	}
	return muo
}

// SetTitle sets the "title" field.
func (muo *MisconfigurationUpdateOne) SetTitle(s string) *MisconfigurationUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MisconfigurationUpdateOne) SetNillableTitle(s *string) *MisconfigurationUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetSeverity sets the "severity" field.
func (muo *MisconfigurationUpdateOne) SetSeverity(m misconfiguration.Severity) *MisconfigurationUpdateOne {
	muo.mutation.SetSeverity(m)
	return muo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (muo *MisconfigurationUpdateOne) SetNillableSeverity(m *misconfiguration.Severity) *MisconfigurationUpdateOne {
	if m != nil {
		muo.SetSeverity(*m)
	}
	return muo
}

// AddManifestMisconfigurationIDs adds the "manifest_misconfigurations" edge to the ManifestMisconfiguration entity by IDs.
func (muo *MisconfigurationUpdateOne) AddManifestMisconfigurationIDs(ids ...int) *MisconfigurationUpdateOne {
	muo.mutation.AddManifestMisconfigurationIDs(ids...)
	return muo
}

// AddManifestMisconfigurations adds the "manifest_misconfigurations" edges to the ManifestMisconfiguration entity.
func (muo *MisconfigurationUpdateOne) AddManifestMisconfigurations(m ...*ManifestMisconfiguration) *MisconfigurationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddManifestMisconfigurationIDs(ids...)
}

// Mutation returns the MisconfigurationMutation object of the builder.
func (muo *MisconfigurationUpdateOne) Mutation() *MisconfigurationMutation {
	return muo.mutation
}

// ClearManifestMisconfigurations clears all "manifest_misconfigurations" edges to the ManifestMisconfiguration entity.
func (muo *MisconfigurationUpdateOne) ClearManifestMisconfigurations() *MisconfigurationUpdateOne {
	muo.mutation.ClearManifestMisconfigurations()
	return muo
}

// RemoveManifestMisconfigurationIDs removes the "manifest_misconfigurations" edge to ManifestMisconfiguration entities by IDs.
func (muo *MisconfigurationUpdateOne) RemoveManifestMisconfigurationIDs(ids ...int) *MisconfigurationUpdateOne {
	muo.mutation.RemoveManifestMisconfigurationIDs(ids...)
	return muo
}

// RemoveManifestMisconfigurations removes "manifest_misconfigurations" edges to ManifestMisconfiguration entities.
func (muo *MisconfigurationUpdateOne) RemoveManifestMisconfigurations(m ...*ManifestMisconfiguration) *MisconfigurationUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveManifestMisconfigurationIDs(ids...)
}

// Where appends a list predicates to the MisconfigurationUpdate builder.
func (muo *MisconfigurationUpdateOne) Where(ps ...predicate.Misconfiguration) *MisconfigurationUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MisconfigurationUpdateOne) Select(field string, fields ...string) *MisconfigurationUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Misconfiguration entity.
func (muo *MisconfigurationUpdateOne) Save(ctx context.Context) (*Misconfiguration, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MisconfigurationUpdateOne) SaveX(ctx context.Context) *Misconfiguration {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MisconfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MisconfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MisconfigurationUpdateOne) check() error {
	if v, ok := muo.mutation.Severity(); ok {
		if err := misconfiguration.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Misconfiguration.severity": %w`, err)}
		}
	}
	return nil
}

func (muo *MisconfigurationUpdateOne) sqlSave(ctx context.Context) (_node *Misconfiguration, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(misconfiguration.Table, misconfiguration.Columns, sqlgraph.NewFieldSpec(misconfiguration.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Misconfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, misconfiguration.FieldID)
		for _, f := range fields {
			if !misconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != misconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MisconfigurationID(); ok {
		_spec.SetField(misconfiguration.FieldMisconfigurationID, field.TypeString, value)
	}
	if value, ok := muo.mutation.MisconfigurationURLDetails(); ok {
		_spec.SetField(misconfiguration.FieldMisconfigurationURLDetails, field.TypeString, value)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(misconfiguration.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Severity(); ok {
		_spec.SetField(misconfiguration.FieldSeverity, field.TypeEnum, value)
	}
	if muo.mutation.ManifestMisconfigurationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedManifestMisconfigurationsIDs(); len(nodes) > 0 && !muo.mutation.ManifestMisconfigurationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ManifestMisconfigurationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   misconfiguration.ManifestMisconfigurationsTable,
			Columns: []string{misconfiguration.ManifestMisconfigurationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestmisconfiguration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Misconfiguration{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{misconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
