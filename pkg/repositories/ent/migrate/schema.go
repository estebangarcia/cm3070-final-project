// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BlobChunksColumns holds the columns for the "blob_chunks" table.
	BlobChunksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "upload_id", Type: field.TypeString},
		{Name: "session_id", Type: field.TypeString},
		{Name: "range_from", Type: field.TypeUint64},
		{Name: "range_to", Type: field.TypeUint64},
		{Name: "part_number", Type: field.TypeUint64},
	}
	// BlobChunksTable holds the schema information for the "blob_chunks" table.
	BlobChunksTable = &schema.Table{
		Name:       "blob_chunks",
		Columns:    BlobChunksColumns,
		PrimaryKey: []*schema.Column{BlobChunksColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "blobchunk_upload_id_session_id_part_number",
				Unique:  true,
				Columns: []*schema.Column{BlobChunksColumns[1], BlobChunksColumns[2], BlobChunksColumns[5]},
			},
			{
				Name:    "blobchunk_upload_id",
				Unique:  false,
				Columns: []*schema.Column{BlobChunksColumns[1]},
			},
			{
				Name:    "blobchunk_session_id",
				Unique:  false,
				Columns: []*schema.Column{BlobChunksColumns[2]},
			},
		},
	}
	// ManifestsColumns holds the columns for the "manifests" table.
	ManifestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "media_type", Type: field.TypeString},
		{Name: "artifact_type", Type: field.TypeString, Nullable: true},
		{Name: "s3_path", Type: field.TypeString},
		{Name: "digest", Type: field.TypeString},
		{Name: "repository_manifests", Type: field.TypeInt, Nullable: true},
	}
	// ManifestsTable holds the schema information for the "manifests" table.
	ManifestsTable = &schema.Table{
		Name:       "manifests",
		Columns:    ManifestsColumns,
		PrimaryKey: []*schema.Column{ManifestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "manifests_repositories_manifests",
				Columns:    []*schema.Column{ManifestsColumns[5]},
				RefColumns: []*schema.Column{RepositoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ManifestLayersColumns holds the columns for the "manifest_layers" table.
	ManifestLayersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "media_type", Type: field.TypeString},
		{Name: "digest", Type: field.TypeString},
		{Name: "size", Type: field.TypeInt32},
		{Name: "annotations", Type: field.TypeJSON},
		{Name: "manifest_manifest_layers", Type: field.TypeInt, Nullable: true},
	}
	// ManifestLayersTable holds the schema information for the "manifest_layers" table.
	ManifestLayersTable = &schema.Table{
		Name:       "manifest_layers",
		Columns:    ManifestLayersColumns,
		PrimaryKey: []*schema.Column{ManifestLayersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "manifest_layers_manifests_manifest_layers",
				Columns:    []*schema.Column{ManifestLayersColumns[5]},
				RefColumns: []*schema.Column{ManifestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "manifestlayer_digest_manifest_manifest_layers",
				Unique:  true,
				Columns: []*schema.Column{ManifestLayersColumns[2], ManifestLayersColumns[5]},
			},
		},
	}
	// ManifestTagReferencesColumns holds the columns for the "manifest_tag_references" table.
	ManifestTagReferencesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "tag", Type: field.TypeString},
		{Name: "manifest_tag_reference_manifests", Type: field.TypeInt, Nullable: true},
	}
	// ManifestTagReferencesTable holds the schema information for the "manifest_tag_references" table.
	ManifestTagReferencesTable = &schema.Table{
		Name:       "manifest_tag_references",
		Columns:    ManifestTagReferencesColumns,
		PrimaryKey: []*schema.Column{ManifestTagReferencesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "manifest_tag_references_manifests_manifests",
				Columns:    []*schema.Column{ManifestTagReferencesColumns[2]},
				RefColumns: []*schema.Column{ManifestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "is_personal", Type: field.TypeBool},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "organization_slug",
				Unique:  true,
				Columns: []*schema.Column{OrganizationsColumns[2]},
			},
		},
	}
	// OrganizationMembershipsColumns holds the columns for the "organization_memberships" table.
	OrganizationMembershipsColumns = []*schema.Column{
		{Name: "role", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "organization_id", Type: field.TypeInt},
	}
	// OrganizationMembershipsTable holds the schema information for the "organization_memberships" table.
	OrganizationMembershipsTable = &schema.Table{
		Name:       "organization_memberships",
		Columns:    OrganizationMembershipsColumns,
		PrimaryKey: []*schema.Column{OrganizationMembershipsColumns[1], OrganizationMembershipsColumns[2]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organization_memberships_users_user",
				Columns:    []*schema.Column{OrganizationMembershipsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "organization_memberships_organizations_organization",
				Columns:    []*schema.Column{OrganizationMembershipsColumns[2]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RegistriesColumns holds the columns for the "registries" table.
	RegistriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "organization_registries", Type: field.TypeInt, Nullable: true},
	}
	// RegistriesTable holds the schema information for the "registries" table.
	RegistriesTable = &schema.Table{
		Name:       "registries",
		Columns:    RegistriesColumns,
		PrimaryKey: []*schema.Column{RegistriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "registries_organizations_registries",
				Columns:    []*schema.Column{RegistriesColumns[3]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "registry_slug_organization_registries",
				Unique:  true,
				Columns: []*schema.Column{RegistriesColumns[2], RegistriesColumns[3]},
			},
		},
	}
	// RepositoriesColumns holds the columns for the "repositories" table.
	RepositoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "registry_repositories", Type: field.TypeInt, Nullable: true},
	}
	// RepositoriesTable holds the schema information for the "repositories" table.
	RepositoriesTable = &schema.Table{
		Name:       "repositories",
		Columns:    RepositoriesColumns,
		PrimaryKey: []*schema.Column{RepositoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "repositories_registries_repositories",
				Columns:    []*schema.Column{RepositoriesColumns[2]},
				RefColumns: []*schema.Column{RegistriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "repository_name_registry_repositories",
				Unique:  true,
				Columns: []*schema.Column{RepositoriesColumns[1], RepositoriesColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "given_name", Type: field.TypeString},
		{Name: "family_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "sub", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_sub",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[4]},
			},
		},
	}
	// ManifestSubjectColumns holds the columns for the "manifest_subject" table.
	ManifestSubjectColumns = []*schema.Column{
		{Name: "manifest_id", Type: field.TypeInt},
		{Name: "referer_id", Type: field.TypeInt},
	}
	// ManifestSubjectTable holds the schema information for the "manifest_subject" table.
	ManifestSubjectTable = &schema.Table{
		Name:       "manifest_subject",
		Columns:    ManifestSubjectColumns,
		PrimaryKey: []*schema.Column{ManifestSubjectColumns[0], ManifestSubjectColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "manifest_subject_manifest_id",
				Columns:    []*schema.Column{ManifestSubjectColumns[0]},
				RefColumns: []*schema.Column{ManifestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "manifest_subject_referer_id",
				Columns:    []*schema.Column{ManifestSubjectColumns[1]},
				RefColumns: []*schema.Column{ManifestsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BlobChunksTable,
		ManifestsTable,
		ManifestLayersTable,
		ManifestTagReferencesTable,
		OrganizationsTable,
		OrganizationMembershipsTable,
		RegistriesTable,
		RepositoriesTable,
		UsersTable,
		ManifestSubjectTable,
	}
)

func init() {
	ManifestsTable.ForeignKeys[0].RefTable = RepositoriesTable
	ManifestLayersTable.ForeignKeys[0].RefTable = ManifestsTable
	ManifestTagReferencesTable.ForeignKeys[0].RefTable = ManifestsTable
	OrganizationMembershipsTable.ForeignKeys[0].RefTable = UsersTable
	OrganizationMembershipsTable.ForeignKeys[1].RefTable = OrganizationsTable
	RegistriesTable.ForeignKeys[0].RefTable = OrganizationsTable
	RepositoriesTable.ForeignKeys[0].RefTable = RegistriesTable
	ManifestSubjectTable.ForeignKeys[0].RefTable = ManifestsTable
	ManifestSubjectTable.ForeignKeys[1].RefTable = ManifestsTable
}
