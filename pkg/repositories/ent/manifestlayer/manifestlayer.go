// Code generated by ent, DO NOT EDIT.

package manifestlayer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the manifestlayer type in the database.
	Label = "manifest_layer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldAnnotations holds the string denoting the annotations field in the database.
	FieldAnnotations = "annotations"
	// EdgeManifest holds the string denoting the manifest edge name in mutations.
	EdgeManifest = "manifest"
	// Table holds the table name of the manifestlayer in the database.
	Table = "manifest_layers"
	// ManifestTable is the table that holds the manifest relation/edge.
	ManifestTable = "manifest_layers"
	// ManifestInverseTable is the table name for the Manifest entity.
	// It exists in this package in order to avoid circular dependency with the "manifest" package.
	ManifestInverseTable = "manifests"
	// ManifestColumn is the table column denoting the manifest relation/edge.
	ManifestColumn = "manifest_manifest_layers"
)

// Columns holds all SQL columns for manifestlayer fields.
var Columns = []string{
	FieldID,
	FieldMediaType,
	FieldDigest,
	FieldSize,
	FieldAnnotations,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "manifest_layers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"manifest_manifest_layers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ManifestLayer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMediaType orders the results by the media_type field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByManifestField orders the results by manifest field.
func ByManifestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManifestStep(), sql.OrderByField(field, opts...))
	}
}
func newManifestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManifestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ManifestTable, ManifestColumn),
	)
}
