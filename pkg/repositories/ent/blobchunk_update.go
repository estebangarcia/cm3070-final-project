// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// BlobChunkUpdate is the builder for updating BlobChunk entities.
type BlobChunkUpdate struct {
	config
	hooks    []Hook
	mutation *BlobChunkMutation
}

// Where appends a list predicates to the BlobChunkUpdate builder.
func (bcu *BlobChunkUpdate) Where(ps ...predicate.BlobChunk) *BlobChunkUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUploadID sets the "upload_id" field.
func (bcu *BlobChunkUpdate) SetUploadID(s string) *BlobChunkUpdate {
	bcu.mutation.SetUploadID(s)
	return bcu
}

// SetNillableUploadID sets the "upload_id" field if the given value is not nil.
func (bcu *BlobChunkUpdate) SetNillableUploadID(s *string) *BlobChunkUpdate {
	if s != nil {
		bcu.SetUploadID(*s)
	}
	return bcu
}

// SetSessionID sets the "session_id" field.
func (bcu *BlobChunkUpdate) SetSessionID(s string) *BlobChunkUpdate {
	bcu.mutation.SetSessionID(s)
	return bcu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (bcu *BlobChunkUpdate) SetNillableSessionID(s *string) *BlobChunkUpdate {
	if s != nil {
		bcu.SetSessionID(*s)
	}
	return bcu
}

// SetRangeFrom sets the "range_from" field.
func (bcu *BlobChunkUpdate) SetRangeFrom(u uint64) *BlobChunkUpdate {
	bcu.mutation.ResetRangeFrom()
	bcu.mutation.SetRangeFrom(u)
	return bcu
}

// SetNillableRangeFrom sets the "range_from" field if the given value is not nil.
func (bcu *BlobChunkUpdate) SetNillableRangeFrom(u *uint64) *BlobChunkUpdate {
	if u != nil {
		bcu.SetRangeFrom(*u)
	}
	return bcu
}

// AddRangeFrom adds u to the "range_from" field.
func (bcu *BlobChunkUpdate) AddRangeFrom(u int64) *BlobChunkUpdate {
	bcu.mutation.AddRangeFrom(u)
	return bcu
}

// SetRangeTo sets the "range_to" field.
func (bcu *BlobChunkUpdate) SetRangeTo(u uint64) *BlobChunkUpdate {
	bcu.mutation.ResetRangeTo()
	bcu.mutation.SetRangeTo(u)
	return bcu
}

// SetNillableRangeTo sets the "range_to" field if the given value is not nil.
func (bcu *BlobChunkUpdate) SetNillableRangeTo(u *uint64) *BlobChunkUpdate {
	if u != nil {
		bcu.SetRangeTo(*u)
	}
	return bcu
}

// AddRangeTo adds u to the "range_to" field.
func (bcu *BlobChunkUpdate) AddRangeTo(u int64) *BlobChunkUpdate {
	bcu.mutation.AddRangeTo(u)
	return bcu
}

// SetPartNumber sets the "part_number" field.
func (bcu *BlobChunkUpdate) SetPartNumber(u uint64) *BlobChunkUpdate {
	bcu.mutation.ResetPartNumber()
	bcu.mutation.SetPartNumber(u)
	return bcu
}

// SetNillablePartNumber sets the "part_number" field if the given value is not nil.
func (bcu *BlobChunkUpdate) SetNillablePartNumber(u *uint64) *BlobChunkUpdate {
	if u != nil {
		bcu.SetPartNumber(*u)
	}
	return bcu
}

// AddPartNumber adds u to the "part_number" field.
func (bcu *BlobChunkUpdate) AddPartNumber(u int64) *BlobChunkUpdate {
	bcu.mutation.AddPartNumber(u)
	return bcu
}

// Mutation returns the BlobChunkMutation object of the builder.
func (bcu *BlobChunkUpdate) Mutation() *BlobChunkMutation {
	return bcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlobChunkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlobChunkUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlobChunkUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlobChunkUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bcu *BlobChunkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(blobchunk.Table, blobchunk.Columns, sqlgraph.NewFieldSpec(blobchunk.FieldID, field.TypeInt))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UploadID(); ok {
		_spec.SetField(blobchunk.FieldUploadID, field.TypeString, value)
	}
	if value, ok := bcu.mutation.SessionID(); ok {
		_spec.SetField(blobchunk.FieldSessionID, field.TypeString, value)
	}
	if value, ok := bcu.mutation.RangeFrom(); ok {
		_spec.SetField(blobchunk.FieldRangeFrom, field.TypeUint64, value)
	}
	if value, ok := bcu.mutation.AddedRangeFrom(); ok {
		_spec.AddField(blobchunk.FieldRangeFrom, field.TypeUint64, value)
	}
	if value, ok := bcu.mutation.RangeTo(); ok {
		_spec.SetField(blobchunk.FieldRangeTo, field.TypeUint64, value)
	}
	if value, ok := bcu.mutation.AddedRangeTo(); ok {
		_spec.AddField(blobchunk.FieldRangeTo, field.TypeUint64, value)
	}
	if value, ok := bcu.mutation.PartNumber(); ok {
		_spec.SetField(blobchunk.FieldPartNumber, field.TypeUint64, value)
	}
	if value, ok := bcu.mutation.AddedPartNumber(); ok {
		_spec.AddField(blobchunk.FieldPartNumber, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blobchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BlobChunkUpdateOne is the builder for updating a single BlobChunk entity.
type BlobChunkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlobChunkMutation
}

// SetUploadID sets the "upload_id" field.
func (bcuo *BlobChunkUpdateOne) SetUploadID(s string) *BlobChunkUpdateOne {
	bcuo.mutation.SetUploadID(s)
	return bcuo
}

// SetNillableUploadID sets the "upload_id" field if the given value is not nil.
func (bcuo *BlobChunkUpdateOne) SetNillableUploadID(s *string) *BlobChunkUpdateOne {
	if s != nil {
		bcuo.SetUploadID(*s)
	}
	return bcuo
}

// SetSessionID sets the "session_id" field.
func (bcuo *BlobChunkUpdateOne) SetSessionID(s string) *BlobChunkUpdateOne {
	bcuo.mutation.SetSessionID(s)
	return bcuo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (bcuo *BlobChunkUpdateOne) SetNillableSessionID(s *string) *BlobChunkUpdateOne {
	if s != nil {
		bcuo.SetSessionID(*s)
	}
	return bcuo
}

// SetRangeFrom sets the "range_from" field.
func (bcuo *BlobChunkUpdateOne) SetRangeFrom(u uint64) *BlobChunkUpdateOne {
	bcuo.mutation.ResetRangeFrom()
	bcuo.mutation.SetRangeFrom(u)
	return bcuo
}

// SetNillableRangeFrom sets the "range_from" field if the given value is not nil.
func (bcuo *BlobChunkUpdateOne) SetNillableRangeFrom(u *uint64) *BlobChunkUpdateOne {
	if u != nil {
		bcuo.SetRangeFrom(*u)
	}
	return bcuo
}

// AddRangeFrom adds u to the "range_from" field.
func (bcuo *BlobChunkUpdateOne) AddRangeFrom(u int64) *BlobChunkUpdateOne {
	bcuo.mutation.AddRangeFrom(u)
	return bcuo
}

// SetRangeTo sets the "range_to" field.
func (bcuo *BlobChunkUpdateOne) SetRangeTo(u uint64) *BlobChunkUpdateOne {
	bcuo.mutation.ResetRangeTo()
	bcuo.mutation.SetRangeTo(u)
	return bcuo
}

// SetNillableRangeTo sets the "range_to" field if the given value is not nil.
func (bcuo *BlobChunkUpdateOne) SetNillableRangeTo(u *uint64) *BlobChunkUpdateOne {
	if u != nil {
		bcuo.SetRangeTo(*u)
	}
	return bcuo
}

// AddRangeTo adds u to the "range_to" field.
func (bcuo *BlobChunkUpdateOne) AddRangeTo(u int64) *BlobChunkUpdateOne {
	bcuo.mutation.AddRangeTo(u)
	return bcuo
}

// SetPartNumber sets the "part_number" field.
func (bcuo *BlobChunkUpdateOne) SetPartNumber(u uint64) *BlobChunkUpdateOne {
	bcuo.mutation.ResetPartNumber()
	bcuo.mutation.SetPartNumber(u)
	return bcuo
}

// SetNillablePartNumber sets the "part_number" field if the given value is not nil.
func (bcuo *BlobChunkUpdateOne) SetNillablePartNumber(u *uint64) *BlobChunkUpdateOne {
	if u != nil {
		bcuo.SetPartNumber(*u)
	}
	return bcuo
}

// AddPartNumber adds u to the "part_number" field.
func (bcuo *BlobChunkUpdateOne) AddPartNumber(u int64) *BlobChunkUpdateOne {
	bcuo.mutation.AddPartNumber(u)
	return bcuo
}

// Mutation returns the BlobChunkMutation object of the builder.
func (bcuo *BlobChunkUpdateOne) Mutation() *BlobChunkMutation {
	return bcuo.mutation
}

// Where appends a list predicates to the BlobChunkUpdate builder.
func (bcuo *BlobChunkUpdateOne) Where(ps ...predicate.BlobChunk) *BlobChunkUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlobChunkUpdateOne) Select(field string, fields ...string) *BlobChunkUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlobChunk entity.
func (bcuo *BlobChunkUpdateOne) Save(ctx context.Context) (*BlobChunk, error) {
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlobChunkUpdateOne) SaveX(ctx context.Context) *BlobChunk {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlobChunkUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlobChunkUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bcuo *BlobChunkUpdateOne) sqlSave(ctx context.Context) (_node *BlobChunk, err error) {
	_spec := sqlgraph.NewUpdateSpec(blobchunk.Table, blobchunk.Columns, sqlgraph.NewFieldSpec(blobchunk.FieldID, field.TypeInt))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlobChunk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blobchunk.FieldID)
		for _, f := range fields {
			if !blobchunk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blobchunk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UploadID(); ok {
		_spec.SetField(blobchunk.FieldUploadID, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.SessionID(); ok {
		_spec.SetField(blobchunk.FieldSessionID, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.RangeFrom(); ok {
		_spec.SetField(blobchunk.FieldRangeFrom, field.TypeUint64, value)
	}
	if value, ok := bcuo.mutation.AddedRangeFrom(); ok {
		_spec.AddField(blobchunk.FieldRangeFrom, field.TypeUint64, value)
	}
	if value, ok := bcuo.mutation.RangeTo(); ok {
		_spec.SetField(blobchunk.FieldRangeTo, field.TypeUint64, value)
	}
	if value, ok := bcuo.mutation.AddedRangeTo(); ok {
		_spec.AddField(blobchunk.FieldRangeTo, field.TypeUint64, value)
	}
	if value, ok := bcuo.mutation.PartNumber(); ok {
		_spec.SetField(blobchunk.FieldPartNumber, field.TypeUint64, value)
	}
	if value, ok := bcuo.mutation.AddedPartNumber(); ok {
		_spec.AddField(blobchunk.FieldPartNumber, field.TypeUint64, value)
	}
	_node = &BlobChunk{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blobchunk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
