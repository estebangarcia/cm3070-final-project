// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationinvite"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

// OrganizationInviteUpdate is the builder for updating OrganizationInvite entities.
type OrganizationInviteUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationInviteMutation
}

// Where appends a list predicates to the OrganizationInviteUpdate builder.
func (oiu *OrganizationInviteUpdate) Where(ps ...predicate.OrganizationInvite) *OrganizationInviteUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetInviteID sets the "invite_id" field.
func (oiu *OrganizationInviteUpdate) SetInviteID(s string) *OrganizationInviteUpdate {
	oiu.mutation.SetInviteID(s)
	return oiu
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableInviteID(s *string) *OrganizationInviteUpdate {
	if s != nil {
		oiu.SetInviteID(*s)
	}
	return oiu
}

// SetOrganizationID sets the "organization_id" field.
func (oiu *OrganizationInviteUpdate) SetOrganizationID(i int) *OrganizationInviteUpdate {
	oiu.mutation.SetOrganizationID(i)
	return oiu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableOrganizationID(i *int) *OrganizationInviteUpdate {
	if i != nil {
		oiu.SetOrganizationID(*i)
	}
	return oiu
}

// SetUserID sets the "user_id" field.
func (oiu *OrganizationInviteUpdate) SetUserID(i int) *OrganizationInviteUpdate {
	oiu.mutation.SetUserID(i)
	return oiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableUserID(i *int) *OrganizationInviteUpdate {
	if i != nil {
		oiu.SetUserID(*i)
	}
	return oiu
}

// ClearUserID clears the value of the "user_id" field.
func (oiu *OrganizationInviteUpdate) ClearUserID() *OrganizationInviteUpdate {
	oiu.mutation.ClearUserID()
	return oiu
}

// SetEmail sets the "email" field.
func (oiu *OrganizationInviteUpdate) SetEmail(s string) *OrganizationInviteUpdate {
	oiu.mutation.SetEmail(s)
	return oiu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableEmail(s *string) *OrganizationInviteUpdate {
	if s != nil {
		oiu.SetEmail(*s)
	}
	return oiu
}

// ClearEmail clears the value of the "email" field.
func (oiu *OrganizationInviteUpdate) ClearEmail() *OrganizationInviteUpdate {
	oiu.mutation.ClearEmail()
	return oiu
}

// SetRole sets the "role" field.
func (oiu *OrganizationInviteUpdate) SetRole(o organizationinvite.Role) *OrganizationInviteUpdate {
	oiu.mutation.SetRole(o)
	return oiu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableRole(o *organizationinvite.Role) *OrganizationInviteUpdate {
	if o != nil {
		oiu.SetRole(*o)
	}
	return oiu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oiu *OrganizationInviteUpdate) SetOrganization(o *Organization) *OrganizationInviteUpdate {
	return oiu.SetOrganizationID(o.ID)
}

// SetInviteeID sets the "invitee" edge to the User entity by ID.
func (oiu *OrganizationInviteUpdate) SetInviteeID(id int) *OrganizationInviteUpdate {
	oiu.mutation.SetInviteeID(id)
	return oiu
}

// SetNillableInviteeID sets the "invitee" edge to the User entity by ID if the given value is not nil.
func (oiu *OrganizationInviteUpdate) SetNillableInviteeID(id *int) *OrganizationInviteUpdate {
	if id != nil {
		oiu = oiu.SetInviteeID(*id)
	}
	return oiu
}

// SetInvitee sets the "invitee" edge to the User entity.
func (oiu *OrganizationInviteUpdate) SetInvitee(u *User) *OrganizationInviteUpdate {
	return oiu.SetInviteeID(u.ID)
}

// Mutation returns the OrganizationInviteMutation object of the builder.
func (oiu *OrganizationInviteUpdate) Mutation() *OrganizationInviteMutation {
	return oiu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oiu *OrganizationInviteUpdate) ClearOrganization() *OrganizationInviteUpdate {
	oiu.mutation.ClearOrganization()
	return oiu
}

// ClearInvitee clears the "invitee" edge to the User entity.
func (oiu *OrganizationInviteUpdate) ClearInvitee() *OrganizationInviteUpdate {
	oiu.mutation.ClearInvitee()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrganizationInviteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrganizationInviteUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrganizationInviteUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrganizationInviteUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrganizationInviteUpdate) check() error {
	if v, ok := oiu.mutation.Role(); ok {
		if err := organizationinvite.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrganizationInvite.role": %w`, err)}
		}
	}
	if oiu.mutation.OrganizationCleared() && len(oiu.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationInvite.organization"`)
	}
	return nil
}

func (oiu *OrganizationInviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationinvite.Table, organizationinvite.Columns, sqlgraph.NewFieldSpec(organizationinvite.FieldID, field.TypeInt))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.InviteID(); ok {
		_spec.SetField(organizationinvite.FieldInviteID, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Email(); ok {
		_spec.SetField(organizationinvite.FieldEmail, field.TypeString, value)
	}
	if oiu.mutation.EmailCleared() {
		_spec.ClearField(organizationinvite.FieldEmail, field.TypeString)
	}
	if value, ok := oiu.mutation.Role(); ok {
		_spec.SetField(organizationinvite.FieldRole, field.TypeEnum, value)
	}
	if oiu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.OrganizationTable,
			Columns: []string{organizationinvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.OrganizationTable,
			Columns: []string{organizationinvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.InviteeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.InviteeTable,
			Columns: []string{organizationinvite.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.InviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.InviteeTable,
			Columns: []string{organizationinvite.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrganizationInviteUpdateOne is the builder for updating a single OrganizationInvite entity.
type OrganizationInviteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationInviteMutation
}

// SetInviteID sets the "invite_id" field.
func (oiuo *OrganizationInviteUpdateOne) SetInviteID(s string) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetInviteID(s)
	return oiuo
}

// SetNillableInviteID sets the "invite_id" field if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableInviteID(s *string) *OrganizationInviteUpdateOne {
	if s != nil {
		oiuo.SetInviteID(*s)
	}
	return oiuo
}

// SetOrganizationID sets the "organization_id" field.
func (oiuo *OrganizationInviteUpdateOne) SetOrganizationID(i int) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetOrganizationID(i)
	return oiuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableOrganizationID(i *int) *OrganizationInviteUpdateOne {
	if i != nil {
		oiuo.SetOrganizationID(*i)
	}
	return oiuo
}

// SetUserID sets the "user_id" field.
func (oiuo *OrganizationInviteUpdateOne) SetUserID(i int) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetUserID(i)
	return oiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableUserID(i *int) *OrganizationInviteUpdateOne {
	if i != nil {
		oiuo.SetUserID(*i)
	}
	return oiuo
}

// ClearUserID clears the value of the "user_id" field.
func (oiuo *OrganizationInviteUpdateOne) ClearUserID() *OrganizationInviteUpdateOne {
	oiuo.mutation.ClearUserID()
	return oiuo
}

// SetEmail sets the "email" field.
func (oiuo *OrganizationInviteUpdateOne) SetEmail(s string) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetEmail(s)
	return oiuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableEmail(s *string) *OrganizationInviteUpdateOne {
	if s != nil {
		oiuo.SetEmail(*s)
	}
	return oiuo
}

// ClearEmail clears the value of the "email" field.
func (oiuo *OrganizationInviteUpdateOne) ClearEmail() *OrganizationInviteUpdateOne {
	oiuo.mutation.ClearEmail()
	return oiuo
}

// SetRole sets the "role" field.
func (oiuo *OrganizationInviteUpdateOne) SetRole(o organizationinvite.Role) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetRole(o)
	return oiuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableRole(o *organizationinvite.Role) *OrganizationInviteUpdateOne {
	if o != nil {
		oiuo.SetRole(*o)
	}
	return oiuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oiuo *OrganizationInviteUpdateOne) SetOrganization(o *Organization) *OrganizationInviteUpdateOne {
	return oiuo.SetOrganizationID(o.ID)
}

// SetInviteeID sets the "invitee" edge to the User entity by ID.
func (oiuo *OrganizationInviteUpdateOne) SetInviteeID(id int) *OrganizationInviteUpdateOne {
	oiuo.mutation.SetInviteeID(id)
	return oiuo
}

// SetNillableInviteeID sets the "invitee" edge to the User entity by ID if the given value is not nil.
func (oiuo *OrganizationInviteUpdateOne) SetNillableInviteeID(id *int) *OrganizationInviteUpdateOne {
	if id != nil {
		oiuo = oiuo.SetInviteeID(*id)
	}
	return oiuo
}

// SetInvitee sets the "invitee" edge to the User entity.
func (oiuo *OrganizationInviteUpdateOne) SetInvitee(u *User) *OrganizationInviteUpdateOne {
	return oiuo.SetInviteeID(u.ID)
}

// Mutation returns the OrganizationInviteMutation object of the builder.
func (oiuo *OrganizationInviteUpdateOne) Mutation() *OrganizationInviteMutation {
	return oiuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oiuo *OrganizationInviteUpdateOne) ClearOrganization() *OrganizationInviteUpdateOne {
	oiuo.mutation.ClearOrganization()
	return oiuo
}

// ClearInvitee clears the "invitee" edge to the User entity.
func (oiuo *OrganizationInviteUpdateOne) ClearInvitee() *OrganizationInviteUpdateOne {
	oiuo.mutation.ClearInvitee()
	return oiuo
}

// Where appends a list predicates to the OrganizationInviteUpdate builder.
func (oiuo *OrganizationInviteUpdateOne) Where(ps ...predicate.OrganizationInvite) *OrganizationInviteUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrganizationInviteUpdateOne) Select(field string, fields ...string) *OrganizationInviteUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrganizationInvite entity.
func (oiuo *OrganizationInviteUpdateOne) Save(ctx context.Context) (*OrganizationInvite, error) {
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrganizationInviteUpdateOne) SaveX(ctx context.Context) *OrganizationInvite {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrganizationInviteUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrganizationInviteUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrganizationInviteUpdateOne) check() error {
	if v, ok := oiuo.mutation.Role(); ok {
		if err := organizationinvite.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "OrganizationInvite.role": %w`, err)}
		}
	}
	if oiuo.mutation.OrganizationCleared() && len(oiuo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrganizationInvite.organization"`)
	}
	return nil
}

func (oiuo *OrganizationInviteUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationInvite, err error) {
	if err := oiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationinvite.Table, organizationinvite.Columns, sqlgraph.NewFieldSpec(organizationinvite.FieldID, field.TypeInt))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrganizationInvite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationinvite.FieldID)
		for _, f := range fields {
			if !organizationinvite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organizationinvite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.InviteID(); ok {
		_spec.SetField(organizationinvite.FieldInviteID, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Email(); ok {
		_spec.SetField(organizationinvite.FieldEmail, field.TypeString, value)
	}
	if oiuo.mutation.EmailCleared() {
		_spec.ClearField(organizationinvite.FieldEmail, field.TypeString)
	}
	if value, ok := oiuo.mutation.Role(); ok {
		_spec.SetField(organizationinvite.FieldRole, field.TypeEnum, value)
	}
	if oiuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.OrganizationTable,
			Columns: []string{organizationinvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.OrganizationTable,
			Columns: []string{organizationinvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.InviteeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.InviteeTable,
			Columns: []string{organizationinvite.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.InviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organizationinvite.InviteeTable,
			Columns: []string{organizationinvite.InviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrganizationInvite{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
