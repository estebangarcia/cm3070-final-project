// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/vulnerability"
)

// VulnerabilityCreate is the builder for creating a Vulnerability entity.
type VulnerabilityCreate struct {
	config
	mutation *VulnerabilityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vc *VulnerabilityCreate) SetVulnerabilityID(s string) *VulnerabilityCreate {
	vc.mutation.SetVulnerabilityID(s)
	return vc
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (vc *VulnerabilityCreate) SetVulnerabilityURLDetails(s string) *VulnerabilityCreate {
	vc.mutation.SetVulnerabilityURLDetails(s)
	return vc
}

// SetPackageName sets the "package_name" field.
func (vc *VulnerabilityCreate) SetPackageName(s string) *VulnerabilityCreate {
	vc.mutation.SetPackageName(s)
	return vc
}

// SetInstalledVersion sets the "installed_version" field.
func (vc *VulnerabilityCreate) SetInstalledVersion(s string) *VulnerabilityCreate {
	vc.mutation.SetInstalledVersion(s)
	return vc
}

// SetFixedVersion sets the "fixed_version" field.
func (vc *VulnerabilityCreate) SetFixedVersion(s string) *VulnerabilityCreate {
	vc.mutation.SetFixedVersion(s)
	return vc
}

// SetStatus sets the "status" field.
func (vc *VulnerabilityCreate) SetStatus(v vulnerability.Status) *VulnerabilityCreate {
	vc.mutation.SetStatus(v)
	return vc
}

// SetTitle sets the "title" field.
func (vc *VulnerabilityCreate) SetTitle(s string) *VulnerabilityCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetSeverity sets the "severity" field.
func (vc *VulnerabilityCreate) SetSeverity(v vulnerability.Severity) *VulnerabilityCreate {
	vc.mutation.SetSeverity(v)
	return vc
}

// SetV3Score sets the "v3_score" field.
func (vc *VulnerabilityCreate) SetV3Score(s string) *VulnerabilityCreate {
	vc.mutation.SetV3Score(s)
	return vc
}

// AddManifestIDs adds the "manifests" edge to the Manifest entity by IDs.
func (vc *VulnerabilityCreate) AddManifestIDs(ids ...int) *VulnerabilityCreate {
	vc.mutation.AddManifestIDs(ids...)
	return vc
}

// AddManifests adds the "manifests" edges to the Manifest entity.
func (vc *VulnerabilityCreate) AddManifests(m ...*Manifest) *VulnerabilityCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddManifestIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vc *VulnerabilityCreate) Mutation() *VulnerabilityMutation {
	return vc.mutation
}

// Save creates the Vulnerability in the database.
func (vc *VulnerabilityCreate) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VulnerabilityCreate) SaveX(ctx context.Context) *Vulnerability {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VulnerabilityCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VulnerabilityCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VulnerabilityCreate) check() error {
	if _, ok := vc.mutation.VulnerabilityID(); !ok {
		return &ValidationError{Name: "vulnerability_id", err: errors.New(`ent: missing required field "Vulnerability.vulnerability_id"`)}
	}
	if _, ok := vc.mutation.VulnerabilityURLDetails(); !ok {
		return &ValidationError{Name: "vulnerability_url_details", err: errors.New(`ent: missing required field "Vulnerability.vulnerability_url_details"`)}
	}
	if _, ok := vc.mutation.PackageName(); !ok {
		return &ValidationError{Name: "package_name", err: errors.New(`ent: missing required field "Vulnerability.package_name"`)}
	}
	if _, ok := vc.mutation.InstalledVersion(); !ok {
		return &ValidationError{Name: "installed_version", err: errors.New(`ent: missing required field "Vulnerability.installed_version"`)}
	}
	if _, ok := vc.mutation.FixedVersion(); !ok {
		return &ValidationError{Name: "fixed_version", err: errors.New(`ent: missing required field "Vulnerability.fixed_version"`)}
	}
	if _, ok := vc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Vulnerability.status"`)}
	}
	if v, ok := vc.mutation.Status(); ok {
		if err := vulnerability.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.status": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Vulnerability.title"`)}
	}
	if _, ok := vc.mutation.Severity(); !ok {
		return &ValidationError{Name: "severity", err: errors.New(`ent: missing required field "Vulnerability.severity"`)}
	}
	if v, ok := vc.mutation.Severity(); ok {
		if err := vulnerability.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.severity": %w`, err)}
		}
	}
	if _, ok := vc.mutation.V3Score(); !ok {
		return &ValidationError{Name: "v3_score", err: errors.New(`ent: missing required field "Vulnerability.v3_score"`)}
	}
	return nil
}

func (vc *VulnerabilityCreate) sqlSave(ctx context.Context) (*Vulnerability, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VulnerabilityCreate) createSpec() (*Vulnerability, *sqlgraph.CreateSpec) {
	var (
		_node = &Vulnerability{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vulnerability.Table, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityID, field.TypeString, value)
		_node.VulnerabilityID = value
	}
	if value, ok := vc.mutation.VulnerabilityURLDetails(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityURLDetails, field.TypeString, value)
		_node.VulnerabilityURLDetails = value
	}
	if value, ok := vc.mutation.PackageName(); ok {
		_spec.SetField(vulnerability.FieldPackageName, field.TypeString, value)
		_node.PackageName = value
	}
	if value, ok := vc.mutation.InstalledVersion(); ok {
		_spec.SetField(vulnerability.FieldInstalledVersion, field.TypeString, value)
		_node.InstalledVersion = value
	}
	if value, ok := vc.mutation.FixedVersion(); ok {
		_spec.SetField(vulnerability.FieldFixedVersion, field.TypeString, value)
		_node.FixedVersion = value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.SetField(vulnerability.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := vc.mutation.Title(); ok {
		_spec.SetField(vulnerability.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := vc.mutation.Severity(); ok {
		_spec.SetField(vulnerability.FieldSeverity, field.TypeEnum, value)
		_node.Severity = value
	}
	if value, ok := vc.mutation.V3Score(); ok {
		_spec.SetField(vulnerability.FieldV3Score, field.TypeString, value)
		_node.V3Score = value
	}
	if nodes := vc.mutation.ManifestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.Create().
//		SetVulnerabilityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertOne {
	vc.conflict = opts
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VulnerabilityCreate) OnConflictColumns(columns ...string) *VulnerabilityUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertOne{
		create: vc,
	}
}

type (
	// VulnerabilityUpsertOne is the builder for "upsert"-ing
	//  one Vulnerability node.
	VulnerabilityUpsertOne struct {
		create *VulnerabilityCreate
	}

	// VulnerabilityUpsert is the "OnConflict" setter.
	VulnerabilityUpsert struct {
		*sql.UpdateSet
	}
)

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsert) SetVulnerabilityID(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldVulnerabilityID, v)
	return u
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateVulnerabilityID() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldVulnerabilityID)
	return u
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (u *VulnerabilityUpsert) SetVulnerabilityURLDetails(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldVulnerabilityURLDetails, v)
	return u
}

// UpdateVulnerabilityURLDetails sets the "vulnerability_url_details" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateVulnerabilityURLDetails() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldVulnerabilityURLDetails)
	return u
}

// SetPackageName sets the "package_name" field.
func (u *VulnerabilityUpsert) SetPackageName(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldPackageName, v)
	return u
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdatePackageName() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldPackageName)
	return u
}

// SetInstalledVersion sets the "installed_version" field.
func (u *VulnerabilityUpsert) SetInstalledVersion(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldInstalledVersion, v)
	return u
}

// UpdateInstalledVersion sets the "installed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateInstalledVersion() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldInstalledVersion)
	return u
}

// SetFixedVersion sets the "fixed_version" field.
func (u *VulnerabilityUpsert) SetFixedVersion(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldFixedVersion, v)
	return u
}

// UpdateFixedVersion sets the "fixed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateFixedVersion() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldFixedVersion)
	return u
}

// SetStatus sets the "status" field.
func (u *VulnerabilityUpsert) SetStatus(v vulnerability.Status) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateStatus() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldStatus)
	return u
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsert) SetTitle(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateTitle() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldTitle)
	return u
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsert) SetSeverity(v vulnerability.Severity) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldSeverity, v)
	return u
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateSeverity() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldSeverity)
	return u
}

// SetV3Score sets the "v3_score" field.
func (u *VulnerabilityUpsert) SetV3Score(v string) *VulnerabilityUpsert {
	u.Set(vulnerability.FieldV3Score, v)
	return u
}

// UpdateV3Score sets the "v3_score" field to the value that was provided on create.
func (u *VulnerabilityUpsert) UpdateV3Score() *VulnerabilityUpsert {
	u.SetExcluded(vulnerability.FieldV3Score)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertOne) UpdateNewValues() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VulnerabilityUpsertOne) Ignore() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertOne) DoNothing() *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreate.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertOne) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsertOne) SetVulnerabilityID(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateVulnerabilityID() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (u *VulnerabilityUpsertOne) SetVulnerabilityURLDetails(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityURLDetails(v)
	})
}

// UpdateVulnerabilityURLDetails sets the "vulnerability_url_details" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateVulnerabilityURLDetails() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityURLDetails()
	})
}

// SetPackageName sets the "package_name" field.
func (u *VulnerabilityUpsertOne) SetPackageName(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdatePackageName() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdatePackageName()
	})
}

// SetInstalledVersion sets the "installed_version" field.
func (u *VulnerabilityUpsertOne) SetInstalledVersion(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetInstalledVersion(v)
	})
}

// UpdateInstalledVersion sets the "installed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateInstalledVersion() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateInstalledVersion()
	})
}

// SetFixedVersion sets the "fixed_version" field.
func (u *VulnerabilityUpsertOne) SetFixedVersion(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetFixedVersion(v)
	})
}

// UpdateFixedVersion sets the "fixed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateFixedVersion() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateFixedVersion()
	})
}

// SetStatus sets the "status" field.
func (u *VulnerabilityUpsertOne) SetStatus(v vulnerability.Status) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateStatus() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateStatus()
	})
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsertOne) SetTitle(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateTitle() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTitle()
	})
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsertOne) SetSeverity(v vulnerability.Severity) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateSeverity() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateSeverity()
	})
}

// SetV3Score sets the "v3_score" field.
func (u *VulnerabilityUpsertOne) SetV3Score(v string) *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetV3Score(v)
	})
}

// UpdateV3Score sets the "v3_score" field to the value that was provided on create.
func (u *VulnerabilityUpsertOne) UpdateV3Score() *VulnerabilityUpsertOne {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateV3Score()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VulnerabilityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VulnerabilityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VulnerabilityCreateBulk is the builder for creating many Vulnerability entities in bulk.
type VulnerabilityCreateBulk struct {
	config
	err      error
	builders []*VulnerabilityCreate
	conflict []sql.ConflictOption
}

// Save creates the Vulnerability entities in the database.
func (vcb *VulnerabilityCreateBulk) Save(ctx context.Context) ([]*Vulnerability, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vulnerability, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VulnerabilityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) SaveX(ctx context.Context) []*Vulnerability {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VulnerabilityCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VulnerabilityCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vulnerability.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VulnerabilityUpsert) {
//			SetVulnerabilityID(v+v).
//		}).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflict(opts ...sql.ConflictOption) *VulnerabilityUpsertBulk {
	vcb.conflict = opts
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VulnerabilityCreateBulk) OnConflictColumns(columns ...string) *VulnerabilityUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VulnerabilityUpsertBulk{
		create: vcb,
	}
}

// VulnerabilityUpsertBulk is the builder for "upsert"-ing
// a bulk of Vulnerability nodes.
type VulnerabilityUpsertBulk struct {
	create *VulnerabilityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) UpdateNewValues() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vulnerability.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VulnerabilityUpsertBulk) Ignore() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VulnerabilityUpsertBulk) DoNothing() *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VulnerabilityCreateBulk.OnConflict
// documentation for more info.
func (u *VulnerabilityUpsertBulk) Update(set func(*VulnerabilityUpsert)) *VulnerabilityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VulnerabilityUpsert{UpdateSet: update})
	}))
	return u
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (u *VulnerabilityUpsertBulk) SetVulnerabilityID(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityID(v)
	})
}

// UpdateVulnerabilityID sets the "vulnerability_id" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateVulnerabilityID() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityID()
	})
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (u *VulnerabilityUpsertBulk) SetVulnerabilityURLDetails(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetVulnerabilityURLDetails(v)
	})
}

// UpdateVulnerabilityURLDetails sets the "vulnerability_url_details" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateVulnerabilityURLDetails() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateVulnerabilityURLDetails()
	})
}

// SetPackageName sets the "package_name" field.
func (u *VulnerabilityUpsertBulk) SetPackageName(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdatePackageName() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdatePackageName()
	})
}

// SetInstalledVersion sets the "installed_version" field.
func (u *VulnerabilityUpsertBulk) SetInstalledVersion(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetInstalledVersion(v)
	})
}

// UpdateInstalledVersion sets the "installed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateInstalledVersion() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateInstalledVersion()
	})
}

// SetFixedVersion sets the "fixed_version" field.
func (u *VulnerabilityUpsertBulk) SetFixedVersion(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetFixedVersion(v)
	})
}

// UpdateFixedVersion sets the "fixed_version" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateFixedVersion() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateFixedVersion()
	})
}

// SetStatus sets the "status" field.
func (u *VulnerabilityUpsertBulk) SetStatus(v vulnerability.Status) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateStatus() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateStatus()
	})
}

// SetTitle sets the "title" field.
func (u *VulnerabilityUpsertBulk) SetTitle(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateTitle() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateTitle()
	})
}

// SetSeverity sets the "severity" field.
func (u *VulnerabilityUpsertBulk) SetSeverity(v vulnerability.Severity) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetSeverity(v)
	})
}

// UpdateSeverity sets the "severity" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateSeverity() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateSeverity()
	})
}

// SetV3Score sets the "v3_score" field.
func (u *VulnerabilityUpsertBulk) SetV3Score(v string) *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.SetV3Score(v)
	})
}

// UpdateV3Score sets the "v3_score" field to the value that was provided on create.
func (u *VulnerabilityUpsertBulk) UpdateV3Score() *VulnerabilityUpsertBulk {
	return u.Update(func(s *VulnerabilityUpsert) {
		s.UpdateV3Score()
	})
}

// Exec executes the query.
func (u *VulnerabilityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VulnerabilityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VulnerabilityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VulnerabilityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
