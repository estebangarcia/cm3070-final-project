// Code generated by ent, DO NOT EDIT.

package vulnerability

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the vulnerability type in the database.
	Label = "vulnerability"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVulnerabilityID holds the string denoting the vulnerability_id field in the database.
	FieldVulnerabilityID = "vulnerability_id"
	// FieldVulnerabilityURLDetails holds the string denoting the vulnerability_url_details field in the database.
	FieldVulnerabilityURLDetails = "vulnerability_url_details"
	// FieldInstalledVersion holds the string denoting the installed_version field in the database.
	FieldInstalledVersion = "installed_version"
	// FieldFixedVersion holds the string denoting the fixed_version field in the database.
	FieldFixedVersion = "fixed_version"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldV3Score holds the string denoting the v3_score field in the database.
	FieldV3Score = "v3_score"
	// EdgeManifests holds the string denoting the manifests edge name in mutations.
	EdgeManifests = "manifests"
	// Table holds the table name of the vulnerability in the database.
	Table = "vulnerabilities"
	// ManifestsTable is the table that holds the manifests relation/edge. The primary key declared below.
	ManifestsTable = "vulnerability_manifests"
	// ManifestsInverseTable is the table name for the Manifest entity.
	// It exists in this package in order to avoid circular dependency with the "manifest" package.
	ManifestsInverseTable = "manifests"
)

// Columns holds all SQL columns for vulnerability fields.
var Columns = []string{
	FieldID,
	FieldVulnerabilityID,
	FieldVulnerabilityURLDetails,
	FieldInstalledVersion,
	FieldFixedVersion,
	FieldStatus,
	FieldTitle,
	FieldSeverity,
	FieldV3Score,
}

var (
	// ManifestsPrimaryKey and ManifestsColumn2 are the table columns denoting the
	// primary key for the manifests relation (M2M).
	ManifestsPrimaryKey = []string{"vulnerability_id", "manifest_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusUnknown            Status = "unknown"
	StatusNotAffected        Status = "not_affected"
	StatusAffected           Status = "affected"
	StatusFixed              Status = "fixed"
	StatusUnderInvestigation Status = "under_investigation"
	StatusWillNotFix         Status = "will_not_fix"
	StatusFixDeferred        Status = "fix_deferred"
	StatusEndOfLife          Status = "end_of_life"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUnknown, StatusNotAffected, StatusAffected, StatusFixed, StatusUnderInvestigation, StatusWillNotFix, StatusFixDeferred, StatusEndOfLife:
		return nil
	default:
		return fmt.Errorf("vulnerability: invalid enum value for status field: %q", s)
	}
}

// Severity defines the type for the "severity" enum field.
type Severity string

// Severity values.
const (
	SeverityUNKNOWN  Severity = "UNKNOWN"
	SeverityLOW      Severity = "LOW"
	SeverityMEDIUM   Severity = "MEDIUM"
	SeverityHIGH     Severity = "HIGH"
	SeverityCRITICAL Severity = "CRITICAL"
)

func (s Severity) String() string {
	return string(s)
}

// SeverityValidator is a validator for the "severity" field enum values. It is called by the builders before save.
func SeverityValidator(s Severity) error {
	switch s {
	case SeverityUNKNOWN, SeverityLOW, SeverityMEDIUM, SeverityHIGH, SeverityCRITICAL:
		return nil
	default:
		return fmt.Errorf("vulnerability: invalid enum value for severity field: %q", s)
	}
}

// OrderOption defines the ordering options for the Vulnerability queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVulnerabilityID orders the results by the vulnerability_id field.
func ByVulnerabilityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityID, opts...).ToFunc()
}

// ByVulnerabilityURLDetails orders the results by the vulnerability_url_details field.
func ByVulnerabilityURLDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVulnerabilityURLDetails, opts...).ToFunc()
}

// ByInstalledVersion orders the results by the installed_version field.
func ByInstalledVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstalledVersion, opts...).ToFunc()
}

// ByFixedVersion orders the results by the fixed_version field.
func ByFixedVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedVersion, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySeverity orders the results by the severity field.
func BySeverity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeverity, opts...).ToFunc()
}

// ByV3Score orders the results by the v3_score field.
func ByV3Score(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV3Score, opts...).ToFunc()
}

// ByManifestsCount orders the results by manifests count.
func ByManifestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newManifestsStep(), opts...)
	}
}

// ByManifests orders the results by manifests terms.
func ByManifests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManifestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newManifestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManifestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ManifestsTable, ManifestsPrimaryKey...),
	)
}
