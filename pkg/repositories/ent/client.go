// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestmisconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organizationmembership"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/registry"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/vulnerability"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BlobChunk is the client for interacting with the BlobChunk builders.
	BlobChunk *BlobChunkClient
	// Manifest is the client for interacting with the Manifest builders.
	Manifest *ManifestClient
	// ManifestLayer is the client for interacting with the ManifestLayer builders.
	ManifestLayer *ManifestLayerClient
	// ManifestMisconfiguration is the client for interacting with the ManifestMisconfiguration builders.
	ManifestMisconfiguration *ManifestMisconfigurationClient
	// ManifestTagReference is the client for interacting with the ManifestTagReference builders.
	ManifestTagReference *ManifestTagReferenceClient
	// Misconfiguration is the client for interacting with the Misconfiguration builders.
	Misconfiguration *MisconfigurationClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationMembership is the client for interacting with the OrganizationMembership builders.
	OrganizationMembership *OrganizationMembershipClient
	// Registry is the client for interacting with the Registry builders.
	Registry *RegistryClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vulnerability is the client for interacting with the Vulnerability builders.
	Vulnerability *VulnerabilityClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BlobChunk = NewBlobChunkClient(c.config)
	c.Manifest = NewManifestClient(c.config)
	c.ManifestLayer = NewManifestLayerClient(c.config)
	c.ManifestMisconfiguration = NewManifestMisconfigurationClient(c.config)
	c.ManifestTagReference = NewManifestTagReferenceClient(c.config)
	c.Misconfiguration = NewMisconfigurationClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationMembership = NewOrganizationMembershipClient(c.config)
	c.Registry = NewRegistryClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vulnerability = NewVulnerabilityClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		BlobChunk:                NewBlobChunkClient(cfg),
		Manifest:                 NewManifestClient(cfg),
		ManifestLayer:            NewManifestLayerClient(cfg),
		ManifestMisconfiguration: NewManifestMisconfigurationClient(cfg),
		ManifestTagReference:     NewManifestTagReferenceClient(cfg),
		Misconfiguration:         NewMisconfigurationClient(cfg),
		Organization:             NewOrganizationClient(cfg),
		OrganizationMembership:   NewOrganizationMembershipClient(cfg),
		Registry:                 NewRegistryClient(cfg),
		Repository:               NewRepositoryClient(cfg),
		User:                     NewUserClient(cfg),
		Vulnerability:            NewVulnerabilityClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		BlobChunk:                NewBlobChunkClient(cfg),
		Manifest:                 NewManifestClient(cfg),
		ManifestLayer:            NewManifestLayerClient(cfg),
		ManifestMisconfiguration: NewManifestMisconfigurationClient(cfg),
		ManifestTagReference:     NewManifestTagReferenceClient(cfg),
		Misconfiguration:         NewMisconfigurationClient(cfg),
		Organization:             NewOrganizationClient(cfg),
		OrganizationMembership:   NewOrganizationMembershipClient(cfg),
		Registry:                 NewRegistryClient(cfg),
		Repository:               NewRepositoryClient(cfg),
		User:                     NewUserClient(cfg),
		Vulnerability:            NewVulnerabilityClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BlobChunk.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.BlobChunk, c.Manifest, c.ManifestLayer, c.ManifestMisconfiguration,
		c.ManifestTagReference, c.Misconfiguration, c.Organization,
		c.OrganizationMembership, c.Registry, c.Repository, c.User, c.Vulnerability,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.BlobChunk, c.Manifest, c.ManifestLayer, c.ManifestMisconfiguration,
		c.ManifestTagReference, c.Misconfiguration, c.Organization,
		c.OrganizationMembership, c.Registry, c.Repository, c.User, c.Vulnerability,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlobChunkMutation:
		return c.BlobChunk.mutate(ctx, m)
	case *ManifestMutation:
		return c.Manifest.mutate(ctx, m)
	case *ManifestLayerMutation:
		return c.ManifestLayer.mutate(ctx, m)
	case *ManifestMisconfigurationMutation:
		return c.ManifestMisconfiguration.mutate(ctx, m)
	case *ManifestTagReferenceMutation:
		return c.ManifestTagReference.mutate(ctx, m)
	case *MisconfigurationMutation:
		return c.Misconfiguration.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationMembershipMutation:
		return c.OrganizationMembership.mutate(ctx, m)
	case *RegistryMutation:
		return c.Registry.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VulnerabilityMutation:
		return c.Vulnerability.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlobChunkClient is a client for the BlobChunk schema.
type BlobChunkClient struct {
	config
}

// NewBlobChunkClient returns a client for the BlobChunk from the given config.
func NewBlobChunkClient(c config) *BlobChunkClient {
	return &BlobChunkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blobchunk.Hooks(f(g(h())))`.
func (c *BlobChunkClient) Use(hooks ...Hook) {
	c.hooks.BlobChunk = append(c.hooks.BlobChunk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blobchunk.Intercept(f(g(h())))`.
func (c *BlobChunkClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlobChunk = append(c.inters.BlobChunk, interceptors...)
}

// Create returns a builder for creating a BlobChunk entity.
func (c *BlobChunkClient) Create() *BlobChunkCreate {
	mutation := newBlobChunkMutation(c.config, OpCreate)
	return &BlobChunkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlobChunk entities.
func (c *BlobChunkClient) CreateBulk(builders ...*BlobChunkCreate) *BlobChunkCreateBulk {
	return &BlobChunkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlobChunkClient) MapCreateBulk(slice any, setFunc func(*BlobChunkCreate, int)) *BlobChunkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlobChunkCreateBulk{err: fmt.Errorf("calling to BlobChunkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlobChunkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlobChunkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlobChunk.
func (c *BlobChunkClient) Update() *BlobChunkUpdate {
	mutation := newBlobChunkMutation(c.config, OpUpdate)
	return &BlobChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlobChunkClient) UpdateOne(bc *BlobChunk) *BlobChunkUpdateOne {
	mutation := newBlobChunkMutation(c.config, OpUpdateOne, withBlobChunk(bc))
	return &BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlobChunkClient) UpdateOneID(id int) *BlobChunkUpdateOne {
	mutation := newBlobChunkMutation(c.config, OpUpdateOne, withBlobChunkID(id))
	return &BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlobChunk.
func (c *BlobChunkClient) Delete() *BlobChunkDelete {
	mutation := newBlobChunkMutation(c.config, OpDelete)
	return &BlobChunkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlobChunkClient) DeleteOne(bc *BlobChunk) *BlobChunkDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlobChunkClient) DeleteOneID(id int) *BlobChunkDeleteOne {
	builder := c.Delete().Where(blobchunk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlobChunkDeleteOne{builder}
}

// Query returns a query builder for BlobChunk.
func (c *BlobChunkClient) Query() *BlobChunkQuery {
	return &BlobChunkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlobChunk},
		inters: c.Interceptors(),
	}
}

// Get returns a BlobChunk entity by its id.
func (c *BlobChunkClient) Get(ctx context.Context, id int) (*BlobChunk, error) {
	return c.Query().Where(blobchunk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlobChunkClient) GetX(ctx context.Context, id int) *BlobChunk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlobChunkClient) Hooks() []Hook {
	return c.hooks.BlobChunk
}

// Interceptors returns the client interceptors.
func (c *BlobChunkClient) Interceptors() []Interceptor {
	return c.inters.BlobChunk
}

func (c *BlobChunkClient) mutate(ctx context.Context, m *BlobChunkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlobChunkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlobChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlobChunkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlobChunk mutation op: %q", m.Op())
	}
}

// ManifestClient is a client for the Manifest schema.
type ManifestClient struct {
	config
}

// NewManifestClient returns a client for the Manifest from the given config.
func NewManifestClient(c config) *ManifestClient {
	return &ManifestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifest.Hooks(f(g(h())))`.
func (c *ManifestClient) Use(hooks ...Hook) {
	c.hooks.Manifest = append(c.hooks.Manifest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifest.Intercept(f(g(h())))`.
func (c *ManifestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Manifest = append(c.inters.Manifest, interceptors...)
}

// Create returns a builder for creating a Manifest entity.
func (c *ManifestClient) Create() *ManifestCreate {
	mutation := newManifestMutation(c.config, OpCreate)
	return &ManifestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manifest entities.
func (c *ManifestClient) CreateBulk(builders ...*ManifestCreate) *ManifestCreateBulk {
	return &ManifestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestClient) MapCreateBulk(slice any, setFunc func(*ManifestCreate, int)) *ManifestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestCreateBulk{err: fmt.Errorf("calling to ManifestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manifest.
func (c *ManifestClient) Update() *ManifestUpdate {
	mutation := newManifestMutation(c.config, OpUpdate)
	return &ManifestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestClient) UpdateOne(m *Manifest) *ManifestUpdateOne {
	mutation := newManifestMutation(c.config, OpUpdateOne, withManifest(m))
	return &ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestClient) UpdateOneID(id int) *ManifestUpdateOne {
	mutation := newManifestMutation(c.config, OpUpdateOne, withManifestID(id))
	return &ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manifest.
func (c *ManifestClient) Delete() *ManifestDelete {
	mutation := newManifestMutation(c.config, OpDelete)
	return &ManifestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestClient) DeleteOne(m *Manifest) *ManifestDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestClient) DeleteOneID(id int) *ManifestDeleteOne {
	builder := c.Delete().Where(manifest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestDeleteOne{builder}
}

// Query returns a query builder for Manifest.
func (c *ManifestClient) Query() *ManifestQuery {
	return &ManifestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifest},
		inters: c.Interceptors(),
	}
}

// Get returns a Manifest entity by its id.
func (c *ManifestClient) Get(ctx context.Context, id int) (*Manifest, error) {
	return c.Query().Where(manifest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestClient) GetX(ctx context.Context, id int) *Manifest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Manifest.
func (c *ManifestClient) QueryTags(m *Manifest) *ManifestTagReferenceQuery {
	query := (&ManifestTagReferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(manifesttagreference.Table, manifesttagreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, manifest.TagsTable, manifest.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepository queries the repository edge of a Manifest.
func (c *ManifestClient) QueryRepository(m *Manifest) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manifest.RepositoryTable, manifest.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a Manifest.
func (c *ManifestClient) QuerySubject(m *Manifest) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, manifest.SubjectTable, manifest.SubjectPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferer queries the referer edge of a Manifest.
func (c *ManifestClient) QueryReferer(m *Manifest) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, manifest.RefererTable, manifest.RefererPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManifestLayers queries the manifest_layers edge of a Manifest.
func (c *ManifestClient) QueryManifestLayers(m *Manifest) *ManifestLayerQuery {
	query := (&ManifestLayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(manifestlayer.Table, manifestlayer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, manifest.ManifestLayersTable, manifest.ManifestLayersColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVulnerabilities queries the vulnerabilities edge of a Manifest.
func (c *ManifestClient) QueryVulnerabilities(m *Manifest) *VulnerabilityQuery {
	query := (&VulnerabilityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(vulnerability.Table, vulnerability.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, manifest.VulnerabilitiesTable, manifest.VulnerabilitiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestClient) Hooks() []Hook {
	return c.hooks.Manifest
}

// Interceptors returns the client interceptors.
func (c *ManifestClient) Interceptors() []Interceptor {
	return c.inters.Manifest
}

func (c *ManifestClient) mutate(ctx context.Context, m *ManifestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Manifest mutation op: %q", m.Op())
	}
}

// ManifestLayerClient is a client for the ManifestLayer schema.
type ManifestLayerClient struct {
	config
}

// NewManifestLayerClient returns a client for the ManifestLayer from the given config.
func NewManifestLayerClient(c config) *ManifestLayerClient {
	return &ManifestLayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifestlayer.Hooks(f(g(h())))`.
func (c *ManifestLayerClient) Use(hooks ...Hook) {
	c.hooks.ManifestLayer = append(c.hooks.ManifestLayer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifestlayer.Intercept(f(g(h())))`.
func (c *ManifestLayerClient) Intercept(interceptors ...Interceptor) {
	c.inters.ManifestLayer = append(c.inters.ManifestLayer, interceptors...)
}

// Create returns a builder for creating a ManifestLayer entity.
func (c *ManifestLayerClient) Create() *ManifestLayerCreate {
	mutation := newManifestLayerMutation(c.config, OpCreate)
	return &ManifestLayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ManifestLayer entities.
func (c *ManifestLayerClient) CreateBulk(builders ...*ManifestLayerCreate) *ManifestLayerCreateBulk {
	return &ManifestLayerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestLayerClient) MapCreateBulk(slice any, setFunc func(*ManifestLayerCreate, int)) *ManifestLayerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestLayerCreateBulk{err: fmt.Errorf("calling to ManifestLayerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestLayerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestLayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ManifestLayer.
func (c *ManifestLayerClient) Update() *ManifestLayerUpdate {
	mutation := newManifestLayerMutation(c.config, OpUpdate)
	return &ManifestLayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestLayerClient) UpdateOne(ml *ManifestLayer) *ManifestLayerUpdateOne {
	mutation := newManifestLayerMutation(c.config, OpUpdateOne, withManifestLayer(ml))
	return &ManifestLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestLayerClient) UpdateOneID(id int) *ManifestLayerUpdateOne {
	mutation := newManifestLayerMutation(c.config, OpUpdateOne, withManifestLayerID(id))
	return &ManifestLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ManifestLayer.
func (c *ManifestLayerClient) Delete() *ManifestLayerDelete {
	mutation := newManifestLayerMutation(c.config, OpDelete)
	return &ManifestLayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestLayerClient) DeleteOne(ml *ManifestLayer) *ManifestLayerDeleteOne {
	return c.DeleteOneID(ml.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestLayerClient) DeleteOneID(id int) *ManifestLayerDeleteOne {
	builder := c.Delete().Where(manifestlayer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestLayerDeleteOne{builder}
}

// Query returns a query builder for ManifestLayer.
func (c *ManifestLayerClient) Query() *ManifestLayerQuery {
	return &ManifestLayerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifestLayer},
		inters: c.Interceptors(),
	}
}

// Get returns a ManifestLayer entity by its id.
func (c *ManifestLayerClient) Get(ctx context.Context, id int) (*ManifestLayer, error) {
	return c.Query().Where(manifestlayer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestLayerClient) GetX(ctx context.Context, id int) *ManifestLayer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifest queries the manifest edge of a ManifestLayer.
func (c *ManifestLayerClient) QueryManifest(ml *ManifestLayer) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ml.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifestlayer.Table, manifestlayer.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manifestlayer.ManifestTable, manifestlayer.ManifestColumn),
		)
		fromV = sqlgraph.Neighbors(ml.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestLayerClient) Hooks() []Hook {
	return c.hooks.ManifestLayer
}

// Interceptors returns the client interceptors.
func (c *ManifestLayerClient) Interceptors() []Interceptor {
	return c.inters.ManifestLayer
}

func (c *ManifestLayerClient) mutate(ctx context.Context, m *ManifestLayerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestLayerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestLayerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestLayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestLayerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ManifestLayer mutation op: %q", m.Op())
	}
}

// ManifestMisconfigurationClient is a client for the ManifestMisconfiguration schema.
type ManifestMisconfigurationClient struct {
	config
}

// NewManifestMisconfigurationClient returns a client for the ManifestMisconfiguration from the given config.
func NewManifestMisconfigurationClient(c config) *ManifestMisconfigurationClient {
	return &ManifestMisconfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifestmisconfiguration.Hooks(f(g(h())))`.
func (c *ManifestMisconfigurationClient) Use(hooks ...Hook) {
	c.hooks.ManifestMisconfiguration = append(c.hooks.ManifestMisconfiguration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifestmisconfiguration.Intercept(f(g(h())))`.
func (c *ManifestMisconfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ManifestMisconfiguration = append(c.inters.ManifestMisconfiguration, interceptors...)
}

// Create returns a builder for creating a ManifestMisconfiguration entity.
func (c *ManifestMisconfigurationClient) Create() *ManifestMisconfigurationCreate {
	mutation := newManifestMisconfigurationMutation(c.config, OpCreate)
	return &ManifestMisconfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ManifestMisconfiguration entities.
func (c *ManifestMisconfigurationClient) CreateBulk(builders ...*ManifestMisconfigurationCreate) *ManifestMisconfigurationCreateBulk {
	return &ManifestMisconfigurationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestMisconfigurationClient) MapCreateBulk(slice any, setFunc func(*ManifestMisconfigurationCreate, int)) *ManifestMisconfigurationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestMisconfigurationCreateBulk{err: fmt.Errorf("calling to ManifestMisconfigurationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestMisconfigurationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestMisconfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ManifestMisconfiguration.
func (c *ManifestMisconfigurationClient) Update() *ManifestMisconfigurationUpdate {
	mutation := newManifestMisconfigurationMutation(c.config, OpUpdate)
	return &ManifestMisconfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestMisconfigurationClient) UpdateOne(mm *ManifestMisconfiguration) *ManifestMisconfigurationUpdateOne {
	mutation := newManifestMisconfigurationMutation(c.config, OpUpdateOne, withManifestMisconfiguration(mm))
	return &ManifestMisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestMisconfigurationClient) UpdateOneID(id int) *ManifestMisconfigurationUpdateOne {
	mutation := newManifestMisconfigurationMutation(c.config, OpUpdateOne, withManifestMisconfigurationID(id))
	return &ManifestMisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ManifestMisconfiguration.
func (c *ManifestMisconfigurationClient) Delete() *ManifestMisconfigurationDelete {
	mutation := newManifestMisconfigurationMutation(c.config, OpDelete)
	return &ManifestMisconfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestMisconfigurationClient) DeleteOne(mm *ManifestMisconfiguration) *ManifestMisconfigurationDeleteOne {
	return c.DeleteOneID(mm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestMisconfigurationClient) DeleteOneID(id int) *ManifestMisconfigurationDeleteOne {
	builder := c.Delete().Where(manifestmisconfiguration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestMisconfigurationDeleteOne{builder}
}

// Query returns a query builder for ManifestMisconfiguration.
func (c *ManifestMisconfigurationClient) Query() *ManifestMisconfigurationQuery {
	return &ManifestMisconfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifestMisconfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a ManifestMisconfiguration entity by its id.
func (c *ManifestMisconfigurationClient) Get(ctx context.Context, id int) (*ManifestMisconfiguration, error) {
	return c.Query().Where(manifestmisconfiguration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestMisconfigurationClient) GetX(ctx context.Context, id int) *ManifestMisconfiguration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMisconfiguration queries the misconfiguration edge of a ManifestMisconfiguration.
func (c *ManifestMisconfigurationClient) QueryMisconfiguration(mm *ManifestMisconfiguration) *MisconfigurationQuery {
	query := (&MisconfigurationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifestmisconfiguration.Table, manifestmisconfiguration.FieldID, id),
			sqlgraph.To(misconfiguration.Table, misconfiguration.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manifestmisconfiguration.MisconfigurationTable, manifestmisconfiguration.MisconfigurationColumn),
		)
		fromV = sqlgraph.Neighbors(mm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestMisconfigurationClient) Hooks() []Hook {
	return c.hooks.ManifestMisconfiguration
}

// Interceptors returns the client interceptors.
func (c *ManifestMisconfigurationClient) Interceptors() []Interceptor {
	return c.inters.ManifestMisconfiguration
}

func (c *ManifestMisconfigurationClient) mutate(ctx context.Context, m *ManifestMisconfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestMisconfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestMisconfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestMisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestMisconfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ManifestMisconfiguration mutation op: %q", m.Op())
	}
}

// ManifestTagReferenceClient is a client for the ManifestTagReference schema.
type ManifestTagReferenceClient struct {
	config
}

// NewManifestTagReferenceClient returns a client for the ManifestTagReference from the given config.
func NewManifestTagReferenceClient(c config) *ManifestTagReferenceClient {
	return &ManifestTagReferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifesttagreference.Hooks(f(g(h())))`.
func (c *ManifestTagReferenceClient) Use(hooks ...Hook) {
	c.hooks.ManifestTagReference = append(c.hooks.ManifestTagReference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifesttagreference.Intercept(f(g(h())))`.
func (c *ManifestTagReferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ManifestTagReference = append(c.inters.ManifestTagReference, interceptors...)
}

// Create returns a builder for creating a ManifestTagReference entity.
func (c *ManifestTagReferenceClient) Create() *ManifestTagReferenceCreate {
	mutation := newManifestTagReferenceMutation(c.config, OpCreate)
	return &ManifestTagReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ManifestTagReference entities.
func (c *ManifestTagReferenceClient) CreateBulk(builders ...*ManifestTagReferenceCreate) *ManifestTagReferenceCreateBulk {
	return &ManifestTagReferenceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestTagReferenceClient) MapCreateBulk(slice any, setFunc func(*ManifestTagReferenceCreate, int)) *ManifestTagReferenceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestTagReferenceCreateBulk{err: fmt.Errorf("calling to ManifestTagReferenceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestTagReferenceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestTagReferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Update() *ManifestTagReferenceUpdate {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdate)
	return &ManifestTagReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestTagReferenceClient) UpdateOne(mtr *ManifestTagReference) *ManifestTagReferenceUpdateOne {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdateOne, withManifestTagReference(mtr))
	return &ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestTagReferenceClient) UpdateOneID(id int) *ManifestTagReferenceUpdateOne {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdateOne, withManifestTagReferenceID(id))
	return &ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Delete() *ManifestTagReferenceDelete {
	mutation := newManifestTagReferenceMutation(c.config, OpDelete)
	return &ManifestTagReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestTagReferenceClient) DeleteOne(mtr *ManifestTagReference) *ManifestTagReferenceDeleteOne {
	return c.DeleteOneID(mtr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestTagReferenceClient) DeleteOneID(id int) *ManifestTagReferenceDeleteOne {
	builder := c.Delete().Where(manifesttagreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestTagReferenceDeleteOne{builder}
}

// Query returns a query builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Query() *ManifestTagReferenceQuery {
	return &ManifestTagReferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifestTagReference},
		inters: c.Interceptors(),
	}
}

// Get returns a ManifestTagReference entity by its id.
func (c *ManifestTagReferenceClient) Get(ctx context.Context, id int) (*ManifestTagReference, error) {
	return c.Query().Where(manifesttagreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestTagReferenceClient) GetX(ctx context.Context, id int) *ManifestTagReference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifests queries the manifests edge of a ManifestTagReference.
func (c *ManifestTagReferenceClient) QueryManifests(mtr *ManifestTagReference) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifesttagreference.Table, manifesttagreference.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, manifesttagreference.ManifestsTable, manifesttagreference.ManifestsColumn),
		)
		fromV = sqlgraph.Neighbors(mtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestTagReferenceClient) Hooks() []Hook {
	return c.hooks.ManifestTagReference
}

// Interceptors returns the client interceptors.
func (c *ManifestTagReferenceClient) Interceptors() []Interceptor {
	return c.inters.ManifestTagReference
}

func (c *ManifestTagReferenceClient) mutate(ctx context.Context, m *ManifestTagReferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestTagReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestTagReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestTagReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ManifestTagReference mutation op: %q", m.Op())
	}
}

// MisconfigurationClient is a client for the Misconfiguration schema.
type MisconfigurationClient struct {
	config
}

// NewMisconfigurationClient returns a client for the Misconfiguration from the given config.
func NewMisconfigurationClient(c config) *MisconfigurationClient {
	return &MisconfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `misconfiguration.Hooks(f(g(h())))`.
func (c *MisconfigurationClient) Use(hooks ...Hook) {
	c.hooks.Misconfiguration = append(c.hooks.Misconfiguration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `misconfiguration.Intercept(f(g(h())))`.
func (c *MisconfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Misconfiguration = append(c.inters.Misconfiguration, interceptors...)
}

// Create returns a builder for creating a Misconfiguration entity.
func (c *MisconfigurationClient) Create() *MisconfigurationCreate {
	mutation := newMisconfigurationMutation(c.config, OpCreate)
	return &MisconfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Misconfiguration entities.
func (c *MisconfigurationClient) CreateBulk(builders ...*MisconfigurationCreate) *MisconfigurationCreateBulk {
	return &MisconfigurationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MisconfigurationClient) MapCreateBulk(slice any, setFunc func(*MisconfigurationCreate, int)) *MisconfigurationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MisconfigurationCreateBulk{err: fmt.Errorf("calling to MisconfigurationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MisconfigurationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MisconfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Misconfiguration.
func (c *MisconfigurationClient) Update() *MisconfigurationUpdate {
	mutation := newMisconfigurationMutation(c.config, OpUpdate)
	return &MisconfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MisconfigurationClient) UpdateOne(m *Misconfiguration) *MisconfigurationUpdateOne {
	mutation := newMisconfigurationMutation(c.config, OpUpdateOne, withMisconfiguration(m))
	return &MisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MisconfigurationClient) UpdateOneID(id int) *MisconfigurationUpdateOne {
	mutation := newMisconfigurationMutation(c.config, OpUpdateOne, withMisconfigurationID(id))
	return &MisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Misconfiguration.
func (c *MisconfigurationClient) Delete() *MisconfigurationDelete {
	mutation := newMisconfigurationMutation(c.config, OpDelete)
	return &MisconfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MisconfigurationClient) DeleteOne(m *Misconfiguration) *MisconfigurationDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MisconfigurationClient) DeleteOneID(id int) *MisconfigurationDeleteOne {
	builder := c.Delete().Where(misconfiguration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MisconfigurationDeleteOne{builder}
}

// Query returns a query builder for Misconfiguration.
func (c *MisconfigurationClient) Query() *MisconfigurationQuery {
	return &MisconfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMisconfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a Misconfiguration entity by its id.
func (c *MisconfigurationClient) Get(ctx context.Context, id int) (*Misconfiguration, error) {
	return c.Query().Where(misconfiguration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MisconfigurationClient) GetX(ctx context.Context, id int) *Misconfiguration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifestMisconfigurations queries the manifest_misconfigurations edge of a Misconfiguration.
func (c *MisconfigurationClient) QueryManifestMisconfigurations(m *Misconfiguration) *ManifestMisconfigurationQuery {
	query := (&ManifestMisconfigurationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(misconfiguration.Table, misconfiguration.FieldID, id),
			sqlgraph.To(manifestmisconfiguration.Table, manifestmisconfiguration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, misconfiguration.ManifestMisconfigurationsTable, misconfiguration.ManifestMisconfigurationsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MisconfigurationClient) Hooks() []Hook {
	return c.hooks.Misconfiguration
}

// Interceptors returns the client interceptors.
func (c *MisconfigurationClient) Interceptors() []Interceptor {
	return c.inters.Misconfiguration
}

func (c *MisconfigurationClient) mutate(ctx context.Context, m *MisconfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MisconfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MisconfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MisconfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MisconfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Misconfiguration mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegistries queries the registries edge of a Organization.
func (c *OrganizationClient) QueryRegistries(o *Organization) *RegistryQuery {
	query := (&RegistryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(registry.Table, registry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.RegistriesTable, organization.RegistriesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a Organization.
func (c *OrganizationClient) QueryMembers(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, organization.MembersTable, organization.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrgMembers queries the org_members edge of a Organization.
func (c *OrganizationClient) QueryOrgMembers(o *Organization) *OrganizationMembershipQuery {
	query := (&OrganizationMembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationmembership.Table, organizationmembership.OrganizationColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.OrgMembersTable, organization.OrgMembersColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	return c.inters.Organization
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationMembershipClient is a client for the OrganizationMembership schema.
type OrganizationMembershipClient struct {
	config
}

// NewOrganizationMembershipClient returns a client for the OrganizationMembership from the given config.
func NewOrganizationMembershipClient(c config) *OrganizationMembershipClient {
	return &OrganizationMembershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationmembership.Hooks(f(g(h())))`.
func (c *OrganizationMembershipClient) Use(hooks ...Hook) {
	c.hooks.OrganizationMembership = append(c.hooks.OrganizationMembership, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationmembership.Intercept(f(g(h())))`.
func (c *OrganizationMembershipClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationMembership = append(c.inters.OrganizationMembership, interceptors...)
}

// Create returns a builder for creating a OrganizationMembership entity.
func (c *OrganizationMembershipClient) Create() *OrganizationMembershipCreate {
	mutation := newOrganizationMembershipMutation(c.config, OpCreate)
	return &OrganizationMembershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationMembership entities.
func (c *OrganizationMembershipClient) CreateBulk(builders ...*OrganizationMembershipCreate) *OrganizationMembershipCreateBulk {
	return &OrganizationMembershipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationMembershipClient) MapCreateBulk(slice any, setFunc func(*OrganizationMembershipCreate, int)) *OrganizationMembershipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationMembershipCreateBulk{err: fmt.Errorf("calling to OrganizationMembershipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationMembershipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationMembershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationMembership.
func (c *OrganizationMembershipClient) Update() *OrganizationMembershipUpdate {
	mutation := newOrganizationMembershipMutation(c.config, OpUpdate)
	return &OrganizationMembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationMembershipClient) UpdateOne(om *OrganizationMembership) *OrganizationMembershipUpdateOne {
	mutation := newOrganizationMembershipMutation(c.config, OpUpdateOne)
	mutation.user = &om.UserID
	mutation.organization = &om.OrganizationID
	return &OrganizationMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationMembership.
func (c *OrganizationMembershipClient) Delete() *OrganizationMembershipDelete {
	mutation := newOrganizationMembershipMutation(c.config, OpDelete)
	return &OrganizationMembershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for OrganizationMembership.
func (c *OrganizationMembershipClient) Query() *OrganizationMembershipQuery {
	return &OrganizationMembershipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationMembership},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a OrganizationMembership.
func (c *OrganizationMembershipClient) QueryUser(om *OrganizationMembership) *UserQuery {
	return c.Query().
		Where(organizationmembership.UserID(om.UserID), organizationmembership.OrganizationID(om.OrganizationID)).
		QueryUser()
}

// QueryOrganization queries the organization edge of a OrganizationMembership.
func (c *OrganizationMembershipClient) QueryOrganization(om *OrganizationMembership) *OrganizationQuery {
	return c.Query().
		Where(organizationmembership.UserID(om.UserID), organizationmembership.OrganizationID(om.OrganizationID)).
		QueryOrganization()
}

// Hooks returns the client hooks.
func (c *OrganizationMembershipClient) Hooks() []Hook {
	return c.hooks.OrganizationMembership
}

// Interceptors returns the client interceptors.
func (c *OrganizationMembershipClient) Interceptors() []Interceptor {
	return c.inters.OrganizationMembership
}

func (c *OrganizationMembershipClient) mutate(ctx context.Context, m *OrganizationMembershipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationMembershipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationMembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationMembershipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrganizationMembership mutation op: %q", m.Op())
	}
}

// RegistryClient is a client for the Registry schema.
type RegistryClient struct {
	config
}

// NewRegistryClient returns a client for the Registry from the given config.
func NewRegistryClient(c config) *RegistryClient {
	return &RegistryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registry.Hooks(f(g(h())))`.
func (c *RegistryClient) Use(hooks ...Hook) {
	c.hooks.Registry = append(c.hooks.Registry, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `registry.Intercept(f(g(h())))`.
func (c *RegistryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Registry = append(c.inters.Registry, interceptors...)
}

// Create returns a builder for creating a Registry entity.
func (c *RegistryClient) Create() *RegistryCreate {
	mutation := newRegistryMutation(c.config, OpCreate)
	return &RegistryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Registry entities.
func (c *RegistryClient) CreateBulk(builders ...*RegistryCreate) *RegistryCreateBulk {
	return &RegistryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RegistryClient) MapCreateBulk(slice any, setFunc func(*RegistryCreate, int)) *RegistryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RegistryCreateBulk{err: fmt.Errorf("calling to RegistryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RegistryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RegistryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Registry.
func (c *RegistryClient) Update() *RegistryUpdate {
	mutation := newRegistryMutation(c.config, OpUpdate)
	return &RegistryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegistryClient) UpdateOne(r *Registry) *RegistryUpdateOne {
	mutation := newRegistryMutation(c.config, OpUpdateOne, withRegistry(r))
	return &RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegistryClient) UpdateOneID(id int) *RegistryUpdateOne {
	mutation := newRegistryMutation(c.config, OpUpdateOne, withRegistryID(id))
	return &RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Registry.
func (c *RegistryClient) Delete() *RegistryDelete {
	mutation := newRegistryMutation(c.config, OpDelete)
	return &RegistryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegistryClient) DeleteOne(r *Registry) *RegistryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RegistryClient) DeleteOneID(id int) *RegistryDeleteOne {
	builder := c.Delete().Where(registry.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegistryDeleteOne{builder}
}

// Query returns a query builder for Registry.
func (c *RegistryClient) Query() *RegistryQuery {
	return &RegistryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRegistry},
		inters: c.Interceptors(),
	}
}

// Get returns a Registry entity by its id.
func (c *RegistryClient) Get(ctx context.Context, id int) (*Registry, error) {
	return c.Query().Where(registry.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegistryClient) GetX(ctx context.Context, id int) *Registry {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepositories queries the repositories edge of a Registry.
func (c *RegistryClient) QueryRepositories(r *Registry) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(registry.Table, registry.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, registry.RepositoriesTable, registry.RepositoriesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Registry.
func (c *RegistryClient) QueryOrganization(r *Registry) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(registry.Table, registry.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, registry.OrganizationTable, registry.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegistryClient) Hooks() []Hook {
	return c.hooks.Registry
}

// Interceptors returns the client interceptors.
func (c *RegistryClient) Interceptors() []Interceptor {
	return c.inters.Registry
}

func (c *RegistryClient) mutate(ctx context.Context, m *RegistryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RegistryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RegistryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RegistryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RegistryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Registry mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id int) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id int) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id int) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id int) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifests queries the manifests edge of a Repository.
func (c *RepositoryClient) QueryManifests(r *Repository) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.ManifestsTable, repository.ManifestsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegistry queries the registry edge of a Repository.
func (c *RepositoryClient) QueryRegistry(r *Repository) *RegistryQuery {
	query := (&RegistryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(registry.Table, registry.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, repository.RegistryTable, repository.RegistryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Repository mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizations queries the organizations edge of a User.
func (c *UserClient) QueryOrganizations(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.OrganizationsTable, user.OrganizationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJoinedOrganizations queries the joined_organizations edge of a User.
func (c *UserClient) QueryJoinedOrganizations(u *User) *OrganizationMembershipQuery {
	query := (&OrganizationMembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organizationmembership.Table, organizationmembership.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.JoinedOrganizationsTable, user.JoinedOrganizationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VulnerabilityClient is a client for the Vulnerability schema.
type VulnerabilityClient struct {
	config
}

// NewVulnerabilityClient returns a client for the Vulnerability from the given config.
func NewVulnerabilityClient(c config) *VulnerabilityClient {
	return &VulnerabilityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vulnerability.Hooks(f(g(h())))`.
func (c *VulnerabilityClient) Use(hooks ...Hook) {
	c.hooks.Vulnerability = append(c.hooks.Vulnerability, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `vulnerability.Intercept(f(g(h())))`.
func (c *VulnerabilityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Vulnerability = append(c.inters.Vulnerability, interceptors...)
}

// Create returns a builder for creating a Vulnerability entity.
func (c *VulnerabilityClient) Create() *VulnerabilityCreate {
	mutation := newVulnerabilityMutation(c.config, OpCreate)
	return &VulnerabilityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vulnerability entities.
func (c *VulnerabilityClient) CreateBulk(builders ...*VulnerabilityCreate) *VulnerabilityCreateBulk {
	return &VulnerabilityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VulnerabilityClient) MapCreateBulk(slice any, setFunc func(*VulnerabilityCreate, int)) *VulnerabilityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VulnerabilityCreateBulk{err: fmt.Errorf("calling to VulnerabilityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VulnerabilityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VulnerabilityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vulnerability.
func (c *VulnerabilityClient) Update() *VulnerabilityUpdate {
	mutation := newVulnerabilityMutation(c.config, OpUpdate)
	return &VulnerabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VulnerabilityClient) UpdateOne(v *Vulnerability) *VulnerabilityUpdateOne {
	mutation := newVulnerabilityMutation(c.config, OpUpdateOne, withVulnerability(v))
	return &VulnerabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VulnerabilityClient) UpdateOneID(id int) *VulnerabilityUpdateOne {
	mutation := newVulnerabilityMutation(c.config, OpUpdateOne, withVulnerabilityID(id))
	return &VulnerabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vulnerability.
func (c *VulnerabilityClient) Delete() *VulnerabilityDelete {
	mutation := newVulnerabilityMutation(c.config, OpDelete)
	return &VulnerabilityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VulnerabilityClient) DeleteOne(v *Vulnerability) *VulnerabilityDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VulnerabilityClient) DeleteOneID(id int) *VulnerabilityDeleteOne {
	builder := c.Delete().Where(vulnerability.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VulnerabilityDeleteOne{builder}
}

// Query returns a query builder for Vulnerability.
func (c *VulnerabilityClient) Query() *VulnerabilityQuery {
	return &VulnerabilityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVulnerability},
		inters: c.Interceptors(),
	}
}

// Get returns a Vulnerability entity by its id.
func (c *VulnerabilityClient) Get(ctx context.Context, id int) (*Vulnerability, error) {
	return c.Query().Where(vulnerability.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VulnerabilityClient) GetX(ctx context.Context, id int) *Vulnerability {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifests queries the manifests edge of a Vulnerability.
func (c *VulnerabilityClient) QueryManifests(v *Vulnerability) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vulnerability.Table, vulnerability.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vulnerability.ManifestsTable, vulnerability.ManifestsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VulnerabilityClient) Hooks() []Hook {
	return c.hooks.Vulnerability
}

// Interceptors returns the client interceptors.
func (c *VulnerabilityClient) Interceptors() []Interceptor {
	return c.inters.Vulnerability
}

func (c *VulnerabilityClient) mutate(ctx context.Context, m *VulnerabilityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VulnerabilityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VulnerabilityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VulnerabilityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VulnerabilityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Vulnerability mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BlobChunk, Manifest, ManifestLayer, ManifestMisconfiguration,
		ManifestTagReference, Misconfiguration, Organization, OrganizationMembership,
		Registry, Repository, User, Vulnerability []ent.Hook
	}
	inters struct {
		BlobChunk, Manifest, ManifestLayer, ManifestMisconfiguration,
		ManifestTagReference, Misconfiguration, Organization, OrganizationMembership,
		Registry, Repository, User, Vulnerability []ent.Interceptor
	}
)
