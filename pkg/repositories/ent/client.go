// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/blobchunk"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BlobChunk is the client for interacting with the BlobChunk builders.
	BlobChunk *BlobChunkClient
	// Manifest is the client for interacting with the Manifest builders.
	Manifest *ManifestClient
	// ManifestTagReference is the client for interacting with the ManifestTagReference builders.
	ManifestTagReference *ManifestTagReferenceClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BlobChunk = NewBlobChunkClient(c.config)
	c.Manifest = NewManifestClient(c.config)
	c.ManifestTagReference = NewManifestTagReferenceClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		BlobChunk:            NewBlobChunkClient(cfg),
		Manifest:             NewManifestClient(cfg),
		ManifestTagReference: NewManifestTagReferenceClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		BlobChunk:            NewBlobChunkClient(cfg),
		Manifest:             NewManifestClient(cfg),
		ManifestTagReference: NewManifestTagReferenceClient(cfg),
		Repository:           NewRepositoryClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BlobChunk.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BlobChunk.Use(hooks...)
	c.Manifest.Use(hooks...)
	c.ManifestTagReference.Use(hooks...)
	c.Repository.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.BlobChunk.Intercept(interceptors...)
	c.Manifest.Intercept(interceptors...)
	c.ManifestTagReference.Intercept(interceptors...)
	c.Repository.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BlobChunkMutation:
		return c.BlobChunk.mutate(ctx, m)
	case *ManifestMutation:
		return c.Manifest.mutate(ctx, m)
	case *ManifestTagReferenceMutation:
		return c.ManifestTagReference.mutate(ctx, m)
	case *RepositoryMutation:
		return c.Repository.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BlobChunkClient is a client for the BlobChunk schema.
type BlobChunkClient struct {
	config
}

// NewBlobChunkClient returns a client for the BlobChunk from the given config.
func NewBlobChunkClient(c config) *BlobChunkClient {
	return &BlobChunkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blobchunk.Hooks(f(g(h())))`.
func (c *BlobChunkClient) Use(hooks ...Hook) {
	c.hooks.BlobChunk = append(c.hooks.BlobChunk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blobchunk.Intercept(f(g(h())))`.
func (c *BlobChunkClient) Intercept(interceptors ...Interceptor) {
	c.inters.BlobChunk = append(c.inters.BlobChunk, interceptors...)
}

// Create returns a builder for creating a BlobChunk entity.
func (c *BlobChunkClient) Create() *BlobChunkCreate {
	mutation := newBlobChunkMutation(c.config, OpCreate)
	return &BlobChunkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlobChunk entities.
func (c *BlobChunkClient) CreateBulk(builders ...*BlobChunkCreate) *BlobChunkCreateBulk {
	return &BlobChunkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlobChunkClient) MapCreateBulk(slice any, setFunc func(*BlobChunkCreate, int)) *BlobChunkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlobChunkCreateBulk{err: fmt.Errorf("calling to BlobChunkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlobChunkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlobChunkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlobChunk.
func (c *BlobChunkClient) Update() *BlobChunkUpdate {
	mutation := newBlobChunkMutation(c.config, OpUpdate)
	return &BlobChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlobChunkClient) UpdateOne(bc *BlobChunk) *BlobChunkUpdateOne {
	mutation := newBlobChunkMutation(c.config, OpUpdateOne, withBlobChunk(bc))
	return &BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlobChunkClient) UpdateOneID(id int) *BlobChunkUpdateOne {
	mutation := newBlobChunkMutation(c.config, OpUpdateOne, withBlobChunkID(id))
	return &BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlobChunk.
func (c *BlobChunkClient) Delete() *BlobChunkDelete {
	mutation := newBlobChunkMutation(c.config, OpDelete)
	return &BlobChunkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlobChunkClient) DeleteOne(bc *BlobChunk) *BlobChunkDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlobChunkClient) DeleteOneID(id int) *BlobChunkDeleteOne {
	builder := c.Delete().Where(blobchunk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlobChunkDeleteOne{builder}
}

// Query returns a query builder for BlobChunk.
func (c *BlobChunkClient) Query() *BlobChunkQuery {
	return &BlobChunkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlobChunk},
		inters: c.Interceptors(),
	}
}

// Get returns a BlobChunk entity by its id.
func (c *BlobChunkClient) Get(ctx context.Context, id int) (*BlobChunk, error) {
	return c.Query().Where(blobchunk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlobChunkClient) GetX(ctx context.Context, id int) *BlobChunk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlobChunkClient) Hooks() []Hook {
	return c.hooks.BlobChunk
}

// Interceptors returns the client interceptors.
func (c *BlobChunkClient) Interceptors() []Interceptor {
	return c.inters.BlobChunk
}

func (c *BlobChunkClient) mutate(ctx context.Context, m *BlobChunkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlobChunkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlobChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlobChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlobChunkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BlobChunk mutation op: %q", m.Op())
	}
}

// ManifestClient is a client for the Manifest schema.
type ManifestClient struct {
	config
}

// NewManifestClient returns a client for the Manifest from the given config.
func NewManifestClient(c config) *ManifestClient {
	return &ManifestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifest.Hooks(f(g(h())))`.
func (c *ManifestClient) Use(hooks ...Hook) {
	c.hooks.Manifest = append(c.hooks.Manifest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifest.Intercept(f(g(h())))`.
func (c *ManifestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Manifest = append(c.inters.Manifest, interceptors...)
}

// Create returns a builder for creating a Manifest entity.
func (c *ManifestClient) Create() *ManifestCreate {
	mutation := newManifestMutation(c.config, OpCreate)
	return &ManifestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manifest entities.
func (c *ManifestClient) CreateBulk(builders ...*ManifestCreate) *ManifestCreateBulk {
	return &ManifestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestClient) MapCreateBulk(slice any, setFunc func(*ManifestCreate, int)) *ManifestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestCreateBulk{err: fmt.Errorf("calling to ManifestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manifest.
func (c *ManifestClient) Update() *ManifestUpdate {
	mutation := newManifestMutation(c.config, OpUpdate)
	return &ManifestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestClient) UpdateOne(m *Manifest) *ManifestUpdateOne {
	mutation := newManifestMutation(c.config, OpUpdateOne, withManifest(m))
	return &ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestClient) UpdateOneID(id int) *ManifestUpdateOne {
	mutation := newManifestMutation(c.config, OpUpdateOne, withManifestID(id))
	return &ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manifest.
func (c *ManifestClient) Delete() *ManifestDelete {
	mutation := newManifestMutation(c.config, OpDelete)
	return &ManifestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestClient) DeleteOne(m *Manifest) *ManifestDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestClient) DeleteOneID(id int) *ManifestDeleteOne {
	builder := c.Delete().Where(manifest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestDeleteOne{builder}
}

// Query returns a query builder for Manifest.
func (c *ManifestClient) Query() *ManifestQuery {
	return &ManifestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifest},
		inters: c.Interceptors(),
	}
}

// Get returns a Manifest entity by its id.
func (c *ManifestClient) Get(ctx context.Context, id int) (*Manifest, error) {
	return c.Query().Where(manifest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestClient) GetX(ctx context.Context, id int) *Manifest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Manifest.
func (c *ManifestClient) QueryTags(m *Manifest) *ManifestTagReferenceQuery {
	query := (&ManifestTagReferenceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(manifesttagreference.Table, manifesttagreference.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, manifest.TagsTable, manifest.TagsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepository queries the repository edge of a Manifest.
func (c *ManifestClient) QueryRepository(m *Manifest) *RepositoryQuery {
	query := (&RepositoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifest.Table, manifest.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manifest.RepositoryTable, manifest.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestClient) Hooks() []Hook {
	return c.hooks.Manifest
}

// Interceptors returns the client interceptors.
func (c *ManifestClient) Interceptors() []Interceptor {
	return c.inters.Manifest
}

func (c *ManifestClient) mutate(ctx context.Context, m *ManifestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Manifest mutation op: %q", m.Op())
	}
}

// ManifestTagReferenceClient is a client for the ManifestTagReference schema.
type ManifestTagReferenceClient struct {
	config
}

// NewManifestTagReferenceClient returns a client for the ManifestTagReference from the given config.
func NewManifestTagReferenceClient(c config) *ManifestTagReferenceClient {
	return &ManifestTagReferenceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manifesttagreference.Hooks(f(g(h())))`.
func (c *ManifestTagReferenceClient) Use(hooks ...Hook) {
	c.hooks.ManifestTagReference = append(c.hooks.ManifestTagReference, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manifesttagreference.Intercept(f(g(h())))`.
func (c *ManifestTagReferenceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ManifestTagReference = append(c.inters.ManifestTagReference, interceptors...)
}

// Create returns a builder for creating a ManifestTagReference entity.
func (c *ManifestTagReferenceClient) Create() *ManifestTagReferenceCreate {
	mutation := newManifestTagReferenceMutation(c.config, OpCreate)
	return &ManifestTagReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ManifestTagReference entities.
func (c *ManifestTagReferenceClient) CreateBulk(builders ...*ManifestTagReferenceCreate) *ManifestTagReferenceCreateBulk {
	return &ManifestTagReferenceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManifestTagReferenceClient) MapCreateBulk(slice any, setFunc func(*ManifestTagReferenceCreate, int)) *ManifestTagReferenceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManifestTagReferenceCreateBulk{err: fmt.Errorf("calling to ManifestTagReferenceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManifestTagReferenceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManifestTagReferenceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Update() *ManifestTagReferenceUpdate {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdate)
	return &ManifestTagReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManifestTagReferenceClient) UpdateOne(mtr *ManifestTagReference) *ManifestTagReferenceUpdateOne {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdateOne, withManifestTagReference(mtr))
	return &ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManifestTagReferenceClient) UpdateOneID(id int) *ManifestTagReferenceUpdateOne {
	mutation := newManifestTagReferenceMutation(c.config, OpUpdateOne, withManifestTagReferenceID(id))
	return &ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Delete() *ManifestTagReferenceDelete {
	mutation := newManifestTagReferenceMutation(c.config, OpDelete)
	return &ManifestTagReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManifestTagReferenceClient) DeleteOne(mtr *ManifestTagReference) *ManifestTagReferenceDeleteOne {
	return c.DeleteOneID(mtr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManifestTagReferenceClient) DeleteOneID(id int) *ManifestTagReferenceDeleteOne {
	builder := c.Delete().Where(manifesttagreference.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManifestTagReferenceDeleteOne{builder}
}

// Query returns a query builder for ManifestTagReference.
func (c *ManifestTagReferenceClient) Query() *ManifestTagReferenceQuery {
	return &ManifestTagReferenceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManifestTagReference},
		inters: c.Interceptors(),
	}
}

// Get returns a ManifestTagReference entity by its id.
func (c *ManifestTagReferenceClient) Get(ctx context.Context, id int) (*ManifestTagReference, error) {
	return c.Query().Where(manifesttagreference.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManifestTagReferenceClient) GetX(ctx context.Context, id int) *ManifestTagReference {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifests queries the manifests edge of a ManifestTagReference.
func (c *ManifestTagReferenceClient) QueryManifests(mtr *ManifestTagReference) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manifesttagreference.Table, manifesttagreference.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, manifesttagreference.ManifestsTable, manifesttagreference.ManifestsColumn),
		)
		fromV = sqlgraph.Neighbors(mtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManifestTagReferenceClient) Hooks() []Hook {
	return c.hooks.ManifestTagReference
}

// Interceptors returns the client interceptors.
func (c *ManifestTagReferenceClient) Interceptors() []Interceptor {
	return c.inters.ManifestTagReference
}

func (c *ManifestTagReferenceClient) mutate(ctx context.Context, m *ManifestTagReferenceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManifestTagReferenceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManifestTagReferenceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManifestTagReferenceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManifestTagReferenceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ManifestTagReference mutation op: %q", m.Op())
	}
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repository.Intercept(f(g(h())))`.
func (c *RepositoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Repository = append(c.inters.Repository, interceptors...)
}

// Create returns a builder for creating a Repository entity.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepositoryClient) MapCreateBulk(slice any, setFunc func(*RepositoryCreate, int)) *RepositoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepositoryCreateBulk{err: fmt.Errorf("calling to RepositoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepositoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id int) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepositoryClient) DeleteOneID(id int) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepository},
		inters: c.Interceptors(),
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id int) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id int) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManifests queries the manifests edge of a Repository.
func (c *RepositoryClient) QueryManifests(r *Repository) *ManifestQuery {
	query := (&ManifestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.ManifestsTable, repository.ManifestsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}

// Interceptors returns the client interceptors.
func (c *RepositoryClient) Interceptors() []Interceptor {
	return c.inters.Repository
}

func (c *RepositoryClient) mutate(ctx context.Context, m *RepositoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Repository mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BlobChunk, Manifest, ManifestTagReference, Repository, User []ent.Hook
	}
	inters struct {
		BlobChunk, Manifest, ManifestTagReference, Repository, User []ent.Interceptor
	}
)
