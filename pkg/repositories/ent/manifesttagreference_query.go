// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ManifestTagReferenceQuery is the builder for querying ManifestTagReference entities.
type ManifestTagReferenceQuery struct {
	config
	ctx           *QueryContext
	order         []manifesttagreference.OrderOption
	inters        []Interceptor
	predicates    []predicate.ManifestTagReference
	withManifests *ManifestQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ManifestTagReferenceQuery builder.
func (mtrq *ManifestTagReferenceQuery) Where(ps ...predicate.ManifestTagReference) *ManifestTagReferenceQuery {
	mtrq.predicates = append(mtrq.predicates, ps...)
	return mtrq
}

// Limit the number of records to be returned by this query.
func (mtrq *ManifestTagReferenceQuery) Limit(limit int) *ManifestTagReferenceQuery {
	mtrq.ctx.Limit = &limit
	return mtrq
}

// Offset to start from.
func (mtrq *ManifestTagReferenceQuery) Offset(offset int) *ManifestTagReferenceQuery {
	mtrq.ctx.Offset = &offset
	return mtrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mtrq *ManifestTagReferenceQuery) Unique(unique bool) *ManifestTagReferenceQuery {
	mtrq.ctx.Unique = &unique
	return mtrq
}

// Order specifies how the records should be ordered.
func (mtrq *ManifestTagReferenceQuery) Order(o ...manifesttagreference.OrderOption) *ManifestTagReferenceQuery {
	mtrq.order = append(mtrq.order, o...)
	return mtrq
}

// QueryManifests chains the current query on the "manifests" edge.
func (mtrq *ManifestTagReferenceQuery) QueryManifests() *ManifestQuery {
	query := (&ManifestClient{config: mtrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mtrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mtrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(manifesttagreference.Table, manifesttagreference.FieldID, selector),
			sqlgraph.To(manifest.Table, manifest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, manifesttagreference.ManifestsTable, manifesttagreference.ManifestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(mtrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ManifestTagReference entity from the query.
// Returns a *NotFoundError when no ManifestTagReference was found.
func (mtrq *ManifestTagReferenceQuery) First(ctx context.Context) (*ManifestTagReference, error) {
	nodes, err := mtrq.Limit(1).All(setContextOp(ctx, mtrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{manifesttagreference.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) FirstX(ctx context.Context) *ManifestTagReference {
	node, err := mtrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ManifestTagReference ID from the query.
// Returns a *NotFoundError when no ManifestTagReference ID was found.
func (mtrq *ManifestTagReferenceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mtrq.Limit(1).IDs(setContextOp(ctx, mtrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{manifesttagreference.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) FirstIDX(ctx context.Context) int {
	id, err := mtrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ManifestTagReference entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ManifestTagReference entity is found.
// Returns a *NotFoundError when no ManifestTagReference entities are found.
func (mtrq *ManifestTagReferenceQuery) Only(ctx context.Context) (*ManifestTagReference, error) {
	nodes, err := mtrq.Limit(2).All(setContextOp(ctx, mtrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{manifesttagreference.Label}
	default:
		return nil, &NotSingularError{manifesttagreference.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) OnlyX(ctx context.Context) *ManifestTagReference {
	node, err := mtrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ManifestTagReference ID in the query.
// Returns a *NotSingularError when more than one ManifestTagReference ID is found.
// Returns a *NotFoundError when no entities are found.
func (mtrq *ManifestTagReferenceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mtrq.Limit(2).IDs(setContextOp(ctx, mtrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{manifesttagreference.Label}
	default:
		err = &NotSingularError{manifesttagreference.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) OnlyIDX(ctx context.Context) int {
	id, err := mtrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ManifestTagReferences.
func (mtrq *ManifestTagReferenceQuery) All(ctx context.Context) ([]*ManifestTagReference, error) {
	ctx = setContextOp(ctx, mtrq.ctx, ent.OpQueryAll)
	if err := mtrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ManifestTagReference, *ManifestTagReferenceQuery]()
	return withInterceptors[[]*ManifestTagReference](ctx, mtrq, qr, mtrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) AllX(ctx context.Context) []*ManifestTagReference {
	nodes, err := mtrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ManifestTagReference IDs.
func (mtrq *ManifestTagReferenceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mtrq.ctx.Unique == nil && mtrq.path != nil {
		mtrq.Unique(true)
	}
	ctx = setContextOp(ctx, mtrq.ctx, ent.OpQueryIDs)
	if err = mtrq.Select(manifesttagreference.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) IDsX(ctx context.Context) []int {
	ids, err := mtrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mtrq *ManifestTagReferenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mtrq.ctx, ent.OpQueryCount)
	if err := mtrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mtrq, querierCount[*ManifestTagReferenceQuery](), mtrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) CountX(ctx context.Context) int {
	count, err := mtrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mtrq *ManifestTagReferenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mtrq.ctx, ent.OpQueryExist)
	switch _, err := mtrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mtrq *ManifestTagReferenceQuery) ExistX(ctx context.Context) bool {
	exist, err := mtrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ManifestTagReferenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mtrq *ManifestTagReferenceQuery) Clone() *ManifestTagReferenceQuery {
	if mtrq == nil {
		return nil
	}
	return &ManifestTagReferenceQuery{
		config:        mtrq.config,
		ctx:           mtrq.ctx.Clone(),
		order:         append([]manifesttagreference.OrderOption{}, mtrq.order...),
		inters:        append([]Interceptor{}, mtrq.inters...),
		predicates:    append([]predicate.ManifestTagReference{}, mtrq.predicates...),
		withManifests: mtrq.withManifests.Clone(),
		// clone intermediate query.
		sql:  mtrq.sql.Clone(),
		path: mtrq.path,
	}
}

// WithManifests tells the query-builder to eager-load the nodes that are connected to
// the "manifests" edge. The optional arguments are used to configure the query builder of the edge.
func (mtrq *ManifestTagReferenceQuery) WithManifests(opts ...func(*ManifestQuery)) *ManifestTagReferenceQuery {
	query := (&ManifestClient{config: mtrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mtrq.withManifests = query
	return mtrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Tag string `json:"tag,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ManifestTagReference.Query().
//		GroupBy(manifesttagreference.FieldTag).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mtrq *ManifestTagReferenceQuery) GroupBy(field string, fields ...string) *ManifestTagReferenceGroupBy {
	mtrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ManifestTagReferenceGroupBy{build: mtrq}
	grbuild.flds = &mtrq.ctx.Fields
	grbuild.label = manifesttagreference.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Tag string `json:"tag,omitempty"`
//	}
//
//	client.ManifestTagReference.Query().
//		Select(manifesttagreference.FieldTag).
//		Scan(ctx, &v)
func (mtrq *ManifestTagReferenceQuery) Select(fields ...string) *ManifestTagReferenceSelect {
	mtrq.ctx.Fields = append(mtrq.ctx.Fields, fields...)
	sbuild := &ManifestTagReferenceSelect{ManifestTagReferenceQuery: mtrq}
	sbuild.label = manifesttagreference.Label
	sbuild.flds, sbuild.scan = &mtrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ManifestTagReferenceSelect configured with the given aggregations.
func (mtrq *ManifestTagReferenceQuery) Aggregate(fns ...AggregateFunc) *ManifestTagReferenceSelect {
	return mtrq.Select().Aggregate(fns...)
}

func (mtrq *ManifestTagReferenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mtrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mtrq); err != nil {
				return err
			}
		}
	}
	for _, f := range mtrq.ctx.Fields {
		if !manifesttagreference.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mtrq.path != nil {
		prev, err := mtrq.path(ctx)
		if err != nil {
			return err
		}
		mtrq.sql = prev
	}
	return nil
}

func (mtrq *ManifestTagReferenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ManifestTagReference, error) {
	var (
		nodes       = []*ManifestTagReference{}
		withFKs     = mtrq.withFKs
		_spec       = mtrq.querySpec()
		loadedTypes = [1]bool{
			mtrq.withManifests != nil,
		}
	)
	if mtrq.withManifests != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, manifesttagreference.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ManifestTagReference).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ManifestTagReference{config: mtrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mtrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mtrq.withManifests; query != nil {
		if err := mtrq.loadManifests(ctx, query, nodes, nil,
			func(n *ManifestTagReference, e *Manifest) { n.Edges.Manifests = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mtrq *ManifestTagReferenceQuery) loadManifests(ctx context.Context, query *ManifestQuery, nodes []*ManifestTagReference, init func(*ManifestTagReference), assign func(*ManifestTagReference, *Manifest)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ManifestTagReference)
	for i := range nodes {
		if nodes[i].manifest_tag_reference_manifests == nil {
			continue
		}
		fk := *nodes[i].manifest_tag_reference_manifests
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(manifest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "manifest_tag_reference_manifests" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mtrq *ManifestTagReferenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mtrq.querySpec()
	_spec.Node.Columns = mtrq.ctx.Fields
	if len(mtrq.ctx.Fields) > 0 {
		_spec.Unique = mtrq.ctx.Unique != nil && *mtrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mtrq.driver, _spec)
}

func (mtrq *ManifestTagReferenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(manifesttagreference.Table, manifesttagreference.Columns, sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt))
	_spec.From = mtrq.sql
	if unique := mtrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mtrq.path != nil {
		_spec.Unique = true
	}
	if fields := mtrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manifesttagreference.FieldID)
		for i := range fields {
			if fields[i] != manifesttagreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mtrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mtrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mtrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mtrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mtrq *ManifestTagReferenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mtrq.driver.Dialect())
	t1 := builder.Table(manifesttagreference.Table)
	columns := mtrq.ctx.Fields
	if len(columns) == 0 {
		columns = manifesttagreference.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mtrq.sql != nil {
		selector = mtrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mtrq.ctx.Unique != nil && *mtrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mtrq.predicates {
		p(selector)
	}
	for _, p := range mtrq.order {
		p(selector)
	}
	if offset := mtrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mtrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ManifestTagReferenceGroupBy is the group-by builder for ManifestTagReference entities.
type ManifestTagReferenceGroupBy struct {
	selector
	build *ManifestTagReferenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mtrgb *ManifestTagReferenceGroupBy) Aggregate(fns ...AggregateFunc) *ManifestTagReferenceGroupBy {
	mtrgb.fns = append(mtrgb.fns, fns...)
	return mtrgb
}

// Scan applies the selector query and scans the result into the given value.
func (mtrgb *ManifestTagReferenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mtrgb.build.ctx, ent.OpQueryGroupBy)
	if err := mtrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ManifestTagReferenceQuery, *ManifestTagReferenceGroupBy](ctx, mtrgb.build, mtrgb, mtrgb.build.inters, v)
}

func (mtrgb *ManifestTagReferenceGroupBy) sqlScan(ctx context.Context, root *ManifestTagReferenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mtrgb.fns))
	for _, fn := range mtrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mtrgb.flds)+len(mtrgb.fns))
		for _, f := range *mtrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mtrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mtrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ManifestTagReferenceSelect is the builder for selecting fields of ManifestTagReference entities.
type ManifestTagReferenceSelect struct {
	*ManifestTagReferenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mtrs *ManifestTagReferenceSelect) Aggregate(fns ...AggregateFunc) *ManifestTagReferenceSelect {
	mtrs.fns = append(mtrs.fns, fns...)
	return mtrs
}

// Scan applies the selector query and scans the result into the given value.
func (mtrs *ManifestTagReferenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mtrs.ctx, ent.OpQuerySelect)
	if err := mtrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ManifestTagReferenceQuery, *ManifestTagReferenceSelect](ctx, mtrs.ManifestTagReferenceQuery, mtrs, mtrs.inters, v)
}

func (mtrs *ManifestTagReferenceSelect) sqlScan(ctx context.Context, root *ManifestTagReferenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mtrs.fns))
	for _, fn := range mtrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mtrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mtrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
