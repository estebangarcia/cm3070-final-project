// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestmisconfiguration"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
)

// ManifestMisconfiguration is the model entity for the ManifestMisconfiguration schema.
type ManifestMisconfiguration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TargetFile holds the value of the "target_file" field.
	TargetFile string `json:"target_file,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Resolution holds the value of the "resolution" field.
	Resolution string `json:"resolution,omitempty"`
	// ManifestID holds the value of the "manifest_id" field.
	ManifestID int `json:"manifest_id,omitempty"`
	// MisconfigurationID holds the value of the "misconfiguration_id" field.
	MisconfigurationID int `json:"misconfiguration_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ManifestMisconfigurationQuery when eager-loading is set.
	Edges        ManifestMisconfigurationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ManifestMisconfigurationEdges holds the relations/edges for other nodes in the graph.
type ManifestMisconfigurationEdges struct {
	// Misconfiguration holds the value of the misconfiguration edge.
	Misconfiguration *Misconfiguration `json:"misconfiguration,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MisconfigurationOrErr returns the Misconfiguration value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManifestMisconfigurationEdges) MisconfigurationOrErr() (*Misconfiguration, error) {
	if e.Misconfiguration != nil {
		return e.Misconfiguration, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: misconfiguration.Label}
	}
	return nil, &NotLoadedError{edge: "misconfiguration"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ManifestMisconfiguration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case manifestmisconfiguration.FieldID, manifestmisconfiguration.FieldManifestID, manifestmisconfiguration.FieldMisconfigurationID:
			values[i] = new(sql.NullInt64)
		case manifestmisconfiguration.FieldTargetFile, manifestmisconfiguration.FieldMessage, manifestmisconfiguration.FieldResolution:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ManifestMisconfiguration fields.
func (mm *ManifestMisconfiguration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case manifestmisconfiguration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mm.ID = int(value.Int64)
		case manifestmisconfiguration.FieldTargetFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_file", values[i])
			} else if value.Valid {
				mm.TargetFile = value.String
			}
		case manifestmisconfiguration.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				mm.Message = value.String
			}
		case manifestmisconfiguration.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				mm.Resolution = value.String
			}
		case manifestmisconfiguration.FieldManifestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field manifest_id", values[i])
			} else if value.Valid {
				mm.ManifestID = int(value.Int64)
			}
		case manifestmisconfiguration.FieldMisconfigurationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field misconfiguration_id", values[i])
			} else if value.Valid {
				mm.MisconfigurationID = int(value.Int64)
			}
		default:
			mm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ManifestMisconfiguration.
// This includes values selected through modifiers, order, etc.
func (mm *ManifestMisconfiguration) Value(name string) (ent.Value, error) {
	return mm.selectValues.Get(name)
}

// QueryMisconfiguration queries the "misconfiguration" edge of the ManifestMisconfiguration entity.
func (mm *ManifestMisconfiguration) QueryMisconfiguration() *MisconfigurationQuery {
	return NewManifestMisconfigurationClient(mm.config).QueryMisconfiguration(mm)
}

// Update returns a builder for updating this ManifestMisconfiguration.
// Note that you need to call ManifestMisconfiguration.Unwrap() before calling this method if this ManifestMisconfiguration
// was returned from a transaction, and the transaction was committed or rolled back.
func (mm *ManifestMisconfiguration) Update() *ManifestMisconfigurationUpdateOne {
	return NewManifestMisconfigurationClient(mm.config).UpdateOne(mm)
}

// Unwrap unwraps the ManifestMisconfiguration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mm *ManifestMisconfiguration) Unwrap() *ManifestMisconfiguration {
	_tx, ok := mm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ManifestMisconfiguration is not a transactional entity")
	}
	mm.config.driver = _tx.drv
	return mm
}

// String implements the fmt.Stringer.
func (mm *ManifestMisconfiguration) String() string {
	var builder strings.Builder
	builder.WriteString("ManifestMisconfiguration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mm.ID))
	builder.WriteString("target_file=")
	builder.WriteString(mm.TargetFile)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(mm.Message)
	builder.WriteString(", ")
	builder.WriteString("resolution=")
	builder.WriteString(mm.Resolution)
	builder.WriteString(", ")
	builder.WriteString("manifest_id=")
	builder.WriteString(fmt.Sprintf("%v", mm.ManifestID))
	builder.WriteString(", ")
	builder.WriteString("misconfiguration_id=")
	builder.WriteString(fmt.Sprintf("%v", mm.MisconfigurationID))
	builder.WriteByte(')')
	return builder.String()
}

// ManifestMisconfigurations is a parsable slice of ManifestMisconfiguration.
type ManifestMisconfigurations []*ManifestMisconfiguration
