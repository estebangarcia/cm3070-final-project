// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/misconfiguration"
)

// Misconfiguration is the model entity for the Misconfiguration schema.
type Misconfiguration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MisconfigurationID holds the value of the "misconfiguration_id" field.
	MisconfigurationID string `json:"misconfiguration_id,omitempty"`
	// MisconfigurationURLDetails holds the value of the "misconfiguration_url_details" field.
	MisconfigurationURLDetails string `json:"misconfiguration_url_details,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity misconfiguration.Severity `json:"severity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MisconfigurationQuery when eager-loading is set.
	Edges        MisconfigurationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MisconfigurationEdges holds the relations/edges for other nodes in the graph.
type MisconfigurationEdges struct {
	// ManifestMisconfigurations holds the value of the manifest_misconfigurations edge.
	ManifestMisconfigurations []*ManifestMisconfiguration `json:"manifest_misconfigurations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ManifestMisconfigurationsOrErr returns the ManifestMisconfigurations value or an error if the edge
// was not loaded in eager-loading.
func (e MisconfigurationEdges) ManifestMisconfigurationsOrErr() ([]*ManifestMisconfiguration, error) {
	if e.loadedTypes[0] {
		return e.ManifestMisconfigurations, nil
	}
	return nil, &NotLoadedError{edge: "manifest_misconfigurations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Misconfiguration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case misconfiguration.FieldID:
			values[i] = new(sql.NullInt64)
		case misconfiguration.FieldMisconfigurationID, misconfiguration.FieldMisconfigurationURLDetails, misconfiguration.FieldTitle, misconfiguration.FieldSeverity:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Misconfiguration fields.
func (m *Misconfiguration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case misconfiguration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case misconfiguration.FieldMisconfigurationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field misconfiguration_id", values[i])
			} else if value.Valid {
				m.MisconfigurationID = value.String
			}
		case misconfiguration.FieldMisconfigurationURLDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field misconfiguration_url_details", values[i])
			} else if value.Valid {
				m.MisconfigurationURLDetails = value.String
			}
		case misconfiguration.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case misconfiguration.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				m.Severity = misconfiguration.Severity(value.String)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Misconfiguration.
// This includes values selected through modifiers, order, etc.
func (m *Misconfiguration) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryManifestMisconfigurations queries the "manifest_misconfigurations" edge of the Misconfiguration entity.
func (m *Misconfiguration) QueryManifestMisconfigurations() *ManifestMisconfigurationQuery {
	return NewMisconfigurationClient(m.config).QueryManifestMisconfigurations(m)
}

// Update returns a builder for updating this Misconfiguration.
// Note that you need to call Misconfiguration.Unwrap() before calling this method if this Misconfiguration
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Misconfiguration) Update() *MisconfigurationUpdateOne {
	return NewMisconfigurationClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Misconfiguration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Misconfiguration) Unwrap() *Misconfiguration {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Misconfiguration is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Misconfiguration) String() string {
	var builder strings.Builder
	builder.WriteString("Misconfiguration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("misconfiguration_id=")
	builder.WriteString(m.MisconfigurationID)
	builder.WriteString(", ")
	builder.WriteString("misconfiguration_url_details=")
	builder.WriteString(m.MisconfigurationURLDetails)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(fmt.Sprintf("%v", m.Severity))
	builder.WriteByte(')')
	return builder.String()
}

// Misconfigurations is a parsable slice of Misconfiguration.
type Misconfigurations []*Misconfiguration
