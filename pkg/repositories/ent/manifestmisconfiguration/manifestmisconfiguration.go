// Code generated by ent, DO NOT EDIT.

package manifestmisconfiguration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the manifestmisconfiguration type in the database.
	Label = "manifest_misconfiguration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTargetFile holds the string denoting the target_file field in the database.
	FieldTargetFile = "target_file"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldResolution holds the string denoting the resolution field in the database.
	FieldResolution = "resolution"
	// FieldManifestID holds the string denoting the manifest_id field in the database.
	FieldManifestID = "manifest_id"
	// FieldMisconfigurationID holds the string denoting the misconfiguration_id field in the database.
	FieldMisconfigurationID = "misconfiguration_id"
	// EdgeMisconfiguration holds the string denoting the misconfiguration edge name in mutations.
	EdgeMisconfiguration = "misconfiguration"
	// Table holds the table name of the manifestmisconfiguration in the database.
	Table = "manifest_misconfigurations"
	// MisconfigurationTable is the table that holds the misconfiguration relation/edge.
	MisconfigurationTable = "manifest_misconfigurations"
	// MisconfigurationInverseTable is the table name for the Misconfiguration entity.
	// It exists in this package in order to avoid circular dependency with the "misconfiguration" package.
	MisconfigurationInverseTable = "misconfigurations"
	// MisconfigurationColumn is the table column denoting the misconfiguration relation/edge.
	MisconfigurationColumn = "misconfiguration_id"
)

// Columns holds all SQL columns for manifestmisconfiguration fields.
var Columns = []string{
	FieldID,
	FieldTargetFile,
	FieldMessage,
	FieldResolution,
	FieldManifestID,
	FieldMisconfigurationID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ManifestMisconfiguration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTargetFile orders the results by the target_file field.
func ByTargetFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetFile, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByResolution orders the results by the resolution field.
func ByResolution(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolution, opts...).ToFunc()
}

// ByManifestID orders the results by the manifest_id field.
func ByManifestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManifestID, opts...).ToFunc()
}

// ByMisconfigurationID orders the results by the misconfiguration_id field.
func ByMisconfigurationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMisconfigurationID, opts...).ToFunc()
}

// ByMisconfigurationField orders the results by misconfiguration field.
func ByMisconfigurationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMisconfigurationStep(), sql.OrderByField(field, opts...))
	}
}
func newMisconfigurationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MisconfigurationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MisconfigurationTable, MisconfigurationColumn),
	)
}
