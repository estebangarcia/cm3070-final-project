// Code generated by ent, DO NOT EDIT.

package manifestmisconfiguration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLTE(FieldID, id))
}

// TargetFile applies equality check predicate on the "target_file" field. It's identical to TargetFileEQ.
func TargetFile(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldTargetFile, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldMessage, v))
}

// Resolution applies equality check predicate on the "resolution" field. It's identical to ResolutionEQ.
func Resolution(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldResolution, v))
}

// ManifestID applies equality check predicate on the "manifest_id" field. It's identical to ManifestIDEQ.
func ManifestID(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldManifestID, v))
}

// MisconfigurationID applies equality check predicate on the "misconfiguration_id" field. It's identical to MisconfigurationIDEQ.
func MisconfigurationID(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldMisconfigurationID, v))
}

// TargetFileEQ applies the EQ predicate on the "target_file" field.
func TargetFileEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldTargetFile, v))
}

// TargetFileNEQ applies the NEQ predicate on the "target_file" field.
func TargetFileNEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldTargetFile, v))
}

// TargetFileIn applies the In predicate on the "target_file" field.
func TargetFileIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldTargetFile, vs...))
}

// TargetFileNotIn applies the NotIn predicate on the "target_file" field.
func TargetFileNotIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldTargetFile, vs...))
}

// TargetFileGT applies the GT predicate on the "target_file" field.
func TargetFileGT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGT(FieldTargetFile, v))
}

// TargetFileGTE applies the GTE predicate on the "target_file" field.
func TargetFileGTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGTE(FieldTargetFile, v))
}

// TargetFileLT applies the LT predicate on the "target_file" field.
func TargetFileLT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLT(FieldTargetFile, v))
}

// TargetFileLTE applies the LTE predicate on the "target_file" field.
func TargetFileLTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLTE(FieldTargetFile, v))
}

// TargetFileContains applies the Contains predicate on the "target_file" field.
func TargetFileContains(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContains(FieldTargetFile, v))
}

// TargetFileHasPrefix applies the HasPrefix predicate on the "target_file" field.
func TargetFileHasPrefix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasPrefix(FieldTargetFile, v))
}

// TargetFileHasSuffix applies the HasSuffix predicate on the "target_file" field.
func TargetFileHasSuffix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasSuffix(FieldTargetFile, v))
}

// TargetFileEqualFold applies the EqualFold predicate on the "target_file" field.
func TargetFileEqualFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEqualFold(FieldTargetFile, v))
}

// TargetFileContainsFold applies the ContainsFold predicate on the "target_file" field.
func TargetFileContainsFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContainsFold(FieldTargetFile, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContainsFold(FieldMessage, v))
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldResolution, v))
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldResolution, v))
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldResolution, vs...))
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldResolution, vs...))
}

// ResolutionGT applies the GT predicate on the "resolution" field.
func ResolutionGT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGT(FieldResolution, v))
}

// ResolutionGTE applies the GTE predicate on the "resolution" field.
func ResolutionGTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGTE(FieldResolution, v))
}

// ResolutionLT applies the LT predicate on the "resolution" field.
func ResolutionLT(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLT(FieldResolution, v))
}

// ResolutionLTE applies the LTE predicate on the "resolution" field.
func ResolutionLTE(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLTE(FieldResolution, v))
}

// ResolutionContains applies the Contains predicate on the "resolution" field.
func ResolutionContains(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContains(FieldResolution, v))
}

// ResolutionHasPrefix applies the HasPrefix predicate on the "resolution" field.
func ResolutionHasPrefix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasPrefix(FieldResolution, v))
}

// ResolutionHasSuffix applies the HasSuffix predicate on the "resolution" field.
func ResolutionHasSuffix(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldHasSuffix(FieldResolution, v))
}

// ResolutionEqualFold applies the EqualFold predicate on the "resolution" field.
func ResolutionEqualFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEqualFold(FieldResolution, v))
}

// ResolutionContainsFold applies the ContainsFold predicate on the "resolution" field.
func ResolutionContainsFold(v string) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldContainsFold(FieldResolution, v))
}

// ManifestIDEQ applies the EQ predicate on the "manifest_id" field.
func ManifestIDEQ(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldManifestID, v))
}

// ManifestIDNEQ applies the NEQ predicate on the "manifest_id" field.
func ManifestIDNEQ(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldManifestID, v))
}

// ManifestIDIn applies the In predicate on the "manifest_id" field.
func ManifestIDIn(vs ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldManifestID, vs...))
}

// ManifestIDNotIn applies the NotIn predicate on the "manifest_id" field.
func ManifestIDNotIn(vs ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldManifestID, vs...))
}

// ManifestIDGT applies the GT predicate on the "manifest_id" field.
func ManifestIDGT(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGT(FieldManifestID, v))
}

// ManifestIDGTE applies the GTE predicate on the "manifest_id" field.
func ManifestIDGTE(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldGTE(FieldManifestID, v))
}

// ManifestIDLT applies the LT predicate on the "manifest_id" field.
func ManifestIDLT(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLT(FieldManifestID, v))
}

// ManifestIDLTE applies the LTE predicate on the "manifest_id" field.
func ManifestIDLTE(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldLTE(FieldManifestID, v))
}

// MisconfigurationIDEQ applies the EQ predicate on the "misconfiguration_id" field.
func MisconfigurationIDEQ(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldEQ(FieldMisconfigurationID, v))
}

// MisconfigurationIDNEQ applies the NEQ predicate on the "misconfiguration_id" field.
func MisconfigurationIDNEQ(v int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNEQ(FieldMisconfigurationID, v))
}

// MisconfigurationIDIn applies the In predicate on the "misconfiguration_id" field.
func MisconfigurationIDIn(vs ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIn(FieldMisconfigurationID, vs...))
}

// MisconfigurationIDNotIn applies the NotIn predicate on the "misconfiguration_id" field.
func MisconfigurationIDNotIn(vs ...int) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotIn(FieldMisconfigurationID, vs...))
}

// MisconfigurationIDIsNil applies the IsNil predicate on the "misconfiguration_id" field.
func MisconfigurationIDIsNil() predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldIsNull(FieldMisconfigurationID))
}

// MisconfigurationIDNotNil applies the NotNil predicate on the "misconfiguration_id" field.
func MisconfigurationIDNotNil() predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.FieldNotNull(FieldMisconfigurationID))
}

// HasMisconfiguration applies the HasEdge predicate on the "misconfiguration" edge.
func HasMisconfiguration() predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MisconfigurationTable, MisconfigurationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMisconfigurationWith applies the HasEdge predicate on the "misconfiguration" edge with a given conditions (other predicates).
func HasMisconfigurationWith(preds ...predicate.Misconfiguration) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(func(s *sql.Selector) {
		step := newMisconfigurationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ManifestMisconfiguration) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ManifestMisconfiguration) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ManifestMisconfiguration) predicate.ManifestMisconfiguration {
	return predicate.ManifestMisconfiguration(sql.NotPredicates(p))
}
