// Code generated by ent, DO NOT EDIT.

package manifest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the manifest type in the database.
	Label = "manifest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldArtifactType holds the string denoting the artifact_type field in the database.
	FieldArtifactType = "artifact_type"
	// FieldS3Path holds the string denoting the s3_path field in the database.
	FieldS3Path = "s3_path"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeReferer holds the string denoting the referer edge name in mutations.
	EdgeReferer = "referer"
	// Table holds the table name of the manifest in the database.
	Table = "manifests"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "manifest_tag_references"
	// TagsInverseTable is the table name for the ManifestTagReference entity.
	// It exists in this package in order to avoid circular dependency with the "manifesttagreference" package.
	TagsInverseTable = "manifest_tag_references"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "manifest_tag_reference_manifests"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "manifests"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "repository_manifests"
	// SubjectTable is the table that holds the subject relation/edge. The primary key declared below.
	SubjectTable = "manifest_subject"
	// RefererTable is the table that holds the referer relation/edge. The primary key declared below.
	RefererTable = "manifest_subject"
)

// Columns holds all SQL columns for manifest fields.
var Columns = []string{
	FieldID,
	FieldMediaType,
	FieldArtifactType,
	FieldS3Path,
	FieldDigest,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "manifests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"repository_manifests",
}

var (
	// SubjectPrimaryKey and SubjectColumn2 are the table columns denoting the
	// primary key for the subject relation (M2M).
	SubjectPrimaryKey = []string{"manifest_id", "referer_id"}
	// RefererPrimaryKey and RefererColumn2 are the table columns denoting the
	// primary key for the referer relation (M2M).
	RefererPrimaryKey = []string{"manifest_id", "referer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Manifest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMediaType orders the results by the media_type field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByArtifactType orders the results by the artifact_type field.
func ByArtifactType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactType, opts...).ToFunc()
}

// ByS3Path orders the results by the s3_path field.
func ByS3Path(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldS3Path, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}

// BySubjectCount orders the results by subject count.
func BySubjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubjectStep(), opts...)
	}
}

// BySubject orders the results by subject terms.
func BySubject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRefererCount orders the results by referer count.
func ByRefererCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRefererStep(), opts...)
	}
}

// ByReferer orders the results by referer terms.
func ByReferer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefererStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TagsTable, TagsColumn),
	)
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SubjectTable, SubjectPrimaryKey...),
	)
}
func newRefererStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RefererTable, RefererPrimaryKey...),
	)
}
