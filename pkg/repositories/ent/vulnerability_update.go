// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/vulnerability"
)

// VulnerabilityUpdate is the builder for updating Vulnerability entities.
type VulnerabilityUpdate struct {
	config
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vu *VulnerabilityUpdate) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vu *VulnerabilityUpdate) SetVulnerabilityID(s string) *VulnerabilityUpdate {
	vu.mutation.SetVulnerabilityID(s)
	return vu
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableVulnerabilityID(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetVulnerabilityID(*s)
	}
	return vu
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (vu *VulnerabilityUpdate) SetVulnerabilityURLDetails(s string) *VulnerabilityUpdate {
	vu.mutation.SetVulnerabilityURLDetails(s)
	return vu
}

// SetNillableVulnerabilityURLDetails sets the "vulnerability_url_details" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableVulnerabilityURLDetails(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetVulnerabilityURLDetails(*s)
	}
	return vu
}

// SetInstalledVersion sets the "installed_version" field.
func (vu *VulnerabilityUpdate) SetInstalledVersion(s string) *VulnerabilityUpdate {
	vu.mutation.SetInstalledVersion(s)
	return vu
}

// SetNillableInstalledVersion sets the "installed_version" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableInstalledVersion(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetInstalledVersion(*s)
	}
	return vu
}

// SetFixedVersion sets the "fixed_version" field.
func (vu *VulnerabilityUpdate) SetFixedVersion(s string) *VulnerabilityUpdate {
	vu.mutation.SetFixedVersion(s)
	return vu
}

// SetNillableFixedVersion sets the "fixed_version" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableFixedVersion(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetFixedVersion(*s)
	}
	return vu
}

// SetStatus sets the "status" field.
func (vu *VulnerabilityUpdate) SetStatus(v vulnerability.Status) *VulnerabilityUpdate {
	vu.mutation.SetStatus(v)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableStatus(v *vulnerability.Status) *VulnerabilityUpdate {
	if v != nil {
		vu.SetStatus(*v)
	}
	return vu
}

// SetTitle sets the "title" field.
func (vu *VulnerabilityUpdate) SetTitle(s string) *VulnerabilityUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableTitle(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// SetSeverity sets the "severity" field.
func (vu *VulnerabilityUpdate) SetSeverity(v vulnerability.Severity) *VulnerabilityUpdate {
	vu.mutation.SetSeverity(v)
	return vu
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableSeverity(v *vulnerability.Severity) *VulnerabilityUpdate {
	if v != nil {
		vu.SetSeverity(*v)
	}
	return vu
}

// SetV3Score sets the "v3_score" field.
func (vu *VulnerabilityUpdate) SetV3Score(s string) *VulnerabilityUpdate {
	vu.mutation.SetV3Score(s)
	return vu
}

// SetNillableV3Score sets the "v3_score" field if the given value is not nil.
func (vu *VulnerabilityUpdate) SetNillableV3Score(s *string) *VulnerabilityUpdate {
	if s != nil {
		vu.SetV3Score(*s)
	}
	return vu
}

// AddManifestIDs adds the "manifests" edge to the Manifest entity by IDs.
func (vu *VulnerabilityUpdate) AddManifestIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.AddManifestIDs(ids...)
	return vu
}

// AddManifests adds the "manifests" edges to the Manifest entity.
func (vu *VulnerabilityUpdate) AddManifests(m ...*Manifest) *VulnerabilityUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddManifestIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vu *VulnerabilityUpdate) Mutation() *VulnerabilityMutation {
	return vu.mutation
}

// ClearManifests clears all "manifests" edges to the Manifest entity.
func (vu *VulnerabilityUpdate) ClearManifests() *VulnerabilityUpdate {
	vu.mutation.ClearManifests()
	return vu
}

// RemoveManifestIDs removes the "manifests" edge to Manifest entities by IDs.
func (vu *VulnerabilityUpdate) RemoveManifestIDs(ids ...int) *VulnerabilityUpdate {
	vu.mutation.RemoveManifestIDs(ids...)
	return vu
}

// RemoveManifests removes "manifests" edges to Manifest entities.
func (vu *VulnerabilityUpdate) RemoveManifests(m ...*Manifest) *VulnerabilityUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveManifestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VulnerabilityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VulnerabilityUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VulnerabilityUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VulnerabilityUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VulnerabilityUpdate) check() error {
	if v, ok := vu.mutation.Status(); ok {
		if err := vulnerability.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.status": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Severity(); ok {
		if err := vulnerability.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.severity": %w`, err)}
		}
	}
	return nil
}

func (vu *VulnerabilityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := vu.mutation.VulnerabilityURLDetails(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityURLDetails, field.TypeString, value)
	}
	if value, ok := vu.mutation.InstalledVersion(); ok {
		_spec.SetField(vulnerability.FieldInstalledVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.FixedVersion(); ok {
		_spec.SetField(vulnerability.FieldFixedVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(vulnerability.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(vulnerability.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Severity(); ok {
		_spec.SetField(vulnerability.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.V3Score(); ok {
		_spec.SetField(vulnerability.FieldV3Score, field.TypeString, value)
	}
	if vu.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedManifestsIDs(); len(nodes) > 0 && !vu.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ManifestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VulnerabilityUpdateOne is the builder for updating a single Vulnerability entity.
type VulnerabilityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VulnerabilityMutation
}

// SetVulnerabilityID sets the "vulnerability_id" field.
func (vuo *VulnerabilityUpdateOne) SetVulnerabilityID(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetVulnerabilityID(s)
	return vuo
}

// SetNillableVulnerabilityID sets the "vulnerability_id" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableVulnerabilityID(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetVulnerabilityID(*s)
	}
	return vuo
}

// SetVulnerabilityURLDetails sets the "vulnerability_url_details" field.
func (vuo *VulnerabilityUpdateOne) SetVulnerabilityURLDetails(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetVulnerabilityURLDetails(s)
	return vuo
}

// SetNillableVulnerabilityURLDetails sets the "vulnerability_url_details" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableVulnerabilityURLDetails(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetVulnerabilityURLDetails(*s)
	}
	return vuo
}

// SetInstalledVersion sets the "installed_version" field.
func (vuo *VulnerabilityUpdateOne) SetInstalledVersion(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetInstalledVersion(s)
	return vuo
}

// SetNillableInstalledVersion sets the "installed_version" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableInstalledVersion(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetInstalledVersion(*s)
	}
	return vuo
}

// SetFixedVersion sets the "fixed_version" field.
func (vuo *VulnerabilityUpdateOne) SetFixedVersion(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetFixedVersion(s)
	return vuo
}

// SetNillableFixedVersion sets the "fixed_version" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableFixedVersion(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetFixedVersion(*s)
	}
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VulnerabilityUpdateOne) SetStatus(v vulnerability.Status) *VulnerabilityUpdateOne {
	vuo.mutation.SetStatus(v)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableStatus(v *vulnerability.Status) *VulnerabilityUpdateOne {
	if v != nil {
		vuo.SetStatus(*v)
	}
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VulnerabilityUpdateOne) SetTitle(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableTitle(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// SetSeverity sets the "severity" field.
func (vuo *VulnerabilityUpdateOne) SetSeverity(v vulnerability.Severity) *VulnerabilityUpdateOne {
	vuo.mutation.SetSeverity(v)
	return vuo
}

// SetNillableSeverity sets the "severity" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableSeverity(v *vulnerability.Severity) *VulnerabilityUpdateOne {
	if v != nil {
		vuo.SetSeverity(*v)
	}
	return vuo
}

// SetV3Score sets the "v3_score" field.
func (vuo *VulnerabilityUpdateOne) SetV3Score(s string) *VulnerabilityUpdateOne {
	vuo.mutation.SetV3Score(s)
	return vuo
}

// SetNillableV3Score sets the "v3_score" field if the given value is not nil.
func (vuo *VulnerabilityUpdateOne) SetNillableV3Score(s *string) *VulnerabilityUpdateOne {
	if s != nil {
		vuo.SetV3Score(*s)
	}
	return vuo
}

// AddManifestIDs adds the "manifests" edge to the Manifest entity by IDs.
func (vuo *VulnerabilityUpdateOne) AddManifestIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.AddManifestIDs(ids...)
	return vuo
}

// AddManifests adds the "manifests" edges to the Manifest entity.
func (vuo *VulnerabilityUpdateOne) AddManifests(m ...*Manifest) *VulnerabilityUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddManifestIDs(ids...)
}

// Mutation returns the VulnerabilityMutation object of the builder.
func (vuo *VulnerabilityUpdateOne) Mutation() *VulnerabilityMutation {
	return vuo.mutation
}

// ClearManifests clears all "manifests" edges to the Manifest entity.
func (vuo *VulnerabilityUpdateOne) ClearManifests() *VulnerabilityUpdateOne {
	vuo.mutation.ClearManifests()
	return vuo
}

// RemoveManifestIDs removes the "manifests" edge to Manifest entities by IDs.
func (vuo *VulnerabilityUpdateOne) RemoveManifestIDs(ids ...int) *VulnerabilityUpdateOne {
	vuo.mutation.RemoveManifestIDs(ids...)
	return vuo
}

// RemoveManifests removes "manifests" edges to Manifest entities.
func (vuo *VulnerabilityUpdateOne) RemoveManifests(m ...*Manifest) *VulnerabilityUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveManifestIDs(ids...)
}

// Where appends a list predicates to the VulnerabilityUpdate builder.
func (vuo *VulnerabilityUpdateOne) Where(ps ...predicate.Vulnerability) *VulnerabilityUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VulnerabilityUpdateOne) Select(field string, fields ...string) *VulnerabilityUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vulnerability entity.
func (vuo *VulnerabilityUpdateOne) Save(ctx context.Context) (*Vulnerability, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) SaveX(ctx context.Context) *Vulnerability {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VulnerabilityUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VulnerabilityUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VulnerabilityUpdateOne) check() error {
	if v, ok := vuo.mutation.Status(); ok {
		if err := vulnerability.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.status": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Severity(); ok {
		if err := vulnerability.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf(`ent: validator failed for field "Vulnerability.severity": %w`, err)}
		}
	}
	return nil
}

func (vuo *VulnerabilityUpdateOne) sqlSave(ctx context.Context) (_node *Vulnerability, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vulnerability.Table, vulnerability.Columns, sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vulnerability.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vulnerability.FieldID)
		for _, f := range fields {
			if !vulnerability.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vulnerability.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.VulnerabilityID(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityID, field.TypeString, value)
	}
	if value, ok := vuo.mutation.VulnerabilityURLDetails(); ok {
		_spec.SetField(vulnerability.FieldVulnerabilityURLDetails, field.TypeString, value)
	}
	if value, ok := vuo.mutation.InstalledVersion(); ok {
		_spec.SetField(vulnerability.FieldInstalledVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.FixedVersion(); ok {
		_spec.SetField(vulnerability.FieldFixedVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(vulnerability.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(vulnerability.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Severity(); ok {
		_spec.SetField(vulnerability.FieldSeverity, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.V3Score(); ok {
		_spec.SetField(vulnerability.FieldV3Score, field.TypeString, value)
	}
	if vuo.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedManifestsIDs(); len(nodes) > 0 && !vuo.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ManifestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vulnerability.ManifestsTable,
			Columns: vulnerability.ManifestsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vulnerability{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vulnerability.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
