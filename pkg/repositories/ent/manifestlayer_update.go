// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ManifestLayerUpdate is the builder for updating ManifestLayer entities.
type ManifestLayerUpdate struct {
	config
	hooks    []Hook
	mutation *ManifestLayerMutation
}

// Where appends a list predicates to the ManifestLayerUpdate builder.
func (mlu *ManifestLayerUpdate) Where(ps ...predicate.ManifestLayer) *ManifestLayerUpdate {
	mlu.mutation.Where(ps...)
	return mlu
}

// SetMediaType sets the "media_type" field.
func (mlu *ManifestLayerUpdate) SetMediaType(s string) *ManifestLayerUpdate {
	mlu.mutation.SetMediaType(s)
	return mlu
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (mlu *ManifestLayerUpdate) SetNillableMediaType(s *string) *ManifestLayerUpdate {
	if s != nil {
		mlu.SetMediaType(*s)
	}
	return mlu
}

// SetDigest sets the "digest" field.
func (mlu *ManifestLayerUpdate) SetDigest(s string) *ManifestLayerUpdate {
	mlu.mutation.SetDigest(s)
	return mlu
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (mlu *ManifestLayerUpdate) SetNillableDigest(s *string) *ManifestLayerUpdate {
	if s != nil {
		mlu.SetDigest(*s)
	}
	return mlu
}

// SetSize sets the "size" field.
func (mlu *ManifestLayerUpdate) SetSize(i int32) *ManifestLayerUpdate {
	mlu.mutation.ResetSize()
	mlu.mutation.SetSize(i)
	return mlu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mlu *ManifestLayerUpdate) SetNillableSize(i *int32) *ManifestLayerUpdate {
	if i != nil {
		mlu.SetSize(*i)
	}
	return mlu
}

// AddSize adds i to the "size" field.
func (mlu *ManifestLayerUpdate) AddSize(i int32) *ManifestLayerUpdate {
	mlu.mutation.AddSize(i)
	return mlu
}

// SetAnnotations sets the "annotations" field.
func (mlu *ManifestLayerUpdate) SetAnnotations(m map[string]string) *ManifestLayerUpdate {
	mlu.mutation.SetAnnotations(m)
	return mlu
}

// SetManifestID sets the "manifest" edge to the Manifest entity by ID.
func (mlu *ManifestLayerUpdate) SetManifestID(id int) *ManifestLayerUpdate {
	mlu.mutation.SetManifestID(id)
	return mlu
}

// SetNillableManifestID sets the "manifest" edge to the Manifest entity by ID if the given value is not nil.
func (mlu *ManifestLayerUpdate) SetNillableManifestID(id *int) *ManifestLayerUpdate {
	if id != nil {
		mlu = mlu.SetManifestID(*id)
	}
	return mlu
}

// SetManifest sets the "manifest" edge to the Manifest entity.
func (mlu *ManifestLayerUpdate) SetManifest(m *Manifest) *ManifestLayerUpdate {
	return mlu.SetManifestID(m.ID)
}

// Mutation returns the ManifestLayerMutation object of the builder.
func (mlu *ManifestLayerUpdate) Mutation() *ManifestLayerMutation {
	return mlu.mutation
}

// ClearManifest clears the "manifest" edge to the Manifest entity.
func (mlu *ManifestLayerUpdate) ClearManifest() *ManifestLayerUpdate {
	mlu.mutation.ClearManifest()
	return mlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlu *ManifestLayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mlu.sqlSave, mlu.mutation, mlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlu *ManifestLayerUpdate) SaveX(ctx context.Context) int {
	affected, err := mlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlu *ManifestLayerUpdate) Exec(ctx context.Context) error {
	_, err := mlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlu *ManifestLayerUpdate) ExecX(ctx context.Context) {
	if err := mlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mlu *ManifestLayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifestlayer.Table, manifestlayer.Columns, sqlgraph.NewFieldSpec(manifestlayer.FieldID, field.TypeInt))
	if ps := mlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlu.mutation.MediaType(); ok {
		_spec.SetField(manifestlayer.FieldMediaType, field.TypeString, value)
	}
	if value, ok := mlu.mutation.Digest(); ok {
		_spec.SetField(manifestlayer.FieldDigest, field.TypeString, value)
	}
	if value, ok := mlu.mutation.Size(); ok {
		_spec.SetField(manifestlayer.FieldSize, field.TypeInt32, value)
	}
	if value, ok := mlu.mutation.AddedSize(); ok {
		_spec.AddField(manifestlayer.FieldSize, field.TypeInt32, value)
	}
	if value, ok := mlu.mutation.Annotations(); ok {
		_spec.SetField(manifestlayer.FieldAnnotations, field.TypeJSON, value)
	}
	if mlu.mutation.ManifestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestlayer.ManifestTable,
			Columns: []string{manifestlayer.ManifestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.ManifestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestlayer.ManifestTable,
			Columns: []string{manifestlayer.ManifestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifestlayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlu.mutation.done = true
	return n, nil
}

// ManifestLayerUpdateOne is the builder for updating a single ManifestLayer entity.
type ManifestLayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManifestLayerMutation
}

// SetMediaType sets the "media_type" field.
func (mluo *ManifestLayerUpdateOne) SetMediaType(s string) *ManifestLayerUpdateOne {
	mluo.mutation.SetMediaType(s)
	return mluo
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (mluo *ManifestLayerUpdateOne) SetNillableMediaType(s *string) *ManifestLayerUpdateOne {
	if s != nil {
		mluo.SetMediaType(*s)
	}
	return mluo
}

// SetDigest sets the "digest" field.
func (mluo *ManifestLayerUpdateOne) SetDigest(s string) *ManifestLayerUpdateOne {
	mluo.mutation.SetDigest(s)
	return mluo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (mluo *ManifestLayerUpdateOne) SetNillableDigest(s *string) *ManifestLayerUpdateOne {
	if s != nil {
		mluo.SetDigest(*s)
	}
	return mluo
}

// SetSize sets the "size" field.
func (mluo *ManifestLayerUpdateOne) SetSize(i int32) *ManifestLayerUpdateOne {
	mluo.mutation.ResetSize()
	mluo.mutation.SetSize(i)
	return mluo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mluo *ManifestLayerUpdateOne) SetNillableSize(i *int32) *ManifestLayerUpdateOne {
	if i != nil {
		mluo.SetSize(*i)
	}
	return mluo
}

// AddSize adds i to the "size" field.
func (mluo *ManifestLayerUpdateOne) AddSize(i int32) *ManifestLayerUpdateOne {
	mluo.mutation.AddSize(i)
	return mluo
}

// SetAnnotations sets the "annotations" field.
func (mluo *ManifestLayerUpdateOne) SetAnnotations(m map[string]string) *ManifestLayerUpdateOne {
	mluo.mutation.SetAnnotations(m)
	return mluo
}

// SetManifestID sets the "manifest" edge to the Manifest entity by ID.
func (mluo *ManifestLayerUpdateOne) SetManifestID(id int) *ManifestLayerUpdateOne {
	mluo.mutation.SetManifestID(id)
	return mluo
}

// SetNillableManifestID sets the "manifest" edge to the Manifest entity by ID if the given value is not nil.
func (mluo *ManifestLayerUpdateOne) SetNillableManifestID(id *int) *ManifestLayerUpdateOne {
	if id != nil {
		mluo = mluo.SetManifestID(*id)
	}
	return mluo
}

// SetManifest sets the "manifest" edge to the Manifest entity.
func (mluo *ManifestLayerUpdateOne) SetManifest(m *Manifest) *ManifestLayerUpdateOne {
	return mluo.SetManifestID(m.ID)
}

// Mutation returns the ManifestLayerMutation object of the builder.
func (mluo *ManifestLayerUpdateOne) Mutation() *ManifestLayerMutation {
	return mluo.mutation
}

// ClearManifest clears the "manifest" edge to the Manifest entity.
func (mluo *ManifestLayerUpdateOne) ClearManifest() *ManifestLayerUpdateOne {
	mluo.mutation.ClearManifest()
	return mluo
}

// Where appends a list predicates to the ManifestLayerUpdate builder.
func (mluo *ManifestLayerUpdateOne) Where(ps ...predicate.ManifestLayer) *ManifestLayerUpdateOne {
	mluo.mutation.Where(ps...)
	return mluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mluo *ManifestLayerUpdateOne) Select(field string, fields ...string) *ManifestLayerUpdateOne {
	mluo.fields = append([]string{field}, fields...)
	return mluo
}

// Save executes the query and returns the updated ManifestLayer entity.
func (mluo *ManifestLayerUpdateOne) Save(ctx context.Context) (*ManifestLayer, error) {
	return withHooks(ctx, mluo.sqlSave, mluo.mutation, mluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mluo *ManifestLayerUpdateOne) SaveX(ctx context.Context) *ManifestLayer {
	node, err := mluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mluo *ManifestLayerUpdateOne) Exec(ctx context.Context) error {
	_, err := mluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mluo *ManifestLayerUpdateOne) ExecX(ctx context.Context) {
	if err := mluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mluo *ManifestLayerUpdateOne) sqlSave(ctx context.Context) (_node *ManifestLayer, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifestlayer.Table, manifestlayer.Columns, sqlgraph.NewFieldSpec(manifestlayer.FieldID, field.TypeInt))
	id, ok := mluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ManifestLayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manifestlayer.FieldID)
		for _, f := range fields {
			if !manifestlayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manifestlayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mluo.mutation.MediaType(); ok {
		_spec.SetField(manifestlayer.FieldMediaType, field.TypeString, value)
	}
	if value, ok := mluo.mutation.Digest(); ok {
		_spec.SetField(manifestlayer.FieldDigest, field.TypeString, value)
	}
	if value, ok := mluo.mutation.Size(); ok {
		_spec.SetField(manifestlayer.FieldSize, field.TypeInt32, value)
	}
	if value, ok := mluo.mutation.AddedSize(); ok {
		_spec.AddField(manifestlayer.FieldSize, field.TypeInt32, value)
	}
	if value, ok := mluo.mutation.Annotations(); ok {
		_spec.SetField(manifestlayer.FieldAnnotations, field.TypeJSON, value)
	}
	if mluo.mutation.ManifestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestlayer.ManifestTable,
			Columns: []string{manifestlayer.ManifestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.ManifestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifestlayer.ManifestTable,
			Columns: []string{manifestlayer.ManifestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ManifestLayer{config: mluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifestlayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mluo.mutation.done = true
	return _node, nil
}
