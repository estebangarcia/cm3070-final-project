// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
)

// ManifestLayer is the model entity for the ManifestLayer schema.
type ManifestLayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MediaType holds the value of the "media_type" field.
	MediaType string `json:"media_type,omitempty"`
	// Digest holds the value of the "digest" field.
	Digest string `json:"digest,omitempty"`
	// Size holds the value of the "size" field.
	Size int32 `json:"size,omitempty"`
	// Annotations holds the value of the "annotations" field.
	Annotations map[string]string `json:"annotations,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ManifestLayerQuery when eager-loading is set.
	Edges                    ManifestLayerEdges `json:"edges"`
	manifest_manifest_layers *int
	selectValues             sql.SelectValues
}

// ManifestLayerEdges holds the relations/edges for other nodes in the graph.
type ManifestLayerEdges struct {
	// Manifest holds the value of the manifest edge.
	Manifest *Manifest `json:"manifest,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ManifestOrErr returns the Manifest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManifestLayerEdges) ManifestOrErr() (*Manifest, error) {
	if e.Manifest != nil {
		return e.Manifest, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: manifest.Label}
	}
	return nil, &NotLoadedError{edge: "manifest"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ManifestLayer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case manifestlayer.FieldAnnotations:
			values[i] = new([]byte)
		case manifestlayer.FieldID, manifestlayer.FieldSize:
			values[i] = new(sql.NullInt64)
		case manifestlayer.FieldMediaType, manifestlayer.FieldDigest:
			values[i] = new(sql.NullString)
		case manifestlayer.ForeignKeys[0]: // manifest_manifest_layers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ManifestLayer fields.
func (ml *ManifestLayer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case manifestlayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ml.ID = int(value.Int64)
		case manifestlayer.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				ml.MediaType = value.String
			}
		case manifestlayer.FieldDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field digest", values[i])
			} else if value.Valid {
				ml.Digest = value.String
			}
		case manifestlayer.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				ml.Size = int32(value.Int64)
			}
		case manifestlayer.FieldAnnotations:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field annotations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ml.Annotations); err != nil {
					return fmt.Errorf("unmarshal field annotations: %w", err)
				}
			}
		case manifestlayer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field manifest_manifest_layers", value)
			} else if value.Valid {
				ml.manifest_manifest_layers = new(int)
				*ml.manifest_manifest_layers = int(value.Int64)
			}
		default:
			ml.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ManifestLayer.
// This includes values selected through modifiers, order, etc.
func (ml *ManifestLayer) Value(name string) (ent.Value, error) {
	return ml.selectValues.Get(name)
}

// QueryManifest queries the "manifest" edge of the ManifestLayer entity.
func (ml *ManifestLayer) QueryManifest() *ManifestQuery {
	return NewManifestLayerClient(ml.config).QueryManifest(ml)
}

// Update returns a builder for updating this ManifestLayer.
// Note that you need to call ManifestLayer.Unwrap() before calling this method if this ManifestLayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *ManifestLayer) Update() *ManifestLayerUpdateOne {
	return NewManifestLayerClient(ml.config).UpdateOne(ml)
}

// Unwrap unwraps the ManifestLayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ml *ManifestLayer) Unwrap() *ManifestLayer {
	_tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: ManifestLayer is not a transactional entity")
	}
	ml.config.driver = _tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *ManifestLayer) String() string {
	var builder strings.Builder
	builder.WriteString("ManifestLayer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ml.ID))
	builder.WriteString("media_type=")
	builder.WriteString(ml.MediaType)
	builder.WriteString(", ")
	builder.WriteString("digest=")
	builder.WriteString(ml.Digest)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", ml.Size))
	builder.WriteString(", ")
	builder.WriteString("annotations=")
	builder.WriteString(fmt.Sprintf("%v", ml.Annotations))
	builder.WriteByte(')')
	return builder.String()
}

// ManifestLayers is a parsable slice of ManifestLayer.
type ManifestLayers []*ManifestLayer
