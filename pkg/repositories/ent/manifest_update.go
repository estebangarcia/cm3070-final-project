// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
)

// ManifestUpdate is the builder for updating Manifest entities.
type ManifestUpdate struct {
	config
	hooks    []Hook
	mutation *ManifestMutation
}

// Where appends a list predicates to the ManifestUpdate builder.
func (mu *ManifestUpdate) Where(ps ...predicate.Manifest) *ManifestUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMediaType sets the "media_type" field.
func (mu *ManifestUpdate) SetMediaType(s string) *ManifestUpdate {
	mu.mutation.SetMediaType(s)
	return mu
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (mu *ManifestUpdate) SetNillableMediaType(s *string) *ManifestUpdate {
	if s != nil {
		mu.SetMediaType(*s)
	}
	return mu
}

// SetArtifactType sets the "artifact_type" field.
func (mu *ManifestUpdate) SetArtifactType(s string) *ManifestUpdate {
	mu.mutation.SetArtifactType(s)
	return mu
}

// SetNillableArtifactType sets the "artifact_type" field if the given value is not nil.
func (mu *ManifestUpdate) SetNillableArtifactType(s *string) *ManifestUpdate {
	if s != nil {
		mu.SetArtifactType(*s)
	}
	return mu
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (mu *ManifestUpdate) ClearArtifactType() *ManifestUpdate {
	mu.mutation.ClearArtifactType()
	return mu
}

// SetS3Path sets the "s3_path" field.
func (mu *ManifestUpdate) SetS3Path(s string) *ManifestUpdate {
	mu.mutation.SetS3Path(s)
	return mu
}

// SetNillableS3Path sets the "s3_path" field if the given value is not nil.
func (mu *ManifestUpdate) SetNillableS3Path(s *string) *ManifestUpdate {
	if s != nil {
		mu.SetS3Path(*s)
	}
	return mu
}

// SetDigest sets the "digest" field.
func (mu *ManifestUpdate) SetDigest(s string) *ManifestUpdate {
	mu.mutation.SetDigest(s)
	return mu
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (mu *ManifestUpdate) SetNillableDigest(s *string) *ManifestUpdate {
	if s != nil {
		mu.SetDigest(*s)
	}
	return mu
}

// AddTagIDs adds the "tags" edge to the ManifestTagReference entity by IDs.
func (mu *ManifestUpdate) AddTagIDs(ids ...int) *ManifestUpdate {
	mu.mutation.AddTagIDs(ids...)
	return mu
}

// AddTags adds the "tags" edges to the ManifestTagReference entity.
func (mu *ManifestUpdate) AddTags(m ...*ManifestTagReference) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddTagIDs(ids...)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (mu *ManifestUpdate) SetRepositoryID(id int) *ManifestUpdate {
	mu.mutation.SetRepositoryID(id)
	return mu
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (mu *ManifestUpdate) SetNillableRepositoryID(id *int) *ManifestUpdate {
	if id != nil {
		mu = mu.SetRepositoryID(*id)
	}
	return mu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (mu *ManifestUpdate) SetRepository(r *Repository) *ManifestUpdate {
	return mu.SetRepositoryID(r.ID)
}

// AddSubjectIDs adds the "subject" edge to the Manifest entity by IDs.
func (mu *ManifestUpdate) AddSubjectIDs(ids ...int) *ManifestUpdate {
	mu.mutation.AddSubjectIDs(ids...)
	return mu
}

// AddSubject adds the "subject" edges to the Manifest entity.
func (mu *ManifestUpdate) AddSubject(m ...*Manifest) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddSubjectIDs(ids...)
}

// AddRefererIDs adds the "referer" edge to the Manifest entity by IDs.
func (mu *ManifestUpdate) AddRefererIDs(ids ...int) *ManifestUpdate {
	mu.mutation.AddRefererIDs(ids...)
	return mu
}

// AddReferer adds the "referer" edges to the Manifest entity.
func (mu *ManifestUpdate) AddReferer(m ...*Manifest) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddRefererIDs(ids...)
}

// Mutation returns the ManifestMutation object of the builder.
func (mu *ManifestUpdate) Mutation() *ManifestMutation {
	return mu.mutation
}

// ClearTags clears all "tags" edges to the ManifestTagReference entity.
func (mu *ManifestUpdate) ClearTags() *ManifestUpdate {
	mu.mutation.ClearTags()
	return mu
}

// RemoveTagIDs removes the "tags" edge to ManifestTagReference entities by IDs.
func (mu *ManifestUpdate) RemoveTagIDs(ids ...int) *ManifestUpdate {
	mu.mutation.RemoveTagIDs(ids...)
	return mu
}

// RemoveTags removes "tags" edges to ManifestTagReference entities.
func (mu *ManifestUpdate) RemoveTags(m ...*ManifestTagReference) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveTagIDs(ids...)
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (mu *ManifestUpdate) ClearRepository() *ManifestUpdate {
	mu.mutation.ClearRepository()
	return mu
}

// ClearSubject clears all "subject" edges to the Manifest entity.
func (mu *ManifestUpdate) ClearSubject() *ManifestUpdate {
	mu.mutation.ClearSubject()
	return mu
}

// RemoveSubjectIDs removes the "subject" edge to Manifest entities by IDs.
func (mu *ManifestUpdate) RemoveSubjectIDs(ids ...int) *ManifestUpdate {
	mu.mutation.RemoveSubjectIDs(ids...)
	return mu
}

// RemoveSubject removes "subject" edges to Manifest entities.
func (mu *ManifestUpdate) RemoveSubject(m ...*Manifest) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveSubjectIDs(ids...)
}

// ClearReferer clears all "referer" edges to the Manifest entity.
func (mu *ManifestUpdate) ClearReferer() *ManifestUpdate {
	mu.mutation.ClearReferer()
	return mu
}

// RemoveRefererIDs removes the "referer" edge to Manifest entities by IDs.
func (mu *ManifestUpdate) RemoveRefererIDs(ids ...int) *ManifestUpdate {
	mu.mutation.RemoveRefererIDs(ids...)
	return mu
}

// RemoveReferer removes "referer" edges to Manifest entities.
func (mu *ManifestUpdate) RemoveReferer(m ...*Manifest) *ManifestUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveRefererIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ManifestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ManifestUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ManifestUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ManifestUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *ManifestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifest.Table, manifest.Columns, sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MediaType(); ok {
		_spec.SetField(manifest.FieldMediaType, field.TypeString, value)
	}
	if value, ok := mu.mutation.ArtifactType(); ok {
		_spec.SetField(manifest.FieldArtifactType, field.TypeString, value)
	}
	if mu.mutation.ArtifactTypeCleared() {
		_spec.ClearField(manifest.FieldArtifactType, field.TypeString)
	}
	if value, ok := mu.mutation.S3Path(); ok {
		_spec.SetField(manifest.FieldS3Path, field.TypeString, value)
	}
	if value, ok := mu.mutation.Digest(); ok {
		_spec.SetField(manifest.FieldDigest, field.TypeString, value)
	}
	if mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifest.RepositoryTable,
			Columns: []string{manifest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifest.RepositoryTable,
			Columns: []string{manifest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedSubjectIDs(); len(nodes) > 0 && !mu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RefererCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRefererIDs(); len(nodes) > 0 && !mu.mutation.RefererCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RefererIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ManifestUpdateOne is the builder for updating a single Manifest entity.
type ManifestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManifestMutation
}

// SetMediaType sets the "media_type" field.
func (muo *ManifestUpdateOne) SetMediaType(s string) *ManifestUpdateOne {
	muo.mutation.SetMediaType(s)
	return muo
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (muo *ManifestUpdateOne) SetNillableMediaType(s *string) *ManifestUpdateOne {
	if s != nil {
		muo.SetMediaType(*s)
	}
	return muo
}

// SetArtifactType sets the "artifact_type" field.
func (muo *ManifestUpdateOne) SetArtifactType(s string) *ManifestUpdateOne {
	muo.mutation.SetArtifactType(s)
	return muo
}

// SetNillableArtifactType sets the "artifact_type" field if the given value is not nil.
func (muo *ManifestUpdateOne) SetNillableArtifactType(s *string) *ManifestUpdateOne {
	if s != nil {
		muo.SetArtifactType(*s)
	}
	return muo
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (muo *ManifestUpdateOne) ClearArtifactType() *ManifestUpdateOne {
	muo.mutation.ClearArtifactType()
	return muo
}

// SetS3Path sets the "s3_path" field.
func (muo *ManifestUpdateOne) SetS3Path(s string) *ManifestUpdateOne {
	muo.mutation.SetS3Path(s)
	return muo
}

// SetNillableS3Path sets the "s3_path" field if the given value is not nil.
func (muo *ManifestUpdateOne) SetNillableS3Path(s *string) *ManifestUpdateOne {
	if s != nil {
		muo.SetS3Path(*s)
	}
	return muo
}

// SetDigest sets the "digest" field.
func (muo *ManifestUpdateOne) SetDigest(s string) *ManifestUpdateOne {
	muo.mutation.SetDigest(s)
	return muo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (muo *ManifestUpdateOne) SetNillableDigest(s *string) *ManifestUpdateOne {
	if s != nil {
		muo.SetDigest(*s)
	}
	return muo
}

// AddTagIDs adds the "tags" edge to the ManifestTagReference entity by IDs.
func (muo *ManifestUpdateOne) AddTagIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.AddTagIDs(ids...)
	return muo
}

// AddTags adds the "tags" edges to the ManifestTagReference entity.
func (muo *ManifestUpdateOne) AddTags(m ...*ManifestTagReference) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddTagIDs(ids...)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (muo *ManifestUpdateOne) SetRepositoryID(id int) *ManifestUpdateOne {
	muo.mutation.SetRepositoryID(id)
	return muo
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (muo *ManifestUpdateOne) SetNillableRepositoryID(id *int) *ManifestUpdateOne {
	if id != nil {
		muo = muo.SetRepositoryID(*id)
	}
	return muo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (muo *ManifestUpdateOne) SetRepository(r *Repository) *ManifestUpdateOne {
	return muo.SetRepositoryID(r.ID)
}

// AddSubjectIDs adds the "subject" edge to the Manifest entity by IDs.
func (muo *ManifestUpdateOne) AddSubjectIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.AddSubjectIDs(ids...)
	return muo
}

// AddSubject adds the "subject" edges to the Manifest entity.
func (muo *ManifestUpdateOne) AddSubject(m ...*Manifest) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddSubjectIDs(ids...)
}

// AddRefererIDs adds the "referer" edge to the Manifest entity by IDs.
func (muo *ManifestUpdateOne) AddRefererIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.AddRefererIDs(ids...)
	return muo
}

// AddReferer adds the "referer" edges to the Manifest entity.
func (muo *ManifestUpdateOne) AddReferer(m ...*Manifest) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddRefererIDs(ids...)
}

// Mutation returns the ManifestMutation object of the builder.
func (muo *ManifestUpdateOne) Mutation() *ManifestMutation {
	return muo.mutation
}

// ClearTags clears all "tags" edges to the ManifestTagReference entity.
func (muo *ManifestUpdateOne) ClearTags() *ManifestUpdateOne {
	muo.mutation.ClearTags()
	return muo
}

// RemoveTagIDs removes the "tags" edge to ManifestTagReference entities by IDs.
func (muo *ManifestUpdateOne) RemoveTagIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.RemoveTagIDs(ids...)
	return muo
}

// RemoveTags removes "tags" edges to ManifestTagReference entities.
func (muo *ManifestUpdateOne) RemoveTags(m ...*ManifestTagReference) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveTagIDs(ids...)
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (muo *ManifestUpdateOne) ClearRepository() *ManifestUpdateOne {
	muo.mutation.ClearRepository()
	return muo
}

// ClearSubject clears all "subject" edges to the Manifest entity.
func (muo *ManifestUpdateOne) ClearSubject() *ManifestUpdateOne {
	muo.mutation.ClearSubject()
	return muo
}

// RemoveSubjectIDs removes the "subject" edge to Manifest entities by IDs.
func (muo *ManifestUpdateOne) RemoveSubjectIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.RemoveSubjectIDs(ids...)
	return muo
}

// RemoveSubject removes "subject" edges to Manifest entities.
func (muo *ManifestUpdateOne) RemoveSubject(m ...*Manifest) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveSubjectIDs(ids...)
}

// ClearReferer clears all "referer" edges to the Manifest entity.
func (muo *ManifestUpdateOne) ClearReferer() *ManifestUpdateOne {
	muo.mutation.ClearReferer()
	return muo
}

// RemoveRefererIDs removes the "referer" edge to Manifest entities by IDs.
func (muo *ManifestUpdateOne) RemoveRefererIDs(ids ...int) *ManifestUpdateOne {
	muo.mutation.RemoveRefererIDs(ids...)
	return muo
}

// RemoveReferer removes "referer" edges to Manifest entities.
func (muo *ManifestUpdateOne) RemoveReferer(m ...*Manifest) *ManifestUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveRefererIDs(ids...)
}

// Where appends a list predicates to the ManifestUpdate builder.
func (muo *ManifestUpdateOne) Where(ps ...predicate.Manifest) *ManifestUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ManifestUpdateOne) Select(field string, fields ...string) *ManifestUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Manifest entity.
func (muo *ManifestUpdateOne) Save(ctx context.Context) (*Manifest, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ManifestUpdateOne) SaveX(ctx context.Context) *Manifest {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ManifestUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ManifestUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *ManifestUpdateOne) sqlSave(ctx context.Context) (_node *Manifest, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifest.Table, manifest.Columns, sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Manifest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manifest.FieldID)
		for _, f := range fields {
			if !manifest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manifest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MediaType(); ok {
		_spec.SetField(manifest.FieldMediaType, field.TypeString, value)
	}
	if value, ok := muo.mutation.ArtifactType(); ok {
		_spec.SetField(manifest.FieldArtifactType, field.TypeString, value)
	}
	if muo.mutation.ArtifactTypeCleared() {
		_spec.ClearField(manifest.FieldArtifactType, field.TypeString)
	}
	if value, ok := muo.mutation.S3Path(); ok {
		_spec.SetField(manifest.FieldS3Path, field.TypeString, value)
	}
	if value, ok := muo.mutation.Digest(); ok {
		_spec.SetField(manifest.FieldDigest, field.TypeString, value)
	}
	if muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifest.RepositoryTable,
			Columns: []string{manifest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifest.RepositoryTable,
			Columns: []string{manifest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedSubjectIDs(); len(nodes) > 0 && !muo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RefererCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRefererIDs(); len(nodes) > 0 && !muo.mutation.RefererCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RefererIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Manifest{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
