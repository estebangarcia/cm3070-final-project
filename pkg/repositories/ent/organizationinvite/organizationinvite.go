// Code generated by ent, DO NOT EDIT.

package organizationinvite

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organizationinvite type in the database.
	Label = "organization_invite"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInviteID holds the string denoting the invite_id field in the database.
	FieldInviteID = "invite_id"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeInvitee holds the string denoting the invitee edge name in mutations.
	EdgeInvitee = "invitee"
	// Table holds the table name of the organizationinvite in the database.
	Table = "organization_invites"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "organization_invites"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_id"
	// InviteeTable is the table that holds the invitee relation/edge.
	InviteeTable = "organization_invites"
	// InviteeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	InviteeInverseTable = "users"
	// InviteeColumn is the table column denoting the invitee relation/edge.
	InviteeColumn = "user_id"
)

// Columns holds all SQL columns for organizationinvite fields.
var Columns = []string{
	FieldID,
	FieldInviteID,
	FieldOrganizationID,
	FieldUserID,
	FieldEmail,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInviteID holds the default value on creation for the "invite_id" field.
	DefaultInviteID func() string
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleOwner   Role = "owner"
	RoleManager Role = "manager"
	RoleMember  Role = "member"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleOwner, RoleManager, RoleMember:
		return nil
	default:
		return fmt.Errorf("organizationinvite: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the OrganizationInvite queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInviteID orders the results by the invite_id field.
func ByInviteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInviteID, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}

// ByInviteeField orders the results by invitee field.
func ByInviteeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInviteeStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
func newInviteeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InviteeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InviteeTable, InviteeColumn),
	)
}
