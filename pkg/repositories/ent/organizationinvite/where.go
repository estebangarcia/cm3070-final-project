// Code generated by ent, DO NOT EDIT.

package organizationinvite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLTE(FieldID, id))
}

// InviteID applies equality check predicate on the "invite_id" field. It's identical to InviteIDEQ.
func InviteID(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldInviteID, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldOrganizationID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldUserID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldEmail, v))
}

// InviteIDEQ applies the EQ predicate on the "invite_id" field.
func InviteIDEQ(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldInviteID, v))
}

// InviteIDNEQ applies the NEQ predicate on the "invite_id" field.
func InviteIDNEQ(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldInviteID, v))
}

// InviteIDIn applies the In predicate on the "invite_id" field.
func InviteIDIn(vs ...string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldInviteID, vs...))
}

// InviteIDNotIn applies the NotIn predicate on the "invite_id" field.
func InviteIDNotIn(vs ...string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldInviteID, vs...))
}

// InviteIDGT applies the GT predicate on the "invite_id" field.
func InviteIDGT(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGT(FieldInviteID, v))
}

// InviteIDGTE applies the GTE predicate on the "invite_id" field.
func InviteIDGTE(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGTE(FieldInviteID, v))
}

// InviteIDLT applies the LT predicate on the "invite_id" field.
func InviteIDLT(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLT(FieldInviteID, v))
}

// InviteIDLTE applies the LTE predicate on the "invite_id" field.
func InviteIDLTE(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLTE(FieldInviteID, v))
}

// InviteIDContains applies the Contains predicate on the "invite_id" field.
func InviteIDContains(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldContains(FieldInviteID, v))
}

// InviteIDHasPrefix applies the HasPrefix predicate on the "invite_id" field.
func InviteIDHasPrefix(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldHasPrefix(FieldInviteID, v))
}

// InviteIDHasSuffix applies the HasSuffix predicate on the "invite_id" field.
func InviteIDHasSuffix(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldHasSuffix(FieldInviteID, v))
}

// InviteIDEqualFold applies the EqualFold predicate on the "invite_id" field.
func InviteIDEqualFold(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEqualFold(FieldInviteID, v))
}

// InviteIDContainsFold applies the ContainsFold predicate on the "invite_id" field.
func InviteIDContainsFold(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldContainsFold(FieldInviteID, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotNull(FieldUserID))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldContainsFold(FieldEmail, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.FieldNotIn(FieldRole, vs...))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvitee applies the HasEdge predicate on the "invitee" edge.
func HasInvitee() predicate.OrganizationInvite {
	return predicate.OrganizationInvite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InviteeTable, InviteeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviteeWith applies the HasEdge predicate on the "invitee" edge with a given conditions (other predicates).
func HasInviteeWith(preds ...predicate.User) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(func(s *sql.Selector) {
		step := newInviteeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrganizationInvite) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrganizationInvite) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrganizationInvite) predicate.OrganizationInvite {
	return predicate.OrganizationInvite(sql.NotPredicates(p))
}
