// Code generated by ent, DO NOT EDIT.

package manifesttagreference

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the manifesttagreference type in the database.
	Label = "manifest_tag_reference"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// EdgeManifests holds the string denoting the manifests edge name in mutations.
	EdgeManifests = "manifests"
	// Table holds the table name of the manifesttagreference in the database.
	Table = "manifest_tag_references"
	// ManifestsTable is the table that holds the manifests relation/edge.
	ManifestsTable = "manifest_tag_references"
	// ManifestsInverseTable is the table name for the Manifest entity.
	// It exists in this package in order to avoid circular dependency with the "manifest" package.
	ManifestsInverseTable = "manifests"
	// ManifestsColumn is the table column denoting the manifests relation/edge.
	ManifestsColumn = "manifest_tag_reference_manifests"
)

// Columns holds all SQL columns for manifesttagreference fields.
var Columns = []string{
	FieldID,
	FieldTag,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "manifest_tag_references"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"manifest_tag_reference_manifests",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ManifestTagReference queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTag orders the results by the tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}

// ByManifestsField orders the results by manifests field.
func ByManifestsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newManifestsStep(), sql.OrderByField(field, opts...))
	}
}
func newManifestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ManifestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ManifestsTable, ManifestsColumn),
	)
}
