// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ManifestTagReferenceUpdate is the builder for updating ManifestTagReference entities.
type ManifestTagReferenceUpdate struct {
	config
	hooks    []Hook
	mutation *ManifestTagReferenceMutation
}

// Where appends a list predicates to the ManifestTagReferenceUpdate builder.
func (mtru *ManifestTagReferenceUpdate) Where(ps ...predicate.ManifestTagReference) *ManifestTagReferenceUpdate {
	mtru.mutation.Where(ps...)
	return mtru
}

// SetTag sets the "tag" field.
func (mtru *ManifestTagReferenceUpdate) SetTag(s string) *ManifestTagReferenceUpdate {
	mtru.mutation.SetTag(s)
	return mtru
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (mtru *ManifestTagReferenceUpdate) SetNillableTag(s *string) *ManifestTagReferenceUpdate {
	if s != nil {
		mtru.SetTag(*s)
	}
	return mtru
}

// SetManifestsID sets the "manifests" edge to the Manifest entity by ID.
func (mtru *ManifestTagReferenceUpdate) SetManifestsID(id int) *ManifestTagReferenceUpdate {
	mtru.mutation.SetManifestsID(id)
	return mtru
}

// SetNillableManifestsID sets the "manifests" edge to the Manifest entity by ID if the given value is not nil.
func (mtru *ManifestTagReferenceUpdate) SetNillableManifestsID(id *int) *ManifestTagReferenceUpdate {
	if id != nil {
		mtru = mtru.SetManifestsID(*id)
	}
	return mtru
}

// SetManifests sets the "manifests" edge to the Manifest entity.
func (mtru *ManifestTagReferenceUpdate) SetManifests(m *Manifest) *ManifestTagReferenceUpdate {
	return mtru.SetManifestsID(m.ID)
}

// Mutation returns the ManifestTagReferenceMutation object of the builder.
func (mtru *ManifestTagReferenceUpdate) Mutation() *ManifestTagReferenceMutation {
	return mtru.mutation
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (mtru *ManifestTagReferenceUpdate) ClearManifests() *ManifestTagReferenceUpdate {
	mtru.mutation.ClearManifests()
	return mtru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mtru *ManifestTagReferenceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mtru.sqlSave, mtru.mutation, mtru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtru *ManifestTagReferenceUpdate) SaveX(ctx context.Context) int {
	affected, err := mtru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtru *ManifestTagReferenceUpdate) Exec(ctx context.Context) error {
	_, err := mtru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtru *ManifestTagReferenceUpdate) ExecX(ctx context.Context) {
	if err := mtru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtru *ManifestTagReferenceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifesttagreference.Table, manifesttagreference.Columns, sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt))
	if ps := mtru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtru.mutation.Tag(); ok {
		_spec.SetField(manifesttagreference.FieldTag, field.TypeString, value)
	}
	if mtru.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   manifesttagreference.ManifestsTable,
			Columns: []string{manifesttagreference.ManifestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtru.mutation.ManifestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   manifesttagreference.ManifestsTable,
			Columns: []string{manifesttagreference.ManifestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifesttagreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mtru.mutation.done = true
	return n, nil
}

// ManifestTagReferenceUpdateOne is the builder for updating a single ManifestTagReference entity.
type ManifestTagReferenceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ManifestTagReferenceMutation
}

// SetTag sets the "tag" field.
func (mtruo *ManifestTagReferenceUpdateOne) SetTag(s string) *ManifestTagReferenceUpdateOne {
	mtruo.mutation.SetTag(s)
	return mtruo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (mtruo *ManifestTagReferenceUpdateOne) SetNillableTag(s *string) *ManifestTagReferenceUpdateOne {
	if s != nil {
		mtruo.SetTag(*s)
	}
	return mtruo
}

// SetManifestsID sets the "manifests" edge to the Manifest entity by ID.
func (mtruo *ManifestTagReferenceUpdateOne) SetManifestsID(id int) *ManifestTagReferenceUpdateOne {
	mtruo.mutation.SetManifestsID(id)
	return mtruo
}

// SetNillableManifestsID sets the "manifests" edge to the Manifest entity by ID if the given value is not nil.
func (mtruo *ManifestTagReferenceUpdateOne) SetNillableManifestsID(id *int) *ManifestTagReferenceUpdateOne {
	if id != nil {
		mtruo = mtruo.SetManifestsID(*id)
	}
	return mtruo
}

// SetManifests sets the "manifests" edge to the Manifest entity.
func (mtruo *ManifestTagReferenceUpdateOne) SetManifests(m *Manifest) *ManifestTagReferenceUpdateOne {
	return mtruo.SetManifestsID(m.ID)
}

// Mutation returns the ManifestTagReferenceMutation object of the builder.
func (mtruo *ManifestTagReferenceUpdateOne) Mutation() *ManifestTagReferenceMutation {
	return mtruo.mutation
}

// ClearManifests clears the "manifests" edge to the Manifest entity.
func (mtruo *ManifestTagReferenceUpdateOne) ClearManifests() *ManifestTagReferenceUpdateOne {
	mtruo.mutation.ClearManifests()
	return mtruo
}

// Where appends a list predicates to the ManifestTagReferenceUpdate builder.
func (mtruo *ManifestTagReferenceUpdateOne) Where(ps ...predicate.ManifestTagReference) *ManifestTagReferenceUpdateOne {
	mtruo.mutation.Where(ps...)
	return mtruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mtruo *ManifestTagReferenceUpdateOne) Select(field string, fields ...string) *ManifestTagReferenceUpdateOne {
	mtruo.fields = append([]string{field}, fields...)
	return mtruo
}

// Save executes the query and returns the updated ManifestTagReference entity.
func (mtruo *ManifestTagReferenceUpdateOne) Save(ctx context.Context) (*ManifestTagReference, error) {
	return withHooks(ctx, mtruo.sqlSave, mtruo.mutation, mtruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mtruo *ManifestTagReferenceUpdateOne) SaveX(ctx context.Context) *ManifestTagReference {
	node, err := mtruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mtruo *ManifestTagReferenceUpdateOne) Exec(ctx context.Context) error {
	_, err := mtruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtruo *ManifestTagReferenceUpdateOne) ExecX(ctx context.Context) {
	if err := mtruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtruo *ManifestTagReferenceUpdateOne) sqlSave(ctx context.Context) (_node *ManifestTagReference, err error) {
	_spec := sqlgraph.NewUpdateSpec(manifesttagreference.Table, manifesttagreference.Columns, sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt))
	id, ok := mtruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "ManifestTagReference.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mtruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manifesttagreference.FieldID)
		for _, f := range fields {
			if !manifesttagreference.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != manifesttagreference.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mtruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtruo.mutation.Tag(); ok {
		_spec.SetField(manifesttagreference.FieldTag, field.TypeString, value)
	}
	if mtruo.mutation.ManifestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   manifesttagreference.ManifestsTable,
			Columns: []string{manifesttagreference.ManifestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtruo.mutation.ManifestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   manifesttagreference.ManifestsTable,
			Columns: []string{manifesttagreference.ManifestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ManifestTagReference{config: mtruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mtruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manifesttagreference.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mtruo.mutation.done = true
	return _node, nil
}
