// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifestlayer"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/vulnerability"
)

// ManifestCreate is the builder for creating a Manifest entity.
type ManifestCreate struct {
	config
	mutation *ManifestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMediaType sets the "media_type" field.
func (mc *ManifestCreate) SetMediaType(s string) *ManifestCreate {
	mc.mutation.SetMediaType(s)
	return mc
}

// SetArtifactType sets the "artifact_type" field.
func (mc *ManifestCreate) SetArtifactType(s string) *ManifestCreate {
	mc.mutation.SetArtifactType(s)
	return mc
}

// SetNillableArtifactType sets the "artifact_type" field if the given value is not nil.
func (mc *ManifestCreate) SetNillableArtifactType(s *string) *ManifestCreate {
	if s != nil {
		mc.SetArtifactType(*s)
	}
	return mc
}

// SetS3Path sets the "s3_path" field.
func (mc *ManifestCreate) SetS3Path(s string) *ManifestCreate {
	mc.mutation.SetS3Path(s)
	return mc
}

// SetDigest sets the "digest" field.
func (mc *ManifestCreate) SetDigest(s string) *ManifestCreate {
	mc.mutation.SetDigest(s)
	return mc
}

// SetScannedAt sets the "scanned_at" field.
func (mc *ManifestCreate) SetScannedAt(t time.Time) *ManifestCreate {
	mc.mutation.SetScannedAt(t)
	return mc
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (mc *ManifestCreate) SetNillableScannedAt(t *time.Time) *ManifestCreate {
	if t != nil {
		mc.SetScannedAt(*t)
	}
	return mc
}

// AddTagIDs adds the "tags" edge to the ManifestTagReference entity by IDs.
func (mc *ManifestCreate) AddTagIDs(ids ...int) *ManifestCreate {
	mc.mutation.AddTagIDs(ids...)
	return mc
}

// AddTags adds the "tags" edges to the ManifestTagReference entity.
func (mc *ManifestCreate) AddTags(m ...*ManifestTagReference) *ManifestCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddTagIDs(ids...)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (mc *ManifestCreate) SetRepositoryID(id int) *ManifestCreate {
	mc.mutation.SetRepositoryID(id)
	return mc
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (mc *ManifestCreate) SetNillableRepositoryID(id *int) *ManifestCreate {
	if id != nil {
		mc = mc.SetRepositoryID(*id)
	}
	return mc
}

// SetRepository sets the "repository" edge to the Repository entity.
func (mc *ManifestCreate) SetRepository(r *Repository) *ManifestCreate {
	return mc.SetRepositoryID(r.ID)
}

// AddSubjectIDs adds the "subject" edge to the Manifest entity by IDs.
func (mc *ManifestCreate) AddSubjectIDs(ids ...int) *ManifestCreate {
	mc.mutation.AddSubjectIDs(ids...)
	return mc
}

// AddSubject adds the "subject" edges to the Manifest entity.
func (mc *ManifestCreate) AddSubject(m ...*Manifest) *ManifestCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddSubjectIDs(ids...)
}

// AddRefererIDs adds the "referer" edge to the Manifest entity by IDs.
func (mc *ManifestCreate) AddRefererIDs(ids ...int) *ManifestCreate {
	mc.mutation.AddRefererIDs(ids...)
	return mc
}

// AddReferer adds the "referer" edges to the Manifest entity.
func (mc *ManifestCreate) AddReferer(m ...*Manifest) *ManifestCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddRefererIDs(ids...)
}

// AddManifestLayerIDs adds the "manifest_layers" edge to the ManifestLayer entity by IDs.
func (mc *ManifestCreate) AddManifestLayerIDs(ids ...int) *ManifestCreate {
	mc.mutation.AddManifestLayerIDs(ids...)
	return mc
}

// AddManifestLayers adds the "manifest_layers" edges to the ManifestLayer entity.
func (mc *ManifestCreate) AddManifestLayers(m ...*ManifestLayer) *ManifestCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddManifestLayerIDs(ids...)
}

// AddVulnerabilityIDs adds the "vulnerabilities" edge to the Vulnerability entity by IDs.
func (mc *ManifestCreate) AddVulnerabilityIDs(ids ...int) *ManifestCreate {
	mc.mutation.AddVulnerabilityIDs(ids...)
	return mc
}

// AddVulnerabilities adds the "vulnerabilities" edges to the Vulnerability entity.
func (mc *ManifestCreate) AddVulnerabilities(v ...*Vulnerability) *ManifestCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddVulnerabilityIDs(ids...)
}

// Mutation returns the ManifestMutation object of the builder.
func (mc *ManifestCreate) Mutation() *ManifestMutation {
	return mc.mutation
}

// Save creates the Manifest in the database.
func (mc *ManifestCreate) Save(ctx context.Context) (*Manifest, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ManifestCreate) SaveX(ctx context.Context) *Manifest {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ManifestCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ManifestCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ManifestCreate) check() error {
	if _, ok := mc.mutation.MediaType(); !ok {
		return &ValidationError{Name: "media_type", err: errors.New(`ent: missing required field "Manifest.media_type"`)}
	}
	if _, ok := mc.mutation.S3Path(); !ok {
		return &ValidationError{Name: "s3_path", err: errors.New(`ent: missing required field "Manifest.s3_path"`)}
	}
	if _, ok := mc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "Manifest.digest"`)}
	}
	return nil
}

func (mc *ManifestCreate) sqlSave(ctx context.Context) (*Manifest, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ManifestCreate) createSpec() (*Manifest, *sqlgraph.CreateSpec) {
	var (
		_node = &Manifest{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(manifest.Table, sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.MediaType(); ok {
		_spec.SetField(manifest.FieldMediaType, field.TypeString, value)
		_node.MediaType = value
	}
	if value, ok := mc.mutation.ArtifactType(); ok {
		_spec.SetField(manifest.FieldArtifactType, field.TypeString, value)
		_node.ArtifactType = value
	}
	if value, ok := mc.mutation.S3Path(); ok {
		_spec.SetField(manifest.FieldS3Path, field.TypeString, value)
		_node.S3Path = value
	}
	if value, ok := mc.mutation.Digest(); ok {
		_spec.SetField(manifest.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := mc.mutation.ScannedAt(); ok {
		_spec.SetField(manifest.FieldScannedAt, field.TypeTime, value)
		_node.ScannedAt = &value
	}
	if nodes := mc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   manifest.TagsTable,
			Columns: []string{manifest.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifesttagreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manifest.RepositoryTable,
			Columns: []string{manifest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_manifests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   manifest.SubjectTable,
			Columns: manifest.SubjectPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.RefererIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.RefererTable,
			Columns: manifest.RefererPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ManifestLayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   manifest.ManifestLayersTable,
			Columns: []string{manifest.ManifestLayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manifestlayer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.VulnerabilitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   manifest.VulnerabilitiesTable,
			Columns: manifest.VulnerabilitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vulnerability.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manifest.Create().
//		SetMediaType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestUpsert) {
//			SetMediaType(v+v).
//		}).
//		Exec(ctx)
func (mc *ManifestCreate) OnConflict(opts ...sql.ConflictOption) *ManifestUpsertOne {
	mc.conflict = opts
	return &ManifestUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manifest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *ManifestCreate) OnConflictColumns(columns ...string) *ManifestUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &ManifestUpsertOne{
		create: mc,
	}
}

type (
	// ManifestUpsertOne is the builder for "upsert"-ing
	//  one Manifest node.
	ManifestUpsertOne struct {
		create *ManifestCreate
	}

	// ManifestUpsert is the "OnConflict" setter.
	ManifestUpsert struct {
		*sql.UpdateSet
	}
)

// SetMediaType sets the "media_type" field.
func (u *ManifestUpsert) SetMediaType(v string) *ManifestUpsert {
	u.Set(manifest.FieldMediaType, v)
	return u
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestUpsert) UpdateMediaType() *ManifestUpsert {
	u.SetExcluded(manifest.FieldMediaType)
	return u
}

// SetArtifactType sets the "artifact_type" field.
func (u *ManifestUpsert) SetArtifactType(v string) *ManifestUpsert {
	u.Set(manifest.FieldArtifactType, v)
	return u
}

// UpdateArtifactType sets the "artifact_type" field to the value that was provided on create.
func (u *ManifestUpsert) UpdateArtifactType() *ManifestUpsert {
	u.SetExcluded(manifest.FieldArtifactType)
	return u
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (u *ManifestUpsert) ClearArtifactType() *ManifestUpsert {
	u.SetNull(manifest.FieldArtifactType)
	return u
}

// SetS3Path sets the "s3_path" field.
func (u *ManifestUpsert) SetS3Path(v string) *ManifestUpsert {
	u.Set(manifest.FieldS3Path, v)
	return u
}

// UpdateS3Path sets the "s3_path" field to the value that was provided on create.
func (u *ManifestUpsert) UpdateS3Path() *ManifestUpsert {
	u.SetExcluded(manifest.FieldS3Path)
	return u
}

// SetDigest sets the "digest" field.
func (u *ManifestUpsert) SetDigest(v string) *ManifestUpsert {
	u.Set(manifest.FieldDigest, v)
	return u
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestUpsert) UpdateDigest() *ManifestUpsert {
	u.SetExcluded(manifest.FieldDigest)
	return u
}

// SetScannedAt sets the "scanned_at" field.
func (u *ManifestUpsert) SetScannedAt(v time.Time) *ManifestUpsert {
	u.Set(manifest.FieldScannedAt, v)
	return u
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ManifestUpsert) UpdateScannedAt() *ManifestUpsert {
	u.SetExcluded(manifest.FieldScannedAt)
	return u
}

// ClearScannedAt clears the value of the "scanned_at" field.
func (u *ManifestUpsert) ClearScannedAt() *ManifestUpsert {
	u.SetNull(manifest.FieldScannedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Manifest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestUpsertOne) UpdateNewValues() *ManifestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Manifest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ManifestUpsertOne) Ignore() *ManifestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestUpsertOne) DoNothing() *ManifestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestCreate.OnConflict
// documentation for more info.
func (u *ManifestUpsertOne) Update(set func(*ManifestUpsert)) *ManifestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestUpsert{UpdateSet: update})
	}))
	return u
}

// SetMediaType sets the "media_type" field.
func (u *ManifestUpsertOne) SetMediaType(v string) *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestUpsertOne) UpdateMediaType() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateMediaType()
	})
}

// SetArtifactType sets the "artifact_type" field.
func (u *ManifestUpsertOne) SetArtifactType(v string) *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.SetArtifactType(v)
	})
}

// UpdateArtifactType sets the "artifact_type" field to the value that was provided on create.
func (u *ManifestUpsertOne) UpdateArtifactType() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateArtifactType()
	})
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (u *ManifestUpsertOne) ClearArtifactType() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.ClearArtifactType()
	})
}

// SetS3Path sets the "s3_path" field.
func (u *ManifestUpsertOne) SetS3Path(v string) *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.SetS3Path(v)
	})
}

// UpdateS3Path sets the "s3_path" field to the value that was provided on create.
func (u *ManifestUpsertOne) UpdateS3Path() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateS3Path()
	})
}

// SetDigest sets the "digest" field.
func (u *ManifestUpsertOne) SetDigest(v string) *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestUpsertOne) UpdateDigest() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateDigest()
	})
}

// SetScannedAt sets the "scanned_at" field.
func (u *ManifestUpsertOne) SetScannedAt(v time.Time) *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.SetScannedAt(v)
	})
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ManifestUpsertOne) UpdateScannedAt() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateScannedAt()
	})
}

// ClearScannedAt clears the value of the "scanned_at" field.
func (u *ManifestUpsertOne) ClearScannedAt() *ManifestUpsertOne {
	return u.Update(func(s *ManifestUpsert) {
		s.ClearScannedAt()
	})
}

// Exec executes the query.
func (u *ManifestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ManifestUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ManifestUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ManifestCreateBulk is the builder for creating many Manifest entities in bulk.
type ManifestCreateBulk struct {
	config
	err      error
	builders []*ManifestCreate
	conflict []sql.ConflictOption
}

// Save creates the Manifest entities in the database.
func (mcb *ManifestCreateBulk) Save(ctx context.Context) ([]*Manifest, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Manifest, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManifestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ManifestCreateBulk) SaveX(ctx context.Context) []*Manifest {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ManifestCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ManifestCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manifest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManifestUpsert) {
//			SetMediaType(v+v).
//		}).
//		Exec(ctx)
func (mcb *ManifestCreateBulk) OnConflict(opts ...sql.ConflictOption) *ManifestUpsertBulk {
	mcb.conflict = opts
	return &ManifestUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manifest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *ManifestCreateBulk) OnConflictColumns(columns ...string) *ManifestUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &ManifestUpsertBulk{
		create: mcb,
	}
}

// ManifestUpsertBulk is the builder for "upsert"-ing
// a bulk of Manifest nodes.
type ManifestUpsertBulk struct {
	create *ManifestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Manifest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ManifestUpsertBulk) UpdateNewValues() *ManifestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Manifest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ManifestUpsertBulk) Ignore() *ManifestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManifestUpsertBulk) DoNothing() *ManifestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManifestCreateBulk.OnConflict
// documentation for more info.
func (u *ManifestUpsertBulk) Update(set func(*ManifestUpsert)) *ManifestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManifestUpsert{UpdateSet: update})
	}))
	return u
}

// SetMediaType sets the "media_type" field.
func (u *ManifestUpsertBulk) SetMediaType(v string) *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.SetMediaType(v)
	})
}

// UpdateMediaType sets the "media_type" field to the value that was provided on create.
func (u *ManifestUpsertBulk) UpdateMediaType() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateMediaType()
	})
}

// SetArtifactType sets the "artifact_type" field.
func (u *ManifestUpsertBulk) SetArtifactType(v string) *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.SetArtifactType(v)
	})
}

// UpdateArtifactType sets the "artifact_type" field to the value that was provided on create.
func (u *ManifestUpsertBulk) UpdateArtifactType() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateArtifactType()
	})
}

// ClearArtifactType clears the value of the "artifact_type" field.
func (u *ManifestUpsertBulk) ClearArtifactType() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.ClearArtifactType()
	})
}

// SetS3Path sets the "s3_path" field.
func (u *ManifestUpsertBulk) SetS3Path(v string) *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.SetS3Path(v)
	})
}

// UpdateS3Path sets the "s3_path" field to the value that was provided on create.
func (u *ManifestUpsertBulk) UpdateS3Path() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateS3Path()
	})
}

// SetDigest sets the "digest" field.
func (u *ManifestUpsertBulk) SetDigest(v string) *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.SetDigest(v)
	})
}

// UpdateDigest sets the "digest" field to the value that was provided on create.
func (u *ManifestUpsertBulk) UpdateDigest() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateDigest()
	})
}

// SetScannedAt sets the "scanned_at" field.
func (u *ManifestUpsertBulk) SetScannedAt(v time.Time) *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.SetScannedAt(v)
	})
}

// UpdateScannedAt sets the "scanned_at" field to the value that was provided on create.
func (u *ManifestUpsertBulk) UpdateScannedAt() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.UpdateScannedAt()
	})
}

// ClearScannedAt clears the value of the "scanned_at" field.
func (u *ManifestUpsertBulk) ClearScannedAt() *ManifestUpsertBulk {
	return u.Update(func(s *ManifestUpsert) {
		s.ClearScannedAt()
	})
}

// Exec executes the query.
func (u *ManifestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ManifestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManifestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManifestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
