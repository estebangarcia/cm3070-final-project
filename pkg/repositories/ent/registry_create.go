// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/organization"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/registry"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/repository"
)

// RegistryCreate is the builder for creating a Registry entity.
type RegistryCreate struct {
	config
	mutation *RegistryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rc *RegistryCreate) SetName(s string) *RegistryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetSlug sets the "slug" field.
func (rc *RegistryCreate) SetSlug(s string) *RegistryCreate {
	rc.mutation.SetSlug(s)
	return rc
}

// AddRepositoryIDs adds the "repositories" edge to the Repository entity by IDs.
func (rc *RegistryCreate) AddRepositoryIDs(ids ...int) *RegistryCreate {
	rc.mutation.AddRepositoryIDs(ids...)
	return rc
}

// AddRepositories adds the "repositories" edges to the Repository entity.
func (rc *RegistryCreate) AddRepositories(r ...*Repository) *RegistryCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRepositoryIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (rc *RegistryCreate) SetOrganizationID(id int) *RegistryCreate {
	rc.mutation.SetOrganizationID(id)
	return rc
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (rc *RegistryCreate) SetNillableOrganizationID(id *int) *RegistryCreate {
	if id != nil {
		rc = rc.SetOrganizationID(*id)
	}
	return rc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (rc *RegistryCreate) SetOrganization(o *Organization) *RegistryCreate {
	return rc.SetOrganizationID(o.ID)
}

// Mutation returns the RegistryMutation object of the builder.
func (rc *RegistryCreate) Mutation() *RegistryMutation {
	return rc.mutation
}

// Save creates the Registry in the database.
func (rc *RegistryCreate) Save(ctx context.Context) (*Registry, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegistryCreate) SaveX(ctx context.Context) *Registry {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegistryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegistryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegistryCreate) check() error {
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Registry.name"`)}
	}
	if _, ok := rc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Registry.slug"`)}
	}
	return nil
}

func (rc *RegistryCreate) sqlSave(ctx context.Context) (*Registry, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RegistryCreate) createSpec() (*Registry, *sqlgraph.CreateSpec) {
	var (
		_node = &Registry{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(registry.Table, sqlgraph.NewFieldSpec(registry.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(registry.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Slug(); ok {
		_spec.SetField(registry.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if nodes := rc.mutation.RepositoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   registry.RepositoriesTable,
			Columns: []string{registry.RepositoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   registry.OrganizationTable,
			Columns: []string{registry.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_registries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registry.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rc *RegistryCreate) OnConflict(opts ...sql.ConflictOption) *RegistryUpsertOne {
	rc.conflict = opts
	return &RegistryUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RegistryCreate) OnConflictColumns(columns ...string) *RegistryUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RegistryUpsertOne{
		create: rc,
	}
}

type (
	// RegistryUpsertOne is the builder for "upsert"-ing
	//  one Registry node.
	RegistryUpsertOne struct {
		create *RegistryCreate
	}

	// RegistryUpsert is the "OnConflict" setter.
	RegistryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *RegistryUpsert) SetName(v string) *RegistryUpsert {
	u.Set(registry.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateName() *RegistryUpsert {
	u.SetExcluded(registry.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *RegistryUpsert) SetSlug(v string) *RegistryUpsert {
	u.Set(registry.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *RegistryUpsert) UpdateSlug() *RegistryUpsert {
	u.SetExcluded(registry.FieldSlug)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RegistryUpsertOne) UpdateNewValues() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegistryUpsertOne) Ignore() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistryUpsertOne) DoNothing() *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistryCreate.OnConflict
// documentation for more info.
func (u *RegistryUpsertOne) Update(set func(*RegistryUpsert)) *RegistryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RegistryUpsertOne) SetName(v string) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateName() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *RegistryUpsertOne) SetSlug(v string) *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *RegistryUpsertOne) UpdateSlug() *RegistryUpsertOne {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateSlug()
	})
}

// Exec executes the query.
func (u *RegistryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegistryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegistryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegistryCreateBulk is the builder for creating many Registry entities in bulk.
type RegistryCreateBulk struct {
	config
	err      error
	builders []*RegistryCreate
	conflict []sql.ConflictOption
}

// Save creates the Registry entities in the database.
func (rcb *RegistryCreateBulk) Save(ctx context.Context) ([]*Registry, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Registry, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegistryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegistryCreateBulk) SaveX(ctx context.Context) []*Registry {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegistryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegistryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Registry.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegistryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rcb *RegistryCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegistryUpsertBulk {
	rcb.conflict = opts
	return &RegistryUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RegistryCreateBulk) OnConflictColumns(columns ...string) *RegistryUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RegistryUpsertBulk{
		create: rcb,
	}
}

// RegistryUpsertBulk is the builder for "upsert"-ing
// a bulk of Registry nodes.
type RegistryUpsertBulk struct {
	create *RegistryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RegistryUpsertBulk) UpdateNewValues() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Registry.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegistryUpsertBulk) Ignore() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegistryUpsertBulk) DoNothing() *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegistryCreateBulk.OnConflict
// documentation for more info.
func (u *RegistryUpsertBulk) Update(set func(*RegistryUpsert)) *RegistryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegistryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *RegistryUpsertBulk) SetName(v string) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateName() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateName()
	})
}

// SetSlug sets the "slug" field.
func (u *RegistryUpsertBulk) SetSlug(v string) *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *RegistryUpsertBulk) UpdateSlug() *RegistryUpsertBulk {
	return u.Update(func(s *RegistryUpsert) {
		s.UpdateSlug()
	})
}

// Exec executes the query.
func (u *RegistryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegistryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegistryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegistryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
