// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/vulnerability"
)

// Vulnerability is the model entity for the Vulnerability schema.
type Vulnerability struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VulnerabilityID holds the value of the "vulnerability_id" field.
	VulnerabilityID string `json:"vulnerability_id,omitempty"`
	// VulnerabilityURLDetails holds the value of the "vulnerability_url_details" field.
	VulnerabilityURLDetails string `json:"vulnerability_url_details,omitempty"`
	// InstalledVersion holds the value of the "installed_version" field.
	InstalledVersion string `json:"installed_version,omitempty"`
	// FixedVersion holds the value of the "fixed_version" field.
	FixedVersion string `json:"fixed_version,omitempty"`
	// Status holds the value of the "status" field.
	Status vulnerability.Status `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Severity holds the value of the "severity" field.
	Severity vulnerability.Severity `json:"severity,omitempty"`
	// V3Score holds the value of the "v3_score" field.
	V3Score string `json:"v3_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VulnerabilityQuery when eager-loading is set.
	Edges        VulnerabilityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VulnerabilityEdges holds the relations/edges for other nodes in the graph.
type VulnerabilityEdges struct {
	// Manifests holds the value of the manifests edge.
	Manifests []*Manifest `json:"manifests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ManifestsOrErr returns the Manifests value or an error if the edge
// was not loaded in eager-loading.
func (e VulnerabilityEdges) ManifestsOrErr() ([]*Manifest, error) {
	if e.loadedTypes[0] {
		return e.Manifests, nil
	}
	return nil, &NotLoadedError{edge: "manifests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vulnerability) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			values[i] = new(sql.NullInt64)
		case vulnerability.FieldVulnerabilityID, vulnerability.FieldVulnerabilityURLDetails, vulnerability.FieldInstalledVersion, vulnerability.FieldFixedVersion, vulnerability.FieldStatus, vulnerability.FieldTitle, vulnerability.FieldSeverity, vulnerability.FieldV3Score:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vulnerability fields.
func (v *Vulnerability) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vulnerability.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vulnerability.FieldVulnerabilityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_id", values[i])
			} else if value.Valid {
				v.VulnerabilityID = value.String
			}
		case vulnerability.FieldVulnerabilityURLDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vulnerability_url_details", values[i])
			} else if value.Valid {
				v.VulnerabilityURLDetails = value.String
			}
		case vulnerability.FieldInstalledVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field installed_version", values[i])
			} else if value.Valid {
				v.InstalledVersion = value.String
			}
		case vulnerability.FieldFixedVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_version", values[i])
			} else if value.Valid {
				v.FixedVersion = value.String
			}
		case vulnerability.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = vulnerability.Status(value.String)
			}
		case vulnerability.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case vulnerability.FieldSeverity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field severity", values[i])
			} else if value.Valid {
				v.Severity = vulnerability.Severity(value.String)
			}
		case vulnerability.FieldV3Score:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v3_score", values[i])
			} else if value.Valid {
				v.V3Score = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vulnerability.
// This includes values selected through modifiers, order, etc.
func (v *Vulnerability) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryManifests queries the "manifests" edge of the Vulnerability entity.
func (v *Vulnerability) QueryManifests() *ManifestQuery {
	return NewVulnerabilityClient(v.config).QueryManifests(v)
}

// Update returns a builder for updating this Vulnerability.
// Note that you need to call Vulnerability.Unwrap() before calling this method if this Vulnerability
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vulnerability) Update() *VulnerabilityUpdateOne {
	return NewVulnerabilityClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vulnerability entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vulnerability) Unwrap() *Vulnerability {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vulnerability is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vulnerability) String() string {
	var builder strings.Builder
	builder.WriteString("Vulnerability(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("vulnerability_id=")
	builder.WriteString(v.VulnerabilityID)
	builder.WriteString(", ")
	builder.WriteString("vulnerability_url_details=")
	builder.WriteString(v.VulnerabilityURLDetails)
	builder.WriteString(", ")
	builder.WriteString("installed_version=")
	builder.WriteString(v.InstalledVersion)
	builder.WriteString(", ")
	builder.WriteString("fixed_version=")
	builder.WriteString(v.FixedVersion)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", v.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(v.Title)
	builder.WriteString(", ")
	builder.WriteString("severity=")
	builder.WriteString(fmt.Sprintf("%v", v.Severity))
	builder.WriteString(", ")
	builder.WriteString("v3_score=")
	builder.WriteString(v.V3Score)
	builder.WriteByte(')')
	return builder.String()
}

// Vulnerabilities is a parsable slice of Vulnerability.
type Vulnerabilities []*Vulnerability
