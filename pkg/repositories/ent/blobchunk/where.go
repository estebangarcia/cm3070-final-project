// Code generated by ent, DO NOT EDIT.

package blobchunk

import (
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldID, id))
}

// UploadID applies equality check predicate on the "upload_id" field. It's identical to UploadIDEQ.
func UploadID(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldUploadID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldSessionID, v))
}

// RangeFrom applies equality check predicate on the "range_from" field. It's identical to RangeFromEQ.
func RangeFrom(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldRangeFrom, v))
}

// RangeTo applies equality check predicate on the "range_to" field. It's identical to RangeToEQ.
func RangeTo(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldRangeTo, v))
}

// PartNumber applies equality check predicate on the "part_number" field. It's identical to PartNumberEQ.
func PartNumber(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldPartNumber, v))
}

// UploadIDEQ applies the EQ predicate on the "upload_id" field.
func UploadIDEQ(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldUploadID, v))
}

// UploadIDNEQ applies the NEQ predicate on the "upload_id" field.
func UploadIDNEQ(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldUploadID, v))
}

// UploadIDIn applies the In predicate on the "upload_id" field.
func UploadIDIn(vs ...string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldUploadID, vs...))
}

// UploadIDNotIn applies the NotIn predicate on the "upload_id" field.
func UploadIDNotIn(vs ...string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldUploadID, vs...))
}

// UploadIDGT applies the GT predicate on the "upload_id" field.
func UploadIDGT(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldUploadID, v))
}

// UploadIDGTE applies the GTE predicate on the "upload_id" field.
func UploadIDGTE(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldUploadID, v))
}

// UploadIDLT applies the LT predicate on the "upload_id" field.
func UploadIDLT(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldUploadID, v))
}

// UploadIDLTE applies the LTE predicate on the "upload_id" field.
func UploadIDLTE(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldUploadID, v))
}

// UploadIDContains applies the Contains predicate on the "upload_id" field.
func UploadIDContains(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldContains(FieldUploadID, v))
}

// UploadIDHasPrefix applies the HasPrefix predicate on the "upload_id" field.
func UploadIDHasPrefix(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldHasPrefix(FieldUploadID, v))
}

// UploadIDHasSuffix applies the HasSuffix predicate on the "upload_id" field.
func UploadIDHasSuffix(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldHasSuffix(FieldUploadID, v))
}

// UploadIDEqualFold applies the EqualFold predicate on the "upload_id" field.
func UploadIDEqualFold(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEqualFold(FieldUploadID, v))
}

// UploadIDContainsFold applies the ContainsFold predicate on the "upload_id" field.
func UploadIDContainsFold(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldContainsFold(FieldUploadID, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldContainsFold(FieldSessionID, v))
}

// RangeFromEQ applies the EQ predicate on the "range_from" field.
func RangeFromEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldRangeFrom, v))
}

// RangeFromNEQ applies the NEQ predicate on the "range_from" field.
func RangeFromNEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldRangeFrom, v))
}

// RangeFromIn applies the In predicate on the "range_from" field.
func RangeFromIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldRangeFrom, vs...))
}

// RangeFromNotIn applies the NotIn predicate on the "range_from" field.
func RangeFromNotIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldRangeFrom, vs...))
}

// RangeFromGT applies the GT predicate on the "range_from" field.
func RangeFromGT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldRangeFrom, v))
}

// RangeFromGTE applies the GTE predicate on the "range_from" field.
func RangeFromGTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldRangeFrom, v))
}

// RangeFromLT applies the LT predicate on the "range_from" field.
func RangeFromLT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldRangeFrom, v))
}

// RangeFromLTE applies the LTE predicate on the "range_from" field.
func RangeFromLTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldRangeFrom, v))
}

// RangeToEQ applies the EQ predicate on the "range_to" field.
func RangeToEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldRangeTo, v))
}

// RangeToNEQ applies the NEQ predicate on the "range_to" field.
func RangeToNEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldRangeTo, v))
}

// RangeToIn applies the In predicate on the "range_to" field.
func RangeToIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldRangeTo, vs...))
}

// RangeToNotIn applies the NotIn predicate on the "range_to" field.
func RangeToNotIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldRangeTo, vs...))
}

// RangeToGT applies the GT predicate on the "range_to" field.
func RangeToGT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldRangeTo, v))
}

// RangeToGTE applies the GTE predicate on the "range_to" field.
func RangeToGTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldRangeTo, v))
}

// RangeToLT applies the LT predicate on the "range_to" field.
func RangeToLT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldRangeTo, v))
}

// RangeToLTE applies the LTE predicate on the "range_to" field.
func RangeToLTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldRangeTo, v))
}

// PartNumberEQ applies the EQ predicate on the "part_number" field.
func PartNumberEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldEQ(FieldPartNumber, v))
}

// PartNumberNEQ applies the NEQ predicate on the "part_number" field.
func PartNumberNEQ(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNEQ(FieldPartNumber, v))
}

// PartNumberIn applies the In predicate on the "part_number" field.
func PartNumberIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldIn(FieldPartNumber, vs...))
}

// PartNumberNotIn applies the NotIn predicate on the "part_number" field.
func PartNumberNotIn(vs ...uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldNotIn(FieldPartNumber, vs...))
}

// PartNumberGT applies the GT predicate on the "part_number" field.
func PartNumberGT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGT(FieldPartNumber, v))
}

// PartNumberGTE applies the GTE predicate on the "part_number" field.
func PartNumberGTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldGTE(FieldPartNumber, v))
}

// PartNumberLT applies the LT predicate on the "part_number" field.
func PartNumberLT(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLT(FieldPartNumber, v))
}

// PartNumberLTE applies the LTE predicate on the "part_number" field.
func PartNumberLTE(v uint64) predicate.BlobChunk {
	return predicate.BlobChunk(sql.FieldLTE(FieldPartNumber, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlobChunk) predicate.BlobChunk {
	return predicate.BlobChunk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlobChunk) predicate.BlobChunk {
	return predicate.BlobChunk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlobChunk) predicate.BlobChunk {
	return predicate.BlobChunk(sql.NotPredicates(p))
}
