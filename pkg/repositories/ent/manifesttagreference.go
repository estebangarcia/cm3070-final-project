// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifest"
	"github.com/estebangarcia/cm3070-final-project/pkg/repositories/ent/manifesttagreference"
)

// ManifestTagReference is the model entity for the ManifestTagReference schema.
type ManifestTagReference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ManifestTagReferenceQuery when eager-loading is set.
	Edges                            ManifestTagReferenceEdges `json:"edges"`
	manifest_tag_reference_manifests *int
	selectValues                     sql.SelectValues
}

// ManifestTagReferenceEdges holds the relations/edges for other nodes in the graph.
type ManifestTagReferenceEdges struct {
	// Manifests holds the value of the manifests edge.
	Manifests *Manifest `json:"manifests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ManifestsOrErr returns the Manifests value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ManifestTagReferenceEdges) ManifestsOrErr() (*Manifest, error) {
	if e.Manifests != nil {
		return e.Manifests, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: manifest.Label}
	}
	return nil, &NotLoadedError{edge: "manifests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ManifestTagReference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case manifesttagreference.FieldID:
			values[i] = new(sql.NullInt64)
		case manifesttagreference.FieldTag:
			values[i] = new(sql.NullString)
		case manifesttagreference.ForeignKeys[0]: // manifest_tag_reference_manifests
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ManifestTagReference fields.
func (mtr *ManifestTagReference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case manifesttagreference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mtr.ID = int(value.Int64)
		case manifesttagreference.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				mtr.Tag = value.String
			}
		case manifesttagreference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field manifest_tag_reference_manifests", value)
			} else if value.Valid {
				mtr.manifest_tag_reference_manifests = new(int)
				*mtr.manifest_tag_reference_manifests = int(value.Int64)
			}
		default:
			mtr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ManifestTagReference.
// This includes values selected through modifiers, order, etc.
func (mtr *ManifestTagReference) Value(name string) (ent.Value, error) {
	return mtr.selectValues.Get(name)
}

// QueryManifests queries the "manifests" edge of the ManifestTagReference entity.
func (mtr *ManifestTagReference) QueryManifests() *ManifestQuery {
	return NewManifestTagReferenceClient(mtr.config).QueryManifests(mtr)
}

// Update returns a builder for updating this ManifestTagReference.
// Note that you need to call ManifestTagReference.Unwrap() before calling this method if this ManifestTagReference
// was returned from a transaction, and the transaction was committed or rolled back.
func (mtr *ManifestTagReference) Update() *ManifestTagReferenceUpdateOne {
	return NewManifestTagReferenceClient(mtr.config).UpdateOne(mtr)
}

// Unwrap unwraps the ManifestTagReference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mtr *ManifestTagReference) Unwrap() *ManifestTagReference {
	_tx, ok := mtr.config.driver.(*txDriver)
	if !ok {
		panic("entities: ManifestTagReference is not a transactional entity")
	}
	mtr.config.driver = _tx.drv
	return mtr
}

// String implements the fmt.Stringer.
func (mtr *ManifestTagReference) String() string {
	var builder strings.Builder
	builder.WriteString("ManifestTagReference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mtr.ID))
	builder.WriteString("tag=")
	builder.WriteString(mtr.Tag)
	builder.WriteByte(')')
	return builder.String()
}

// ManifestTagReferences is a parsable slice of ManifestTagReference.
type ManifestTagReferences []*ManifestTagReference
